{"docstore/metadata": {"06977792-ec7f-4178-8537-debbfbe1cb98": {"doc_hash": "719b8062a3cc781324185a8f5f83a71e207516c4cc0171904e8ecd900645d23f"}, "b79799a6-a7fc-4243-8dda-d29895477ec6": {"doc_hash": "9076725a36340071b30e7dd043c8bf8b1a951c9b3db4098c2491a6f46f35d7f4"}, "7a84f05e-b538-4a28-b307-f4d240c08ee0": {"doc_hash": "52090d674ce1ec8eb919a68ec2788533540d41ae589f3734533ad539aa2a4bd5"}, "24be54a7-9e50-4ad3-83ca-5c33b2cb7713": {"doc_hash": "a23806dd105d2a6c5634152f94cf11fb68f3198dccb14a626147494ff9b8ee15"}, "91dab0c6-5231-4834-90e5-213d31e69cac": {"doc_hash": "0dbf9f909911015faa7964e6a232ce8b62830f3184c03c900363ebadcd4acf2d"}, "0a017e8d-1d95-473f-92c3-de8cc528d1fe": {"doc_hash": "27482bd92d9af1d8be6597d049eb47e436cce39028c905323ca695d10f59f58c"}, "22bedbeb-3e9f-48ae-ad40-01720f946dbd": {"doc_hash": "2e4b185b0215fa39243a46fdb68575c444249256f29d35f043bffa76f2260f3c"}, "18b63b00-3c34-4e5f-81fc-7cd0af69e8b7": {"doc_hash": "32d6869cfb71b07dec25f215eb5e01b7af5925fbb0410450f8b926d2c777f8e8"}, "8f9d34b7-5879-4e66-a6aa-0e477a509ce3": {"doc_hash": "f95969ee8758eacd894c7e9b37238619146e152a81b47d3fa5dd13d61768d893"}, "f2902a59-40ac-4ed9-b88a-7fb9e4a83207": {"doc_hash": "19e1a23f3d43d8d22e71e1e1962919298f0763cdb999cb9990d899c14c879bfb"}, "cf1c76a9-04ec-4895-adc8-38d866494da4": {"doc_hash": "8349a5599a89b7260047935861504309593cfdd040f6b9158f79110ffb95c292"}, "4babb8dc-7684-4ce9-9f14-c033c7267719": {"doc_hash": "a9f30a16aae66416e4a1ec222e7da163055881acffdeb5303e841226eaa77400"}, "3e3fd041-76b5-494f-b4c8-6304d73d9364": {"doc_hash": "76ac28b201b9bd59b86dfc8d240273bf1b072b26b5c8eaac21718f556861fdac"}, "d274cbf0-58c4-47ab-8df3-a0726bdc21fb": {"doc_hash": "18aee7be0f081568702767e2698ee5266eb2c0c207975278e68d179f1a087646"}, "3a83a364-4584-4769-be60-9214d69c4c03": {"doc_hash": "e8ae6d29cf1fbab4cc2cf21786b9aa2130e63b5ce7514c842d29a76603a7e74a"}, "da8644f9-8dbc-48c6-b714-1ca1cb9cb7ee": {"doc_hash": "2b53510808811f455893c57308bb6c52f080d6ceaf3fda8ffdc3b771f149db94"}, "83aefef5-173f-4d29-bf00-b2fae3410d49": {"doc_hash": "f51bcd8b0f428ad76b2bf01cbdb3c076317315cf5b6c1153037bab3667156a2c"}, "e8998fa1-b2ff-4910-9c88-0537910a9476": {"doc_hash": "8278b72a7c1e54b451500c361ec487933f4678ecdae4e98960f056833599db70"}, "c9951e01-4c50-42ed-8e3b-4031c7cb6cae": {"doc_hash": "e972f7619f7bf5226771635b388e775dde285cd95a5c5df4dc6128991524e11e"}, "84e9d413-aa9a-4156-9fc7-75b85e24767b": {"doc_hash": "1932c39c7e4b7a100596bced864180120ce2722ec0e192102c166c6883411338"}, "01461507-6aa3-412c-a0bd-00a6f51a7120": {"doc_hash": "3978862fbb7446ada380d3ca1a17f04b24a8883a31b618b4b2c193d2e85e7589"}, "f0b9caae-2563-489e-aca7-9cb25636a566": {"doc_hash": "dd2c7da2074db08e2d845fc5639e99a4bd7f9d5952610a620a6f03ebbc65685b"}, "5321ee9c-06e5-4bfd-876e-5be265e49d9a": {"doc_hash": "b39d350042f5d6396168f427190dabfed02bc47f486951f6669045ee2848eb5b"}, "28c551b5-9595-4406-8b9d-44d378689ee1": {"doc_hash": "230eedb38b0bb63d27fe85c698c40312d3172bcb7a10ff6b11eae567413e8adb"}, "5dc6b721-a7f0-4f94-97a8-2ac60d63c8cb": {"doc_hash": "43dcef5c7216975ba70217beade98359dc6e44c252704ea0ea8277d3657a6397"}, "422a3694-fe52-4c6f-8147-5088eeec4039": {"doc_hash": "b4b90f5823268ec97e91d5fd2df2c810ba667ae71ce446c02b233e7b0312ce80"}, "887d1c89-81b2-4be6-8cbf-2d12fd4c6faf": {"doc_hash": "4be349281e22a81ce65416b93b92766d0fc8e783621d5b9326ca8df3da09016a"}, "fd681403-a52a-401b-a8fb-23c7037367fb": {"doc_hash": "ffd50d6f5179435436b1e77e91e1cc9e3b9b4e52adfe551233516d77ff496129"}, "fffb161b-7ea8-4080-b8a9-964ff78c4c5c": {"doc_hash": "5c17019b58698ef3aa5c6a62adecbf708b6d214b6f9299b9ae410cb4630089f0"}, "58a45610-1500-4839-93aa-2b4d485a9969": {"doc_hash": "68af19ce4ecbda422494cf654cd3e882d694c5d67b24dd0749bd0bd68165a467"}, "6d27ec27-70a0-474c-bc2d-a8642aaa8825": {"doc_hash": "ca4ac58398a26e166b125e828aad9a5b4eb35a5b8af2968ffed3c9f060a369c7"}, "b12e0c93-229a-43aa-96cd-51a7625f48cc": {"doc_hash": "d6d1958b824903ba4c8bcaf8e1577ef0c3f18227e9f4629a572692531ca28497"}, "26bbd5ae-66a4-4545-bedb-d2184a025e5c": {"doc_hash": "0cf6b930cf2589e3d3999fc65edcee88414f88559cc98b0a3f17717a8812aaac"}, "d324b3e8-8a0e-463f-ab65-a933933dd0b8": {"doc_hash": "18e52645f1f985d0a40dc5a399d6e877abd89510fe3c787f9ec14bb8094ad9e1"}, "7bc96df3-6a48-4842-9d56-ed8ae877cb9f": {"doc_hash": "f49c0d500920d373b1b801e8dc153c022399e25d842366225f65fd5265f3b38b"}, "85afdd1d-3363-44e8-ad23-adfc23649238": {"doc_hash": "22613de13f4dc3ca272b8bb7606e8815d01642da83e1f1e2abd372f030d5968a"}, "7152d24d-d099-4f5f-95b5-c1bdee21484d": {"doc_hash": "d055ae02a6a94a33363978c6f1229eb98727467b93af49e1319d2835c91bffd8"}, "419d5db5-f118-43c0-9ef9-58e419936b75": {"doc_hash": "a5b1f1189e953951ceae822675faa770b829e492f57b0c47af927c99d3fe815f"}, "2e3ec590-ec9b-4cbd-b8f1-0489bc5c4099": {"doc_hash": "c086bd341aa256bc4a52a9c5941d2a04b25af809c99927928ef26dd8ede148ef"}, "469afb5d-e4f1-4114-9e8a-552542f70df5": {"doc_hash": "8ed3c7593575c56501cb93b459b60ce56b050179589c7e5fcd18fef77c68b499"}, "749ac45b-16fa-485d-9234-642d198d9490": {"doc_hash": "8f7d107b2a4e57f3b21ff4428b521c1c85a582c7bb9a4a747b38b3d0b2ff61af"}, "1c23e7c4-de16-4ec1-ba81-3ca43a95901b": {"doc_hash": "42aaa45edf6ed1651628e80c8d8df88451a91dd8e21d1d4b1053cb9d41a32baf"}, "7c8fef52-d82f-4942-a036-d22ac5aba3e4": {"doc_hash": "a0b64203e3fb242cf89a26987d306f8fe54f77948332ea464a232d81b0551b87"}, "7b327916-a5eb-4df6-905c-037140f78f0b": {"doc_hash": "9fa7542522c13078551ada075786fdff153085da196ce7c365203ece6a481258"}, "1d89d363-7b4b-42b3-b185-bba007cc6439": {"doc_hash": "74ace3ca3ee90731f42cc41009837a65a343f72c4696873a1fad9dc16eb6ff2d"}, "ae2dafad-92e4-4fd9-8f71-ce1925618393": {"doc_hash": "375a9786b9835faa3b957f727e7dc670fa00c87b38f75adb0e3d9c6d214f6ad4"}, "0b285c89-30a7-4626-9d8d-7ddb31749b9e": {"doc_hash": "df4445fc3f5a12fadd97f6dc864ba48c3652a456263f4670042967f43432f36d"}, "bd574a3f-0ee4-4e04-b3de-ce503bd07670": {"doc_hash": "048250d22849cadbc5f8d736a15b46573f9adffd01b35b5d20e6abf4b45b5dd8"}, "60d82583-d785-48b9-94a3-ab34b6cc81c4": {"doc_hash": "a74ddceae9b4d8d408875a0067646195e295c031a2f516dedb8258b6fb579e0e"}, "8863ca32-d4a1-4677-93d3-c586428fd17e": {"doc_hash": "8c20553f17ef2d458ea2e4f2dc3311111f7e6347fcd4de9b2aa509a7854cbd86"}, "7157e970-cd48-47fa-94a9-4f56899ed7c4": {"doc_hash": "8c4260f897adb9a2d625084643104057fe61598eade3e4b56fe73a60b20fbddd"}, "283984ff-35df-455e-adb3-ee5c04bf52b7": {"doc_hash": "8dc1ef7c92f430dd8b659dbe2ce6c7ba40206f72ab802bb3c5de59db152b263a"}, "7b5dd838-2b6c-431d-a5c3-48a4277207d0": {"doc_hash": "8b1cfe3e2e0c82d4fd834b253dafe53786e676fbe15205ea177eb68ad90ce8d2"}, "f4ad37d9-6d05-48c9-afdf-4e1cb3327a42": {"doc_hash": "c3384d8e662a7035130fdaf54087dff46022b4a29419e1b821fb40c5625f96d4"}, "e562e9ce-09ad-4064-b75b-05b89d47dd64": {"doc_hash": "646d522f71d29b0fad09f2c6b4270a1bf98198d9d90c90da5014bc963884ac7a"}, "047d8813-a04e-4ee2-bf1b-9ffbb49e6e78": {"doc_hash": "50679579562ca066e0288883d586346ae903309f0c950acec38876492cf6d817"}, "5fa4b0f4-beec-4d83-bee5-ab31ff5cd3ba": {"doc_hash": "a23e01cb5d6db21981677f32bf6000cbf2653db7b21a8637a132efff139d81f1"}, "799cbbb3-d4f5-4bfc-912b-f86e373d0e8d": {"doc_hash": "10db9e4b95a9bbfcc6593805e0d68eceac8bdca63cd11a04739e8c077b996c9e"}, "69fdff5b-92ca-4f7b-989e-3679c5ac1cd4": {"doc_hash": "2eb24b4415b40f89b36b26f72838692f299fbebe4891b9222fa299b142bd2675"}, "82913062-5c96-4eae-8ae9-4131091e8bd1": {"doc_hash": "d359368aa1e21e5adefed9599d3259fe0dc65a5ecd4c37c4b455633f96a6bc45"}, "baca83a1-6f67-4946-8a8a-2e677dec84a3": {"doc_hash": "8f0cda25375b6f12af64ae00c23074c03ffd04fb528ac1b7a0c385dfe954f293"}, "e3ec7194-47fc-4c1d-8021-c9ca02afcb69": {"doc_hash": "1f0366a6305c5ae4fa7de30d270b19e1037800363f103e95d77aeb0b91de3412"}, "47b20144-10ce-425f-b0e4-64d31a641578": {"doc_hash": "ee5d7298c99bf4f5e5b9410f857acfb5c845ba5c601767b1c5a1bb01cf0e5467"}, "d38acb5c-aacd-4555-93cf-4191a8d4084f": {"doc_hash": "8fcdcc7479a9e0520c04fa59aa7352dc3035f97819365da874bb041d6860b26d"}, "b5dcd142-089f-4430-b5b0-f055740c3e49": {"doc_hash": "8f50fbb87ce2e97e6d2c0e6bfe37cdfd8f34c5b3760118b28392ad0a8c7080ed"}, "b8201c0c-fbca-4345-a2f0-ca01c25d8712": {"doc_hash": "9408ec27fecb643c1606cf8c32999ce793bc6a132e0699708c38d3936c8429a3"}, "73d0401f-fa58-4b29-a752-912f4f4c0819": {"doc_hash": "52f67a688c35802cbd20a480a67ca8bae2020fd1c40a2ab0bcc61e636bb94f28"}, "51309f06-0813-422c-b527-e515eb51de4a": {"doc_hash": "f1b2e87b52a4d2d85528b283c7bf744aa31162e75233e371cb46aad25e7ee8fd"}, "4ce7dc28-591b-4b77-a2b1-d7828ea67e17": {"doc_hash": "47f63ddfc0ed407fc4724a8b67ef4f75dcd889a7fdcf3605dc263b319fd78816"}, "e4a7d4a5-6c27-47f5-80d7-8a58763a7e53": {"doc_hash": "597b229165670f76e7d12be4b8e98494e9a76b0c96312d155c11491a9f1fb9eb"}, "c438e8aa-7ffe-40e8-acac-b6924aed965b": {"doc_hash": "5bfbb872b3aba0aef42abcaed0bc0d9fa7de6a497d9f84a8d3d7518e0f792d9f"}, "d5b65b58-2b28-4dc6-a65c-75d00109020b": {"doc_hash": "aedd45f3f5fbbd80f7d315c81fbbc6a6e97fd054c5ace102fbb9b3974b46986e"}, "a8d8308c-1e72-48ab-8b80-ba98a775490c": {"doc_hash": "4119dee1923b596062892dffe22248036186ea551420e8f06cadd532dba3b0b5"}, "b7501837-1409-48f3-8cc6-26a0f161fbd5": {"doc_hash": "8f7aa169b560ee2fcbcc301c22033029a748f29a7586b95d305a69db26c1813d"}, "621780ee-ccbe-49b7-8d80-88f4f5312f13": {"doc_hash": "091b4529ecda9ab739fd13e5bd182e58aabc9eb4fafdbf417bed754b2ff46050"}, "121694bb-5e98-4230-8455-a3d4d13c87e1": {"doc_hash": "004d636a2e1b781fd717d89bb73455e3ebe15532d153b243d39dc88aa567499d"}, "ebc6a198-26ca-41fe-a4bf-31677337140d": {"doc_hash": "05c7f62e0ecbe8232deb161c430f895b0e1d1311264dd6420a0294f4aa8f02f5"}, "b941ae0c-1ae5-41d6-bd69-922d0d428d4d": {"doc_hash": "bd9e34d55812d32c0509deeb4d8d7e3b0d6cf7fd387594768280a1079296e094"}, "eb886181-3ab6-4423-b3f9-8fae57985365": {"doc_hash": "b3a0f6d04c89563ad3849d9295e23c8a48234802087e8a113d8e16d2af86b721"}, "f4df009f-5f91-4884-a556-46e00eb22f98": {"doc_hash": "c21487262fd6d58b2d8c2113f82c04832e170715999a691bc67af013fe3e0ad2"}, "90971de8-80ef-4744-9dd8-721b7e3e7b0a": {"doc_hash": "9a81a9f6ceef9cd03d7095f94336e5df0728c0673b6f93a6944565857a9a54cd"}, "ca0e58a1-7d70-418c-b5c1-53a598e9af36": {"doc_hash": "6b3629c1684282764b8302b1d9cc60ef9184bd850751bf88b486bcf71eac4053"}, "5026ae97-70ac-4dbb-bc68-3bdec795b3e0": {"doc_hash": "535d4a05b302477cff61478701cda058eb15703b00a2b5c60cd2820287ac4555"}, "31de72e2-e86c-4fd0-be16-f1eaf9015127": {"doc_hash": "34aac1862aafafb65409867451080e33f6ba2a79ddfc5b568a07b632a625adbf"}, "54a76e75-fe3a-478e-9c53-c369579167a8": {"doc_hash": "838461e410f79def92de2d118a424b02759d23a9a621ab49a77f4ca552051274"}, "ae7fb894-b0ac-4228-b550-57edc710e393": {"doc_hash": "618bfccb92207581094a823ba5dc0d837d315ef764d10320532477368e5da63c"}, "21d9b4cf-2e86-4034-9825-991968e97416": {"doc_hash": "f760857dd1513c6ffcaf79af6c7d7108447f3c4a991438cbbc64586dc4b13e97"}, "f7f02eb7-8c77-4f41-9ff4-65a7a6f296e9": {"doc_hash": "c77c2da2c62815b3af298a5ad5aedbcdd606fd9915701310e39ea9a172b2d2ac"}, "c14983c3-d499-436f-bc9c-fe3f9b8d436e": {"doc_hash": "d30d6d6bb403ae9930eaddb2c3cfa1d89ff895edd7dc74ba778c84eed4d55654"}, "94b4de45-2e13-415c-b988-042201857c79": {"doc_hash": "b9f0d798aa9619bedc61a29ca4bedd54b1575c3b80b153e0e461d7e8ce3e41f9"}, "c5e503a8-478b-4548-b8d8-746efa3bf199": {"doc_hash": "7cad8f7ec825715dd8bbc8c68789a4a6f5c038f514ced41cef81d7fe59f4e867"}, "560e6cd7-e001-4530-a256-80bd1bd2bc87": {"doc_hash": "cfe499074962415170ecd522203fc9585a7dd194ded6c8e99cf574d9e47f254f"}, "202194d6-6c38-498b-8d35-fd14ffcc47e0": {"doc_hash": "171d1bc4ea7ceb912db2efb83ffafa27387dd9a4302ee0b0ea0a8f102f28da8a"}, "5a803291-8524-4855-8d1d-6eeb52b1c1e7": {"doc_hash": "c6f34a65638e3d46a5c503d208f670eae937198d3fb6123949ec8a41d6f9fcf9"}, "ac67467e-f49e-4a9b-ba45-0ebc78644ec7": {"doc_hash": "e1e678a6ef029ebcb48a7e8793cf49364aa7684dbf390c5e81025e5d04f7e791"}, "922dcff3-d45f-46a9-8e18-c102a80c2317": {"doc_hash": "a93a8e5d496eab1815c9446d4a6b2d312bead85d1f602f7da95b1c6bcb4cddfe"}, "87ed4747-1073-4fbc-8c80-91b3f6d54785": {"doc_hash": "fa08110f8aec13816da9334c7a0276c4ad0bdb3a3785a6908a811c7870120176"}, "7d7d1913-f4b1-4309-93a3-d76a5002942e": {"doc_hash": "1704186f850377b196f72056e85fd84480cfc37f44f3d747c52cf42bbe7c97b3"}, "57d53c61-df4b-4a59-9904-55cfe4f5a355": {"doc_hash": "399758fcc9e1ca0d25f3610926c0438b65c3953e623101152309dc03864af5a3"}, "523d0cac-9b53-4c72-81bb-6536d99707a1": {"doc_hash": "26fd976f6c8e4068166cca446022b5fd329b443382d86d7e3132b9f756035ce7"}, "a64535dd-4a97-4860-b5f0-708358508c1d": {"doc_hash": "ad42548c84efdcc3c5f14584e1857702fc2e343edb62021eb301c96b13120694"}, "f5094cab-bb02-4365-9145-ad1ae902ae4b": {"doc_hash": "535eb9ff8c3a557a3b05693dfe07519f236dbcb01593a41032a532ce36a4baa6"}, "46719a54-a341-4b3f-9b3d-51c93158d62f": {"doc_hash": "a3af8279d643dc48ecf305230630b7a5d95b209d07ed41698120c8595ccd34d1"}, "e4c4343f-9f0e-4fc6-8cde-fc09d8d4e4ae": {"doc_hash": "833d5003c5c33ca796789a9a4677aa398520f81ba5e1f8ca3e1df9803b0175f6"}, "a417b631-a8ac-4471-bbba-6611d21409bd": {"doc_hash": "60aa4670b571234c528ff879352559648bf2193c3858ab405ffb573acb4c557a"}, "676e96c3-9e3e-475b-97bf-ed28b9cf5c3b": {"doc_hash": "688853da28e0fddad9a5ca2b55acdcad3744475e23821393d693acca28a1262b"}, "24dfb47b-3694-44cf-8f36-6c25d0b70135": {"doc_hash": "c0bf8f4fe18e57bc949095523c39b9dc33e0aee71164a99766d062c0d53bbcb1"}, "6b76a792-4f4c-406b-bc68-d89d1bfe1222": {"doc_hash": "caefcc94992a35134f85c3e977a417e102b33edb261904c39ecc2eba5e4bb09f"}, "1fe207c7-1ea5-4d16-b5af-e647cdaccf68": {"doc_hash": "20000a603646078577fcfd7c3d441f4be6de9989777c1c95b0b677f9edaca5ad"}, "a238ed18-5ddc-45b5-826b-c50fcf6cc9d0": {"doc_hash": "415d873bb51c33d61a956684cf2c6e1efdc9f2a67eb12c57dd2cec7c5d395fba"}, "6d1c5909-e638-43b5-b702-618cec4a8970": {"doc_hash": "ff8c01d5583a6f81ed489d2578fe9f62569a1e0a32ad4675b93b1a7bbb06bb53"}, "3728fd48-a72e-4028-a8a2-253e3bc30ecc": {"doc_hash": "c628441429955077e733893254f99b1ed79147b3fbafbb56fdae422df817348b"}, "73d15744-b514-442d-82d0-3b54e9c138e9": {"doc_hash": "3f452414cb0e6fb2149bb9b4728abdf2adec6d86d17336f67111249a81995845"}, "a0c86139-b721-4f87-a98e-47b0cf7665c9": {"doc_hash": "0c02b22fe914589c1375f37ad27682b81fb2ee6ae2c34543a7eda2069631f2ef"}, "c85a4f75-6d24-4182-ae5d-7a920fe6bc89": {"doc_hash": "434d04150f9d12bc1a24d7e154c69a41e3cd5109c35c09f1e342360aa54b7d6e"}, "72d06ab8-952b-4494-8c0e-34a0b0e0144f": {"doc_hash": "3050e6623ffcadb453e2f004484c0f521b9ee65e64d8aca9f070e4f71939864c"}, "9d4b0ca0-2d14-4011-8bb1-b5a0a51ae27d": {"doc_hash": "ec55c3ca226ab11c7929b4c75c5bd19adbc794abf3a78726ed78eec870c502d6"}, "d68bc248-2499-42e1-b497-dda25de5dd68": {"doc_hash": "989d687f660333d8ad8b62cec4be7df1eac064ae204fbf1d38fa728a36bdbab7"}, "29e37942-eaec-4407-b57d-5d9403c4ee37": {"doc_hash": "301e39ea87c2faea59ba7e4193781f93369a4f4ec8214923f739681fe1678827"}, "86098e8f-0111-43de-92f7-3f4a67e24525": {"doc_hash": "e6cf6fedccbc8f1a1aaae6387bc96aafae079b9f0d70ad5d9874f025a337d3a0"}, "a5b39789-ed3e-441b-875d-b88261af2ba5": {"doc_hash": "cb7ac20e0a94d1aee77b72d4532168a708371263d6b30281b12054cd34a3bd7e"}, "94c53122-0a62-418b-a234-a09c1083d0b0": {"doc_hash": "c67051a0577c8e02895a2aca3fe1306848c21a011d3a24446fa7b95f80aaca96"}, "8f7ada60-85e8-4c29-9311-f38624912487": {"doc_hash": "24b9b2ccc47181f38b76eece97ac4f710da5e684007fd0cc69b0e33babf3d656"}, "0d1379ec-a3a7-45dc-9fcd-593f556e412d": {"doc_hash": "a24aa09a9b3468a591c9cb11fc805e7aece7379394840cb92fd25fa749f737c9"}, "51d02de8-dc42-44ef-9ffb-d354f030dd46": {"doc_hash": "08f856f62375f75a9d5925a015214ac9e1a8263543deb9535e915952fac84345"}, "65d88e18-bbfb-4f81-843d-30469e264cf7": {"doc_hash": "c73cbd8ae41d4245ecd2b3c2737e67cfcf5dcb35144ef0a256db3eae8c458e10"}, "61999da8-d939-4d3b-9847-0ecb272a1495": {"doc_hash": "8135de69a260df8a30af40f9299587b9195ae797ea9421f2bcc062f15956df6c"}, "77e3bdc9-26d6-4577-bc90-796919c7ac00": {"doc_hash": "3c834a6172591b302dba20d3c87925e42ef62900d156ad063bd80d5c6d279af2"}, "9e978e5a-a9e7-4bdf-8590-02f74352172e": {"doc_hash": "a6109a695ce6e13763cba594e655307356b5dd64c8eec68c0368b7af8cd340e8"}, "9a999f13-7735-4fba-8302-728cfb93364c": {"doc_hash": "cc320f36fc0826376fca64fdc2a7bfa6def1860f73d6d745d12e104478df0caf"}, "9c6a2a30-1ca3-4ff3-a3ac-d7ef75e47e27": {"doc_hash": "55532cf2ed31ae55f3c165836f0a33f0598973bf9b4b2755cba6821762be7a75"}, "fc499ba4-9259-4e59-b844-96d8b1eeee69": {"doc_hash": "26bea9c9fc75cdb870a8f8eca756c59aa7183d0511ff23d9ddab0b9c7dc10194"}, "10221894-99bd-48a8-af53-e01f8ff35f89": {"doc_hash": "3bd707f25c22b830b44ece33cd0cd9916a40a74e004ac8548cb0d4663afbed39"}, "b01b5cec-e13c-4dbe-8330-027585a0a953": {"doc_hash": "0ea86f09c3ae2fb8c47aa92701c6a145e1832955f834bb8ec1105a872f121729"}, "fb7440ec-0750-400c-a94a-3b0445ede4bc": {"doc_hash": "5c9527033da354224a2e54c035ee434db4c03b59cb1d0415b9d95e528f03e280"}, "1956cde6-bf60-44b2-b020-77e3b2133e3d": {"doc_hash": "3c6e3201b097ced7b4d83243cc87eba3978252304eb65989b6671a39d6e4a9f9"}, "c367460d-d277-4a9d-828a-e78fc4212b1e": {"doc_hash": "96159c25df993ad55f79744c149483eaaf818df32059d235f2f6e63d898f205e"}, "220b9d46-cadf-4242-8699-a214cd9d0e9c": {"doc_hash": "ec33a66008aec954410ee07206c5f9c074db58e82caacaecd90c8abcc237251b"}, "c167640f-f167-40e9-a724-59758cc1d39b": {"doc_hash": "382de7880adb4fd1d712605abe00520c3ed247f96b84721eb22ad706eda71d16"}, "5e464e1d-c62b-4b2a-9d6a-9827b6b8c014": {"doc_hash": "e0e25de437deb299801d46ee370e28ddf1290333bad53318e51a0741f171a1ee"}, "1ef2a78e-fc88-493e-ba17-7a48c25345c2": {"doc_hash": "f72cb5f5f1a1643236296987cd324b8575cd189edeb6d6b7bdbcd6c909cdb574"}, "5312dc11-6db6-435e-80e0-3eef52a8cf86": {"doc_hash": "c5375cee416cb7561453269c1918c3d285e819cf65fee6fb72240ddf285c7e99"}, "05d87d3c-6257-4d80-8131-0bb1fa956cac": {"doc_hash": "6febaf51e386d9a14c47c853759042e75ce50cb24eff32d93dc0df6693619541"}, "54368674-c124-45c1-ae78-513abdc5834d": {"doc_hash": "66c582c8d743b4d27d88444d58e42cb64a91e6d493c08e2a75da7b50d5345d1d"}, "cc8e30a0-ccee-4b00-8a7d-0e4039f53431": {"doc_hash": "9be3ad0946e7c57486cedf1f6a58260075f0590cb884b5a77a78c16fbdd4db68"}, "1784b2ef-f5af-444f-850b-6b0a62808f1b": {"doc_hash": "f609224142a34dceba32a4c281a59447bd09f4e6ce49d13c5f8062d1de123c4e"}, "a38cb569-6ff6-42fe-a0d5-55d66c00d58b": {"doc_hash": "f09da81801213129faa0e5576069cac6ee6164dc3a36fb21f3df4c2974343a65"}, "c96c36e4-e9c0-4c54-bc01-12bbafee1fad": {"doc_hash": "62229526db23be1f9c0bcb794b2ed4b2d0e8cca41326e1f1585c9377b8d48212"}, "41f403e3-1b0a-4746-a191-5292a6dfed8f": {"doc_hash": "cec612863b9b859a768fb10b679a6085403852ac29025e4fa6e0238130d193e6"}, "48492b05-7a08-4584-976f-c686bee6528d": {"doc_hash": "05233c34e3cc323234322b22ce29262af4b1500324d5fc2bce60747f97da50b5"}, "0f4c44ea-d310-4f2b-a5fa-6b6c0208f0d9": {"doc_hash": "4f5718f267e80412e591a7f7f7a280fe47add02d93e3d678b22524032554f487"}, "cd9b266e-87b0-4e18-a5bf-80fc8f05b39d": {"doc_hash": "d042b4c227792fa22d2630d466d0856d963508353a620755b0be7312795b1cb9"}, "da5ddae2-25ad-42d4-a1c2-ef512c8ecd77": {"doc_hash": "a7d43962688ce6205bef4aab927895cb10f8292838b0860098868a79ac035429"}, "68673685-3b8a-4484-922d-f303a520f2e9": {"doc_hash": "62a8dc3a4c25ed88bcb1c37040b9d55bd75af2046b8efb237150865a7a920c6a"}, "0db188fd-bc56-4c66-a9ac-00e77a7d68c4": {"doc_hash": "079a91770e810f10a1496ce5c7b72d23f6fa6a02d3a2fa3c077c7995b7d9770a"}, "06e624e6-cfba-4085-89d7-ed3dd0f8a094": {"doc_hash": "f31189e7254d7f4eb3d35004f63841407bfc2e90f94c5a2825f76d6d1981a274"}, "e4fc6a57-b5d2-49cc-980f-ccbf3a85e416": {"doc_hash": "72d088feabc38925e50f3f884ca7bd972f53077eca29897e9b11af33fa9446fd"}, "6b59cebe-e79a-47ac-aaa6-9ab84cb47ad7": {"doc_hash": "836d0c56d934c5abc0b819aaf01fa5993881971c9836b7345873fa36318c2ebb"}, "0b514e5d-1fb4-4e1d-88a4-79095f5a374a": {"doc_hash": "eedb3674163557dbe2892d4a2967f251804cbee734e1c42712c1f93376a67074"}, "63a41810-4eb1-4d5f-87a0-684450732272": {"doc_hash": "ceb59b9a62c1758b0feb36f0e586742e306df16ad1b2a2e96cd9b26807a429e0"}, "e9221596-abb2-4324-b89d-2cd7b2a92ddb": {"doc_hash": "a59fa793701eb8847e175f0fdaddcb8f83f626a258dfc48f39ea52030f9b28ec"}, "1334826a-501d-49ae-ad22-5cc91c3b001c": {"doc_hash": "a662522899b4bf391126d39a67997d1ceba636c88358fedb3abdd91ce29748c8"}, "6666c3c9-1ffe-44c6-8618-97a0e3ff03cc": {"doc_hash": "994d4c80c40f60efd0b2ce6314195670225570883cc9e975881edce312110034"}, "91483b4b-e367-4cc8-856a-616c084c1c1f": {"doc_hash": "91fc1360249b8c02db290853114ace45288935c7ba63876741550aa5fa1e616e"}, "36c19c60-33f7-4c66-a5dc-24b9486cd994": {"doc_hash": "752d4ada0fae87797010d053b1548490ab274bd557030a0ae27a9d571052abe9"}, "a05c7b3b-9c25-4a08-a984-0e0e992d3020": {"doc_hash": "061769fb62e23f439731a996ab79392870b71a9ea382464d8d42db7385e42a28"}, "41d3822e-23c0-4df7-811c-aba915d974c5": {"doc_hash": "3c99cbcad126297b1a40019c53474eea8fb5a0be9186068ca9935ff6e6575f43"}, "987d13cb-8396-4f4a-9d55-4c05b1c7caaf": {"doc_hash": "a87ac49e074569a74a285795aac96e212e0d983010e2516b12f8a452178a5789"}, "facd09ed-58a2-4071-abf9-b049b113791e": {"doc_hash": "9fed74e8eae65ed338906e4d7ea874a8e91546c3e2e7a0cc28aa07217eadef02"}, "016b6376-1f5f-4ab8-8ef4-c2eefa4d1ae0": {"doc_hash": "79ffc350eb233b50c9e947abef2c85885e21acb25fb99c212b9952220e047d7c"}, "1a3c5e81-8b4a-4b00-bb0b-c8f9f90f2ba6": {"doc_hash": "3b809e3ff9c04e2eabcca3678cee4111939a27b0eea83e1600e8c3e12338a1ca"}, "3e57da15-12aa-433c-bc85-e4130dec9e37": {"doc_hash": "d5ac6885357cd87951e63f1defc476c81b5780d21cc502952ba70f9047418257"}, "04128029-8178-486c-bf55-1c4f14774312": {"doc_hash": "969a6e888d2c1ff03750e7db65b096279b82339c111c3b89cad2fc3a81a426d5"}, "de41b7cf-03be-4df3-a034-98c4cebce8c9": {"doc_hash": "cec7987c469bcb157497a623e3f6d48ed6ecc20c87e45527b9e0784d263cf73d"}, "d5c55470-8e6c-400e-a0d8-29abea0f7bed": {"doc_hash": "842128da0b8be3649cec3ad9c34ce293c4b3e40766d31af6857818fe8f5008d7"}, "b25bb007-bfde-4bdd-a7dc-6e8165d8d1b6": {"doc_hash": "40570f09db81e273f35f9bf095f53d5217728f96a182c5e8446fd72fe08487f5"}, "cce1528e-17b4-4e28-b72d-7130f88d3a7a": {"doc_hash": "1671fd43f657fead4047c2dcd1b8daa1cbd307abafb764222e2160a5436ff709"}, "421edbf0-1570-4214-bb65-2875904ba0da": {"doc_hash": "7e910494725514213d9e41b4688bd90594aa60ec7166512ca1b37435d5996548"}, "af643155-90ba-44d4-8b06-b1bf6aae4074": {"doc_hash": "4a8f07c55f2decd49f45ca159853ae9ef9a15cb907829dcfd64cb939ab8be739"}, "eb2f0bbd-70a1-4c67-96fb-51b0af3d6350": {"doc_hash": "30463867475ed398af3c7056740b13c189fd323acab58d684c0fece8d25e894f"}, "ce29beaa-b6ec-4162-9238-ffb22f25996e": {"doc_hash": "bd2415199776f9d6abac0c2bfec53ac57dc4c4aa5f71b2eb63f3a05afced908d"}, "85ca1c28-ca0f-4dde-9026-706aed855ed7": {"doc_hash": "e3b27189b178fbe804d5a8886abd684b83e7216ff207fdb7a88791374f890c75"}, "cdcbc628-a47c-4c06-8c80-8ac3b57b03bc": {"doc_hash": "a1419ad22548e5460e9a41a82b8d528426044e6673d12187d5b78dd03d9f5c90"}, "6be697f4-8f37-4943-9805-38c7ed406fa0": {"doc_hash": "1b3b393963bc35a3f3699eaa2d6472fca7e90fe94edb4d62be9f788887c3f2ca"}, "debe3122-279b-4d49-8bc9-fe74a488011a": {"doc_hash": "46a741c9945ff41a1c76270505dec95860d23e43aa8aec75ae53080817d3c98a"}, "ae22fc46-67d6-4891-946d-a8e52141ae5b": {"doc_hash": "2101b9df6ec9235034d0fef513b20e70b2b44b2f9001154dd582048e9207ae5e"}, "c586c734-0136-47f5-817f-24b6eea6a608": {"doc_hash": "2150e2bd962ba516f56a5f74d66526c5beb7a4ce5bee5efb5a6c1bb4086fcfcf"}, "74aa2bb2-f776-4673-82ad-ba124bf4006d": {"doc_hash": "8250115cbaed3eff4304a332523dba2e0321a6e9410d41812d9a9afba4913ca4"}, "51293218-7001-43eb-853d-5c327ae69535": {"doc_hash": "8a3ecafd3834d8376c6fba25e20059fab55c029965854945c18eab4146f5de08"}, "b47c42fb-7e14-4bbb-8735-4d454f6d8b8c": {"doc_hash": "9ed87fb3fdf1ceeaad8be0b67c610a344495ec4ee8772bb1c61da82e42f38967", "ref_doc_id": "06977792-ec7f-4178-8537-debbfbe1cb98"}, "6fa0b6ea-fb4c-4041-8dd1-64993774cc73": {"doc_hash": "828ab69bb5e5abf1526a3977d135a50424cc6194806479964aa0d43dfefd194f", "ref_doc_id": "b79799a6-a7fc-4243-8dda-d29895477ec6"}, "4e82e5a2-3c4d-4512-9a1b-6009458145b7": {"doc_hash": "d9106244d832897cf1d4191d7ce1791a901125ce7b10861208aae6a44743192d", "ref_doc_id": "7a84f05e-b538-4a28-b307-f4d240c08ee0"}, "82329d98-6b96-4ad2-b12a-c6e1b48b2b4c": {"doc_hash": "4916824dcd766ef4c127727eaa5701f39048f62ae6b1ce6a3a12fe812b6f8d05", "ref_doc_id": "24be54a7-9e50-4ad3-83ca-5c33b2cb7713"}, "25286998-9d45-4943-902c-d31b3fa1537a": {"doc_hash": "9ad99c3bed37f234b301638d2a1d4a705e3e1e2388803a79adfb8bb0c473fb42", "ref_doc_id": "91dab0c6-5231-4834-90e5-213d31e69cac"}, "5c8e33a5-f6dd-4973-9503-54dab9563719": {"doc_hash": "eeec0cd857a690c73264bffa3ed56e7ba4a7ac52cf6e4c1a7580292c184fc257", "ref_doc_id": "0a017e8d-1d95-473f-92c3-de8cc528d1fe"}, "fda762bc-3cb2-4742-909d-77d2d0e3ba97": {"doc_hash": "17192037514d3c0f7cdad060ddba3e2c005220d9beb909abb828021798198cf9", "ref_doc_id": "22bedbeb-3e9f-48ae-ad40-01720f946dbd"}, "f0370dd0-c4fb-40cf-9085-1c22d1e5c3e9": {"doc_hash": "ecca59bd0cac824dfc1754ff1d443f2b04860eba095dd7961a3e7097a6de74a6", "ref_doc_id": "18b63b00-3c34-4e5f-81fc-7cd0af69e8b7"}, "a52fc594-302f-4bd9-8599-b9c2f186b014": {"doc_hash": "08b0bd18ec1cff1e687aa1042f0ca3aedf69d9780f330e834b0c24f487be9923", "ref_doc_id": "8f9d34b7-5879-4e66-a6aa-0e477a509ce3"}, "61135a90-176b-4bc9-92dd-909d81861c07": {"doc_hash": "e8ff78513b9986bf9c8c307a04e5830ca27c1f407df27446118119a2e5b613ab", "ref_doc_id": "f2902a59-40ac-4ed9-b88a-7fb9e4a83207"}, "f14e52ff-bd4d-4815-9f7a-357885f302ee": {"doc_hash": "649fcc0a493d08cd136c7fa7f54ef43c46bd76c6239a9c45ecc13ed770b59303", "ref_doc_id": "cf1c76a9-04ec-4895-adc8-38d866494da4"}, "ef729c51-0616-403c-bd72-0fef8109454b": {"doc_hash": "76c4865981531115d8f2d5799987c67a662da0e87f02902b6b655684692be0ab", "ref_doc_id": "4babb8dc-7684-4ce9-9f14-c033c7267719"}, "c522716d-db35-4a7d-aa5f-a5fa21632cef": {"doc_hash": "d5f34f595595ee53bfe675b6f6b251290e99bb700c90f7d7aea02f1157d557bd", "ref_doc_id": "3e3fd041-76b5-494f-b4c8-6304d73d9364"}, "57ffeb4c-051e-4ac2-9c0b-51593d8cd7f0": {"doc_hash": "75cbf3c878211e1c84b04dc8110bb06b6dc45a520ad7220fa2740c5dd9bf1503", "ref_doc_id": "d274cbf0-58c4-47ab-8df3-a0726bdc21fb"}, "ee486c55-050e-4543-8bd8-06c7e747d2bb": {"doc_hash": "5884aa7eb878dc9ee8c5f156ead744ff2e2eb3252f78ee1c228d94c39a2c98f1", "ref_doc_id": "3a83a364-4584-4769-be60-9214d69c4c03"}, "0235f2e0-8c99-41a0-819b-8eb215d0899e": {"doc_hash": "78ef80c1d6ef71ad058ca7fbf503b6011a51ad4dea021e497df23ed706386674", "ref_doc_id": "da8644f9-8dbc-48c6-b714-1ca1cb9cb7ee"}, "911916e0-f9f2-438a-a468-edf03e82ab3e": {"doc_hash": "b4715c37753323ad6731dd8887a4f6f6f74d26225852101a7eda66a9aa07f358", "ref_doc_id": "83aefef5-173f-4d29-bf00-b2fae3410d49"}, "2f9f1667-345e-439c-a11f-263af1717f25": {"doc_hash": "698fd81518cb8cd9feb02c47f53097fd53bd8297d7849f1da785ec292e1dccb6", "ref_doc_id": "e8998fa1-b2ff-4910-9c88-0537910a9476"}, "f570ef9c-d1e4-4fcb-939b-856e98404f1f": {"doc_hash": "f4f8f872e7ec9aeba423dafc216419895fae587b50c54d006a2853d1b12bf4b8", "ref_doc_id": "c9951e01-4c50-42ed-8e3b-4031c7cb6cae"}, "df65f087-5ec0-4802-91a0-b521a2de1c4e": {"doc_hash": "825a6a8e4b4ffa2b283981a03aece1bec47653f49fed3da72bca13b061ab0211", "ref_doc_id": "84e9d413-aa9a-4156-9fc7-75b85e24767b"}, "efa9f17c-a0d3-4031-81bb-ecbdc2eb7802": {"doc_hash": "5290f6eb018294ab9ac47bdec9f33eb4412e135852779e018d2741414ef51940", "ref_doc_id": "01461507-6aa3-412c-a0bd-00a6f51a7120"}, "b71cc32b-425c-447b-a4ea-ae9a45c5bb53": {"doc_hash": "0fdab7ae9d3b79e9e4c8d4e75971f4c21825affd9deb0fc56aaafd70707789a6", "ref_doc_id": "f0b9caae-2563-489e-aca7-9cb25636a566"}, "eac26800-4f84-413f-a12e-2cbf232323dd": {"doc_hash": "ba4e9489b8a8434a5e4cbb20028814c7957d93eb7c88c4b300a3f8c22960961c", "ref_doc_id": "5321ee9c-06e5-4bfd-876e-5be265e49d9a"}, "48f54409-0f62-40d3-8a3f-1c229c5908a6": {"doc_hash": "51a08f8cf7ff512a2219b30939c55d688cd8a3c5d54174a3d382a8261d94c5c1", "ref_doc_id": "28c551b5-9595-4406-8b9d-44d378689ee1"}, "d9cd5ba7-6cb7-44dd-9606-11d25bd4f559": {"doc_hash": "b017e9807368583bc6b4b8de0ea8b67c21dd213ba9e14fab4a47df3678be3f70", "ref_doc_id": "5dc6b721-a7f0-4f94-97a8-2ac60d63c8cb"}, "92b2d6a1-0a99-471f-b5e1-20abec53a2c5": {"doc_hash": "77c2b48fffec072301bb29e841745ad7ce295162233c27b61ca4ad8e59fe728b", "ref_doc_id": "422a3694-fe52-4c6f-8147-5088eeec4039"}, "21ffd6dd-a03f-4f75-82fc-e2413895a282": {"doc_hash": "f1b9afeeff39b0ec84249f5b9783895b9404afe0d6af0ca75235832e8a95cab5", "ref_doc_id": "887d1c89-81b2-4be6-8cbf-2d12fd4c6faf"}, "ab1382c7-64bf-43bc-a004-8ca8fb756140": {"doc_hash": "d66d5cfefda41f43eddfb760c4cdea36bfd2d588e21aa02ceae8cddd497a86d9", "ref_doc_id": "fd681403-a52a-401b-a8fb-23c7037367fb"}, "d032a9d1-497b-43a7-8e7a-4c368da8a724": {"doc_hash": "02672ac4496dfc368ef07280097888cb8601181a419662ba9815996cc7c3c1c0", "ref_doc_id": "fffb161b-7ea8-4080-b8a9-964ff78c4c5c"}, "22c7e67e-4601-48be-9fc4-fc2a586cd33f": {"doc_hash": "421e522f77fab4832c0d1f629a2b1caf00eced308b59fb642950b97734e03fb1", "ref_doc_id": "58a45610-1500-4839-93aa-2b4d485a9969"}, "b2587d4f-2d3b-4383-9896-fc654d00259a": {"doc_hash": "c45e4f6c3dce68ec8dd67d3be4cf4805de17e136f30fc08ea01ac0057191fd54", "ref_doc_id": "6d27ec27-70a0-474c-bc2d-a8642aaa8825"}, "d7a42fb6-dbe5-49bb-adc7-63d6d2501dbf": {"doc_hash": "2933588d7d1cd45b71e3877029ff57e295edaa91cd2f59b7fa3fba865c7abc19", "ref_doc_id": "b12e0c93-229a-43aa-96cd-51a7625f48cc"}, "97757397-efbe-4079-9305-8dee972ed749": {"doc_hash": "c2e0fa6507c41c7fbbfee831e279cac5ac7064d3a275fb89c68fbb7f1e3a241d", "ref_doc_id": "26bbd5ae-66a4-4545-bedb-d2184a025e5c"}, "c1b93c0c-cb09-43c8-8040-5af9143aa912": {"doc_hash": "dbfa7474f217006cc429d06908761014f94a3d3aa8108c515c76ca9422e2bc61", "ref_doc_id": "d324b3e8-8a0e-463f-ab65-a933933dd0b8"}, "0b568a55-d168-426a-a286-acdb2e242efa": {"doc_hash": "1eca59a546f3991efd711085b047d4c951a4c2a15decb3127a494d5e43abf9ed", "ref_doc_id": "7bc96df3-6a48-4842-9d56-ed8ae877cb9f"}, "69a4bc11-2155-4bb2-903a-0f9ce5a36b9e": {"doc_hash": "49f55725e3820b1d287fdd2d82e6edd9f1159900c84f5df77fe4eb560b7ea5cc", "ref_doc_id": "85afdd1d-3363-44e8-ad23-adfc23649238"}, "f219b098-33ee-45a7-8e39-ab5f48cf0fb9": {"doc_hash": "7b7cb293305248b90b30274f5cc008ad8b48589f6d1c37c59d2593f321f8534e", "ref_doc_id": "7152d24d-d099-4f5f-95b5-c1bdee21484d"}, "18c39861-c28e-4bf2-aafe-d536d2e9c400": {"doc_hash": "f55b91edb5ace63ebcc560da9f8b23ba7ff081e428cc788e7a6055b103bb45c1", "ref_doc_id": "419d5db5-f118-43c0-9ef9-58e419936b75"}, "a4faad99-903c-4baa-bf96-51a97c9a244b": {"doc_hash": "d41cfb60279e2dcaa2bbceae4e100afb031122f4f81d5787ab4c6c1573a784ba", "ref_doc_id": "2e3ec590-ec9b-4cbd-b8f1-0489bc5c4099"}, "0e785f78-62b7-41d4-af6f-c44cdde1bd22": {"doc_hash": "24860316b9a704dd75e629e4e750c8cfdd84b23ca988420455060c0aa511a482", "ref_doc_id": "469afb5d-e4f1-4114-9e8a-552542f70df5"}, "728bdf89-80af-45b0-acb6-93750f25f219": {"doc_hash": "2e92646ccc28440abba6e87f1ab9aa8189782296c938c697f3c93402080a54e7", "ref_doc_id": "749ac45b-16fa-485d-9234-642d198d9490"}, "27fb5f81-5afe-4a0c-a181-749b8347a900": {"doc_hash": "53d76480619a4bd2e4b099397bd829a1e46e730d8eedb1a687d7da78caf72ecb", "ref_doc_id": "1c23e7c4-de16-4ec1-ba81-3ca43a95901b"}, "b1a52d68-56ac-43b1-adb3-7984f193ec94": {"doc_hash": "492188adbae5fc61d8106153045bd4085ecac1bfe449e399b8d2af2ef867119a", "ref_doc_id": "7c8fef52-d82f-4942-a036-d22ac5aba3e4"}, "f9e7ef6f-260c-4155-aa2b-6349e15ee669": {"doc_hash": "fb0fda55a8bd623f945472edad3d7f1438548ebbbf849fdf32b388440cbedacb", "ref_doc_id": "7b327916-a5eb-4df6-905c-037140f78f0b"}, "e275e857-6466-445d-8a8b-5fdaeb2ee632": {"doc_hash": "3a450bd4b54007c046dd1de2cabc15878a15112cfa8c027a47119decf071bfa0", "ref_doc_id": "1d89d363-7b4b-42b3-b185-bba007cc6439"}, "4e46cba6-8647-469b-a707-5c50c669771f": {"doc_hash": "11c8129b7d60a51b6686d8088d4d6138fd8c873af3efba8bcfb787d0413ff6cf", "ref_doc_id": "ae2dafad-92e4-4fd9-8f71-ce1925618393"}, "1d66b171-e4b0-4a9a-9672-61d259388332": {"doc_hash": "cef3261ca71a917fb6f1568f810f4c8887c694ccd30f76b94d4c57c47b0f6d89", "ref_doc_id": "0b285c89-30a7-4626-9d8d-7ddb31749b9e"}, "286a2818-4b29-41a7-bd0d-a329da830f1e": {"doc_hash": "a45bc87dc3bbfd4a71a05860b02f414c95ff5fb9f9c03bfcd3698f8ddc1f56fe", "ref_doc_id": "bd574a3f-0ee4-4e04-b3de-ce503bd07670"}, "dfb3a3cc-d36b-4b93-8b76-399821902d14": {"doc_hash": "d8f50a7b7082e36c8ecfec1cb613a4525c4501e7e9841012991e988122f05096", "ref_doc_id": "60d82583-d785-48b9-94a3-ab34b6cc81c4"}, "f65b9030-f0be-40f7-b2a7-b7aa4028a871": {"doc_hash": "d3a6135392aa7c238a08d6545579aaff1da15254f2372a000195f056f82387fd", "ref_doc_id": "8863ca32-d4a1-4677-93d3-c586428fd17e"}, "eb8e9c76-3d68-4181-94c5-7da68fa55dc1": {"doc_hash": "7132f17fcca4702076967cbf8778c89fdc89b0600703892e076b524f5370b2c2", "ref_doc_id": "7157e970-cd48-47fa-94a9-4f56899ed7c4"}, "dc2fbfd3-5b25-4023-a3cf-f5ee295b2baa": {"doc_hash": "77e432f7403824fd44f00eb7fbc71e300886a04e083bb44afd437855d7721770", "ref_doc_id": "283984ff-35df-455e-adb3-ee5c04bf52b7"}, "ed33ca78-6e09-4114-9bde-e7e3b4114217": {"doc_hash": "7106c63e8581500f4e646e66c95187c104eec1536360b13eb2a09c6c29811816", "ref_doc_id": "7b5dd838-2b6c-431d-a5c3-48a4277207d0"}, "ab92706d-56b7-4bf3-b696-ce6fb93a892c": {"doc_hash": "86fbc5a7a924509ff7dd4205c2d09f86955ff482c96d1f493c49e654ac13c4d9", "ref_doc_id": "f4ad37d9-6d05-48c9-afdf-4e1cb3327a42"}, "9f8dcb08-d3ee-4a10-9c3a-750f440a7981": {"doc_hash": "553fa0c0381df7d7e99a648a89f8c674ee5a7aacef42ce00db89a9e5d7668339", "ref_doc_id": "e562e9ce-09ad-4064-b75b-05b89d47dd64"}, "339c2513-036b-48fc-8386-07a08e0313aa": {"doc_hash": "6c464be8da81f5b533f241016f60b3df454374b26a6e72471c364db5c0d68e0f", "ref_doc_id": "047d8813-a04e-4ee2-bf1b-9ffbb49e6e78"}, "d0b63bc7-23f1-477b-bde6-43a93ace4834": {"doc_hash": "639d05232503d5414b9beb768dd01a833c8ac8f5f291c039f90bde679b032512", "ref_doc_id": "5fa4b0f4-beec-4d83-bee5-ab31ff5cd3ba"}, "773f5f17-d66e-4401-a4a1-469458b8da32": {"doc_hash": "f1a11f0df1f03529edeec43fea52f2421f73ca8706f78bc2d4b897997a6fe30e", "ref_doc_id": "799cbbb3-d4f5-4bfc-912b-f86e373d0e8d"}, "631b4409-4f86-4ee8-8287-2ebfe2480f7d": {"doc_hash": "fa3aba7944e5558effe82c2f22a769c881ee5632a1b6ac9696438e0101e46f89", "ref_doc_id": "69fdff5b-92ca-4f7b-989e-3679c5ac1cd4"}, "2050fee9-1ead-43ed-99c1-c666ea242f3f": {"doc_hash": "282a24d6a28d9ca04d25cbf518063c78bbe6eb54b44dd1b627a8a65139c2e3f5", "ref_doc_id": "82913062-5c96-4eae-8ae9-4131091e8bd1"}, "b27251e8-0db0-4907-8058-00c917776c5d": {"doc_hash": "e5f9cb23229f0393a9c512fee1b90e0064c4753b735122953c9e9a7eff36012d", "ref_doc_id": "baca83a1-6f67-4946-8a8a-2e677dec84a3"}, "48845265-fa5b-4e98-9bd1-6f48fb321d72": {"doc_hash": "5600c1438a4c1383b1d8c82af79e2b4535d9b19b8b5a75ffe9e97a458fadd267", "ref_doc_id": "e3ec7194-47fc-4c1d-8021-c9ca02afcb69"}, "e54edf57-570b-4851-ac72-78794af458c7": {"doc_hash": "b516d381e3afd93da80c8a08523e0ef12ce0b1168c90259e8306fa3c7f8036b5", "ref_doc_id": "47b20144-10ce-425f-b0e4-64d31a641578"}, "aea2e275-efe4-44cc-b045-e20f2b2554e7": {"doc_hash": "068863ca4ea6d24cb92a0d515c6ccc3e8ecd5f8327c5e74657c1519982bab1d8", "ref_doc_id": "d38acb5c-aacd-4555-93cf-4191a8d4084f"}, "ee00b89e-fc3f-4427-9dc5-6cfa23d6a872": {"doc_hash": "9ca475914ba114178097b3a5d419d3717bd7049010cbdc6a6cbafab4914a5951", "ref_doc_id": "b5dcd142-089f-4430-b5b0-f055740c3e49"}, "57e370a8-a3bd-42e2-8bd1-701c1428f21f": {"doc_hash": "721b077952cb8a7c7dbfa0c0d8756e7943e47c7d88be59326747e186a5cc1c61", "ref_doc_id": "b8201c0c-fbca-4345-a2f0-ca01c25d8712"}, "28706ee0-edbd-49a1-84e6-828bec0fa98b": {"doc_hash": "01391d8549e30ce5f82fc1570598d33be8e16b90aa4b782a2dda07bc1802ca02", "ref_doc_id": "73d0401f-fa58-4b29-a752-912f4f4c0819"}, "c921c514-851b-44ff-b18a-623bcac206d8": {"doc_hash": "fbf996bb53289a6dcfcfdbafdc2fc06ebed543b436d0f0cdc806a127fc70a66f", "ref_doc_id": "51309f06-0813-422c-b527-e515eb51de4a"}, "b9bdde2a-704f-4626-863e-1023354ceea8": {"doc_hash": "b0e44a7301fbf84216a1f9b988bd951112c0aa26d3877c3fe2670f66e8da1c43", "ref_doc_id": "4ce7dc28-591b-4b77-a2b1-d7828ea67e17"}, "ed9d7613-2c6e-4c03-aac8-525274f627b9": {"doc_hash": "4d33eac11fd68fbda5fac1d305ef698434dcd7194c06b8f75c49d7c6683a7318", "ref_doc_id": "e4a7d4a5-6c27-47f5-80d7-8a58763a7e53"}, "074508c2-44f9-476a-929e-436b0423e5e2": {"doc_hash": "95bffedeedb2138eeed269a3f3129067397422485256ad9dbf4336f96cfeb879", "ref_doc_id": "c438e8aa-7ffe-40e8-acac-b6924aed965b"}, "bbc9e626-e7e8-4315-b75c-6d99167beee7": {"doc_hash": "5ad3acbe4dfa12c20bb842a7f561faf82b9cebfaac677c1798c82abb57bed39c", "ref_doc_id": "d5b65b58-2b28-4dc6-a65c-75d00109020b"}, "1a104ef5-602a-47a3-95ba-51df1aa3efbe": {"doc_hash": "cbad8db92d3aa68cb82896164399fc5b5ac9b5f7a6de0c1517abce956af8400a", "ref_doc_id": "a8d8308c-1e72-48ab-8b80-ba98a775490c"}, "056d77ac-cfb2-42c5-8957-bf73f4ff00d3": {"doc_hash": "7ebf46c3b9bcc8db20716d1ca716ed5aefc59b55b76913b2c2e56eaa2ac94a11", "ref_doc_id": "b7501837-1409-48f3-8cc6-26a0f161fbd5"}, "e77b58fd-169a-48f3-a213-c029eb595892": {"doc_hash": "e990e8c8deabb63a7a594f1fea6edaff4824e042af7a3430a712c6648e4b30a6", "ref_doc_id": "621780ee-ccbe-49b7-8d80-88f4f5312f13"}, "ae73518d-e247-409a-b8f8-4fefe14f2ce8": {"doc_hash": "aee948eb2610c539e4a0e319fda47fe0a779423af8a09a76a8246e508f0f4baa", "ref_doc_id": "121694bb-5e98-4230-8455-a3d4d13c87e1"}, "005b73a0-4e3c-4115-a277-e836f242923e": {"doc_hash": "6752e15eae8307aabb63e41aa5f59a357720549130abbf4f4e7635c571c66fca", "ref_doc_id": "ebc6a198-26ca-41fe-a4bf-31677337140d"}, "5f0bdd9b-32b7-44c3-8734-178f14b570f4": {"doc_hash": "1e4900c67ceae0e4e75c4fb2ee09067f65b3432ce4a3d30809ce8766a6db3f9c", "ref_doc_id": "b941ae0c-1ae5-41d6-bd69-922d0d428d4d"}, "fb5634f7-e3c7-43f9-be99-8361dfdef754": {"doc_hash": "edd19a33734db8fa1e6cab57ec9a1b06406f22fcd4151aa6926dddb214d40d65", "ref_doc_id": "eb886181-3ab6-4423-b3f9-8fae57985365"}, "a5109113-2235-42dc-a2a4-ffdefcbe0662": {"doc_hash": "50cbcf8903dc69c2614105894e7f2d664a5f6295251631dbe1783344bd4e9ae8", "ref_doc_id": "f4df009f-5f91-4884-a556-46e00eb22f98"}, "bca52b8f-a0a6-43cb-b669-b1c2ce04a208": {"doc_hash": "9b198fc0be1a626d309bc19c2fb0822671c7a9091b73187cc5be6567dbd14487", "ref_doc_id": "90971de8-80ef-4744-9dd8-721b7e3e7b0a"}, "c579e13d-c757-4b59-a189-2222499ec86f": {"doc_hash": "4277cddc18631f0a67ca661436b3a7b2d2e1aee15b7c245dc8e55ec8e120fc3c", "ref_doc_id": "ca0e58a1-7d70-418c-b5c1-53a598e9af36"}, "3d1ebf39-6548-425a-bde8-89a1e76a0b44": {"doc_hash": "76930a645f71a0c3c50ed1f72366a868c31bdc72ef8120b733881c3be9a93046", "ref_doc_id": "ca0e58a1-7d70-418c-b5c1-53a598e9af36"}, "b8fa73a0-83d0-45bf-9f2a-b47c1d60b6fb": {"doc_hash": "859d478af4fff6481ca73b3220d4a5f2f44378689b4f15f061ed2b080858cc33", "ref_doc_id": "5026ae97-70ac-4dbb-bc68-3bdec795b3e0"}, "405bae98-66a7-4845-b6d0-d962f9a0bb7e": {"doc_hash": "fdba2c3cb48f7fb769ac25a9f5a17b2bacf5767ff4caca16561dc65a2043898d", "ref_doc_id": "31de72e2-e86c-4fd0-be16-f1eaf9015127"}, "af1cab62-326e-471a-ace5-da9e07e85cb2": {"doc_hash": "397bb1b77609809fdf761ae4c6fdc96681c89b597af7120c01afb282a3f811d6", "ref_doc_id": "54a76e75-fe3a-478e-9c53-c369579167a8"}, "3cc54cbf-1067-413b-8a7a-d705683909bb": {"doc_hash": "67583d484a86b5127bca5e43b3f13b4d0dd6cadb11937a131934d9b9b8f451ea", "ref_doc_id": "ae7fb894-b0ac-4228-b550-57edc710e393"}, "fab4d423-a2a6-464a-a2e8-5dea48b733e1": {"doc_hash": "e51e5b5aecaee683a2ac6fde97b9bbd9412c3cc605adddd9b8708a0f42c70f81", "ref_doc_id": "21d9b4cf-2e86-4034-9825-991968e97416"}, "3dbf6370-8863-4a91-b88c-1349d4370a77": {"doc_hash": "07a352083461022991fd6a100b93e296f521080ccee5d644fd0e39353f44e86c", "ref_doc_id": "f7f02eb7-8c77-4f41-9ff4-65a7a6f296e9"}, "b3a64693-f1f0-4fc1-8cff-853e6a7d422a": {"doc_hash": "c08715d36fec4f29f4e2095ca1cea3295ee4807211f87b4afe40825f9e6c6b14", "ref_doc_id": "c14983c3-d499-436f-bc9c-fe3f9b8d436e"}, "78966c2b-c82e-4354-a3b6-b28123a5607b": {"doc_hash": "cb8b39e45873f8aa1936ccfcf893e13303eadb7baebe081dc510ada752042362", "ref_doc_id": "94b4de45-2e13-415c-b988-042201857c79"}, "d01f5efb-3102-405a-86bc-d6859bed043c": {"doc_hash": "e1fafd2c20d6c4a73f2ec75b3e9f49e20f678c4590a4dfb14b486ee653885a38", "ref_doc_id": "c5e503a8-478b-4548-b8d8-746efa3bf199"}, "69e0aa0d-5e63-4d9d-84ed-f4614e620b90": {"doc_hash": "66d0b74ade615944f0feb9a04c581ecdfec07efa5f56ccf2ca41a221a3912d69", "ref_doc_id": "560e6cd7-e001-4530-a256-80bd1bd2bc87"}, "055c622e-cf8a-4a50-b5fe-62c96eae1c57": {"doc_hash": "eafb1aca031d2adb512bdac4044180471e0a920150c19670e0934140038ab928", "ref_doc_id": "202194d6-6c38-498b-8d35-fd14ffcc47e0"}, "d54418da-1242-4fc7-8d3f-c80980d26298": {"doc_hash": "c2932a48f392bce65b766a05062f736b5d099850ae3291020a03e91c0f41f996", "ref_doc_id": "5a803291-8524-4855-8d1d-6eeb52b1c1e7"}, "7f9a5e0b-5f3a-413e-a20e-a8d097668d4f": {"doc_hash": "356135630e0896d2237abe495535ababdaf320ba9f5cb5e1fbb278aea93eaa91", "ref_doc_id": "ac67467e-f49e-4a9b-ba45-0ebc78644ec7"}, "de0b63e0-5a79-4314-8f4f-250c7d468b25": {"doc_hash": "bc7a98ea25723982f0d3e82afb3a79648e8fe57a72355b431f43bfdfe4a03e14", "ref_doc_id": "922dcff3-d45f-46a9-8e18-c102a80c2317"}, "aa2f339c-f6f6-42c4-9ae8-9a8c10a9847d": {"doc_hash": "804045eab2af5ccf7419953f8220f1157ee6b1df8210c60805c43f8da8014238", "ref_doc_id": "87ed4747-1073-4fbc-8c80-91b3f6d54785"}, "b6954c32-8a27-4123-b5eb-bb48bb352c6a": {"doc_hash": "2330039e2b2a050d8c18988f33ac21d86a9eb17befff892834fb9aaf9d77c780", "ref_doc_id": "7d7d1913-f4b1-4309-93a3-d76a5002942e"}, "4ab0fe13-eb80-420d-9669-223c78a0d111": {"doc_hash": "3386d34b141456353ae2b5e1c21dcd0c7052122a67917e1ac8685ea99d192d89", "ref_doc_id": "57d53c61-df4b-4a59-9904-55cfe4f5a355"}, "4a11928e-7b6e-4f9d-8023-d0e8182a2ba1": {"doc_hash": "0f8e3f00f96e6c9a762751b701ba69fc0d518861804e378d55afe987ae09e98d", "ref_doc_id": "523d0cac-9b53-4c72-81bb-6536d99707a1"}, "faefa5eb-a1de-480c-a0f1-915a015ae2f6": {"doc_hash": "5f2ffd616bf1b6ebb132f5819d2e9d33e77cbd038d111adf30f680abdad0a99b", "ref_doc_id": "a64535dd-4a97-4860-b5f0-708358508c1d"}, "b39f3ad7-d703-43f3-a70e-3246f745796a": {"doc_hash": "9a806a09680ac216b319d3c95e031206e7fd4f4007ae3536c79f5b223181b565", "ref_doc_id": "f5094cab-bb02-4365-9145-ad1ae902ae4b"}, "73b9900e-3a87-4ec1-b8eb-7cd4bbbd3f68": {"doc_hash": "1e8da082f44db37dadb1249815c9c4a9bbc39d3461f3f0093729b5279b659d7e", "ref_doc_id": "46719a54-a341-4b3f-9b3d-51c93158d62f"}, "7cebd59e-b0e0-4414-920f-febf4ccf025f": {"doc_hash": "b2f91dadfaea8e21799586d15d42571d290c14d6eb424baff8d4bec7c1caf3b2", "ref_doc_id": "e4c4343f-9f0e-4fc6-8cde-fc09d8d4e4ae"}, "2a4a365c-ed8e-4f7c-b389-d529aa2cd99f": {"doc_hash": "bbb70ffc0a8acda2337ebc8d39cac9d2606c426ddd04605f6e8702d083a14386", "ref_doc_id": "a417b631-a8ac-4471-bbba-6611d21409bd"}, "6770f799-fba6-40e1-a721-94f441a2d7e9": {"doc_hash": "86e6b2cbdf95e34e2f5fe58aaf37334a11e6a7d6e1e3745db48729b31bc02a4f", "ref_doc_id": "676e96c3-9e3e-475b-97bf-ed28b9cf5c3b"}, "0ed207eb-d1c8-43da-8937-b6338ac1282d": {"doc_hash": "a71c8ebc3e758a62792f4910cb623e60decd2a04cbbead4b0b1cea71e8388501", "ref_doc_id": "24dfb47b-3694-44cf-8f36-6c25d0b70135"}, "9a02158d-8d11-46de-a952-f8404936da61": {"doc_hash": "a9d6b364152dfa20053ec9c5ef9cb5b58d93f9b2bce4cda3f6e1d73ab59dbd73", "ref_doc_id": "6b76a792-4f4c-406b-bc68-d89d1bfe1222"}, "e7504596-30f7-4fb3-a61b-988df99ef1cd": {"doc_hash": "503b699e4019cd07d7126df24c860a97a285b0d2ad689f9901e4ce19a2f09fc8", "ref_doc_id": "1fe207c7-1ea5-4d16-b5af-e647cdaccf68"}, "7b701d84-6166-4fda-ace9-5701c32fc881": {"doc_hash": "6fa5a608ec2791bf678fe52010c534c5a451be8f679d88a285bda48519d796dd", "ref_doc_id": "a238ed18-5ddc-45b5-826b-c50fcf6cc9d0"}, "af3140b4-a51b-4618-9d79-e0b7d1a87638": {"doc_hash": "b6b8a599259d49c9866de5edec8fe275513e63d198317c5a216c26f1c2d8085e", "ref_doc_id": "6d1c5909-e638-43b5-b702-618cec4a8970"}, "60d7476b-cf48-473e-bac5-fb1fea7e7df8": {"doc_hash": "ac8e7f21fd15d520b9bfad3db5c91e569eff84589e11404e7810bb814659ca79", "ref_doc_id": "3728fd48-a72e-4028-a8a2-253e3bc30ecc"}, "462ee74d-d77f-49f7-b2f8-bac1fee4d772": {"doc_hash": "265788b49af79bb3b6d3412815d03d2d3438cfad479ac72b8b0efa7b493d9bf6", "ref_doc_id": "73d15744-b514-442d-82d0-3b54e9c138e9"}, "146fa74c-c442-4f8b-999b-a8f76572f71b": {"doc_hash": "28c6bf7cde2ceba46c130e019026111aef2ebc4861abbe06d9ed0d1c0f7cb448", "ref_doc_id": "a0c86139-b721-4f87-a98e-47b0cf7665c9"}, "85979e22-39ac-48da-bdae-bf38a0ca84a4": {"doc_hash": "8f43f4d147e8ce00dcbc11bd2f81484c3652532b730a34ddb546e9260d799cd4", "ref_doc_id": "c85a4f75-6d24-4182-ae5d-7a920fe6bc89"}, "7a19de45-4b7b-44bb-a85c-f68256c0acc2": {"doc_hash": "629faec62d6ef7e9c12d26b0dc93d6e4ae546268910e65387c4572dec703bacf", "ref_doc_id": "72d06ab8-952b-4494-8c0e-34a0b0e0144f"}, "19e58b01-1807-4bb2-ac2c-b958f1168d01": {"doc_hash": "c4556fb48b4261884fa72a4226cd13188c5332ee52e82e7cf208f68a5f4b498d", "ref_doc_id": "9d4b0ca0-2d14-4011-8bb1-b5a0a51ae27d"}, "6f7b8222-5087-4e3f-b714-4a234b5fd3fd": {"doc_hash": "cff362a95c086c52b045b7e6f828ee3b1511a457d895caf7bd37a125d1b84efd", "ref_doc_id": "d68bc248-2499-42e1-b497-dda25de5dd68"}, "8e765eca-f59b-452f-b5d6-d8c02030db55": {"doc_hash": "907b985bab35d4fb61b4e23d0b8a584d10c15a180b6e8d0d998a3e3963053771", "ref_doc_id": "29e37942-eaec-4407-b57d-5d9403c4ee37"}, "34c9b810-0bab-4838-9ab1-6607923aed92": {"doc_hash": "65ce92ab18b277083207b5d8472f196123e0717c9424da89cb0afaa0b0ca8237", "ref_doc_id": "86098e8f-0111-43de-92f7-3f4a67e24525"}, "abf3ccfd-6397-41cd-9725-cafc50215058": {"doc_hash": "968943684f073c6e9a22407a981d2edc924232ec2c4af3c8ef9c7f0adae6f21d", "ref_doc_id": "a5b39789-ed3e-441b-875d-b88261af2ba5"}, "f8b78cb2-9c46-42ca-b402-1699a802f609": {"doc_hash": "79f83b1fb903d4270c7712458d8105c03d10cc0c94d10bbce7c6ea24376cb7fe", "ref_doc_id": "94c53122-0a62-418b-a234-a09c1083d0b0"}, "8309e946-9aa8-4e54-99e5-48665be09c35": {"doc_hash": "7956655ba8d77c2576b2f92fa0f418b1b05887517910fc2b4e84cc86d6e4b9e5", "ref_doc_id": "8f7ada60-85e8-4c29-9311-f38624912487"}, "c37af261-29ad-4ee4-9b97-6ce2fb507e34": {"doc_hash": "33d8453ffbc19e2400aa2fdc75aabe1c50f64dce7bd7ecd0d2162ccae389fae5", "ref_doc_id": "0d1379ec-a3a7-45dc-9fcd-593f556e412d"}, "b235286f-b165-47f7-8f71-74cdc7b6ade3": {"doc_hash": "5f43d29f236dcbd6d961f7082176f904bff9a0014cfcf31c45e5b16c6334b6eb", "ref_doc_id": "51d02de8-dc42-44ef-9ffb-d354f030dd46"}, "9e844280-66b2-4a4a-903f-0439390e372d": {"doc_hash": "066621cf5dff93b5fe777374ed125f1dee3d8668d897110e6d1b5e98fe3beeb8", "ref_doc_id": "65d88e18-bbfb-4f81-843d-30469e264cf7"}, "8a240d04-5e7c-4339-ba30-988f23419277": {"doc_hash": "7d2ddfbb1719b76ef897d6f41b6330a0b79f4aa4a3b146432ead568d965b3118", "ref_doc_id": "61999da8-d939-4d3b-9847-0ecb272a1495"}, "0474504a-862a-42c1-b115-f276e78e0b6f": {"doc_hash": "07887d85ea5619791375038f73480e4048a274801ee666e758217566b0109562", "ref_doc_id": "77e3bdc9-26d6-4577-bc90-796919c7ac00"}, "6166d6fd-973c-43bd-9aff-7834d8686059": {"doc_hash": "8d1dbc9dad8ee94f4bdb13bc1860757949fefc22c003d62d0a641dbcb76ea15d", "ref_doc_id": "9e978e5a-a9e7-4bdf-8590-02f74352172e"}, "d94bf21a-8365-4ed4-9b98-18b7c695607b": {"doc_hash": "ed80402c29247c8da4f97473d6ea237ef0b37739d8b06bd40f821a6cf24a812c", "ref_doc_id": "9a999f13-7735-4fba-8302-728cfb93364c"}, "73bb49b5-b406-475e-880f-0036f9acdbe0": {"doc_hash": "3276b23ab1e570c6071e5d6fba946efdcc375cb30b714e8b7796d05ba2da828f", "ref_doc_id": "9c6a2a30-1ca3-4ff3-a3ac-d7ef75e47e27"}, "ca43dbcb-d727-4165-8edb-05c0d1aa2293": {"doc_hash": "182cca718cb36b79b36b3f0bf49599e95bc9c96b4b215430cf1a0c9e32492890", "ref_doc_id": "fc499ba4-9259-4e59-b844-96d8b1eeee69"}, "574cc3f9-4d9d-456e-9760-27e9e2339053": {"doc_hash": "357cd88d8eb7d34c9db90520abc89c843207e0f730176b28d14b5df115128251", "ref_doc_id": "10221894-99bd-48a8-af53-e01f8ff35f89"}, "5e1b4a63-8d44-4848-8253-685bfd529f9f": {"doc_hash": "ff647f9288d552c864b4feead26b6d820c964ee7f37f041a76acf5d6ed75dc08", "ref_doc_id": "b01b5cec-e13c-4dbe-8330-027585a0a953"}, "ab0d0a99-0c00-47eb-aebc-9e43375603a3": {"doc_hash": "4d9e8dbb299dfe55033a9d939d38762681d8c32d663c4ae3120f324fcaa8815b", "ref_doc_id": "fb7440ec-0750-400c-a94a-3b0445ede4bc"}, "4b3d7d85-e78c-43f1-b025-06d4079ba738": {"doc_hash": "e0443dbbcbb665fafd86fc579aebe334afceeea88d5d60ed2e555634ec4c8517", "ref_doc_id": "1956cde6-bf60-44b2-b020-77e3b2133e3d"}, "b2bd74a2-8c59-4bbf-a45a-1ab290836855": {"doc_hash": "ce9664af419804b402170a9d4825e62fbff17aba6d1302bc40eb5e6a95c21620", "ref_doc_id": "c367460d-d277-4a9d-828a-e78fc4212b1e"}, "15d1e7d8-b7e1-4d8f-841e-7f3bceea7dcb": {"doc_hash": "d37dfc4b0b77dbbf05aa50efa058595296336829c8d02e7d2bf725dbc41782bd", "ref_doc_id": "220b9d46-cadf-4242-8699-a214cd9d0e9c"}, "59231042-98f2-4000-baf8-49adb607a7cf": {"doc_hash": "b87d3a32b3222696c1f1713f5a9c7801f441a632b63f1b34552781af5abbfecf", "ref_doc_id": "c167640f-f167-40e9-a724-59758cc1d39b"}, "69e22506-9f4c-480c-8742-1c3ec5ba94da": {"doc_hash": "1d65d8075136be7c15f0693474df7a2203536b83d5c455c6e4d1f9d89567a2e1", "ref_doc_id": "5e464e1d-c62b-4b2a-9d6a-9827b6b8c014"}, "078c98c1-e9b3-4669-97a1-63dea5d8699a": {"doc_hash": "f86308ebf4324ebb3ce4c2d54afa85760af3a474aa66f636cbb3b94127a9c5af", "ref_doc_id": "1ef2a78e-fc88-493e-ba17-7a48c25345c2"}, "d6d3b4c6-f165-4c30-b486-c49b732a49b2": {"doc_hash": "2750f846a0bf9c1d529f378fe57e4e6a24de4172ddbd1374f94c1b857b9a8417", "ref_doc_id": "5312dc11-6db6-435e-80e0-3eef52a8cf86"}, "07b7eb2d-a6d1-4729-8982-d199fa693b7e": {"doc_hash": "c62e1187a1d5164f4cda8ebe5ab60856aed6f1f1f78f336b570eae9858f4e6c3", "ref_doc_id": "05d87d3c-6257-4d80-8131-0bb1fa956cac"}, "f7d77b86-36eb-4d2a-adcb-a07e3c36a49c": {"doc_hash": "188db19b7f607c43456b30b48e898be0f27b6bad52c0d117fc60afb06c507805", "ref_doc_id": "54368674-c124-45c1-ae78-513abdc5834d"}, "be67a91c-3143-40ed-83dd-f58c88fb5e6c": {"doc_hash": "d71fb0321bc0737218753f011259d614ae1870a37eb9ad5e49f4add8bbc6a93a", "ref_doc_id": "cc8e30a0-ccee-4b00-8a7d-0e4039f53431"}, "e4708e79-deca-4fb3-96ae-7c50de789d4e": {"doc_hash": "f630b9dbf6198c04fcd44864c5ea6458880e7dd901ea59946dd5cd9354bea346", "ref_doc_id": "1784b2ef-f5af-444f-850b-6b0a62808f1b"}, "dd2b6b95-290b-4a25-8897-0785a80bad6d": {"doc_hash": "29a8b2d2e8bb5b89ea665e4c2a9326e029dc843462b7450ff872adfc4daf776e", "ref_doc_id": "a38cb569-6ff6-42fe-a0d5-55d66c00d58b"}, "a6dd2d4e-33fe-4791-8e27-80c686aa4a4a": {"doc_hash": "2bb826168cdfdb0a5e3c81b3734cf1ee89e1599fa46c69360f4f1f33c3d56d5a", "ref_doc_id": "c96c36e4-e9c0-4c54-bc01-12bbafee1fad"}, "22ba2c04-98b0-46ce-86ad-e936679a8e59": {"doc_hash": "e1259c8233d38c55e83cc374530acd29d4c365755c06b194bfb60a73e5f070bb", "ref_doc_id": "41f403e3-1b0a-4746-a191-5292a6dfed8f"}, "bc247849-23a3-40dc-8458-7108a581e435": {"doc_hash": "53c2e99923ae0bdf4c9111eef7e81367b7068f8dcde143baef425c0095d8ad6f", "ref_doc_id": "48492b05-7a08-4584-976f-c686bee6528d"}, "baa02a67-d979-4e01-b652-23183b476fb6": {"doc_hash": "c7a77eb0da970c79eb4dae94990ea07c429d2c231f51c424af37a54d7b36ec48", "ref_doc_id": "0f4c44ea-d310-4f2b-a5fa-6b6c0208f0d9"}, "c6da1bf5-0efc-46d2-ae00-8b143d1651ca": {"doc_hash": "943436d28260613b66733b121fc500f5c720dd8a9bedb73424fddf4bb1749cb5", "ref_doc_id": "cd9b266e-87b0-4e18-a5bf-80fc8f05b39d"}, "48f65610-0156-4761-a2aa-3dc64f3c46d3": {"doc_hash": "47c6b07837cab05fb27afb6388ab9124b204b8533c75d6791aa66881381c8641", "ref_doc_id": "da5ddae2-25ad-42d4-a1c2-ef512c8ecd77"}, "b9b97c60-459f-40a9-8d26-4c150c7bbaab": {"doc_hash": "11660090045cc5647eebb1f402c99d12e5478a13b18ee34126876f99359effaf", "ref_doc_id": "68673685-3b8a-4484-922d-f303a520f2e9"}, "564005b6-103d-4404-ab38-fe9b8f82d87d": {"doc_hash": "e77ad2a48c5c65fd9b02857b5304c886483d9e2786aca0876d86638ef5deb1af", "ref_doc_id": "0db188fd-bc56-4c66-a9ac-00e77a7d68c4"}, "9ba1620b-d937-4ebb-92a4-5d8c32584967": {"doc_hash": "1951929deee7dae8697b0682cebb82dd8567a82cdbe2fe80665922e0aeef43fa", "ref_doc_id": "06e624e6-cfba-4085-89d7-ed3dd0f8a094"}, "11fe8893-9339-42a8-af95-74d218a3f3fc": {"doc_hash": "b029a6d1a0acfe546b60027d33e64656bc19b1af8b3674308110d09f3257142b", "ref_doc_id": "e4fc6a57-b5d2-49cc-980f-ccbf3a85e416"}, "7ab559cd-2ce0-42b6-a234-592003f0d06d": {"doc_hash": "82deb5cf169f064ef9871f6248c94be835fdc68bc729e53813dc2203d3afce7e", "ref_doc_id": "6b59cebe-e79a-47ac-aaa6-9ab84cb47ad7"}, "9ed57344-d45d-4833-a114-7db4662e2d9a": {"doc_hash": "bb3eae25c96879d6a3c7ccad0ad7d18a7968aa8635bb6cdf49d01d1372357768", "ref_doc_id": "0b514e5d-1fb4-4e1d-88a4-79095f5a374a"}, "42510425-a514-41d6-a2e2-7bd79f85331d": {"doc_hash": "dfeee42ddb52157893e267c026e0f76b19758edbb08557a9c48be8d56a7fe163", "ref_doc_id": "63a41810-4eb1-4d5f-87a0-684450732272"}, "5d216ea9-1fbc-47df-9996-88c7037422a9": {"doc_hash": "86d33c32b90bb0699bd293eddb5de68866fb3f8531f7089b8b558bd3130f94ef", "ref_doc_id": "e9221596-abb2-4324-b89d-2cd7b2a92ddb"}, "0fc9d80d-d4be-436f-9a7c-56762e1f1ed5": {"doc_hash": "7fd68cd56e02fb322fa29ca8524e2812ea3a9f0227318964eb379063535afdd2", "ref_doc_id": "1334826a-501d-49ae-ad22-5cc91c3b001c"}, "4eec010c-f71c-44ee-9b89-e1559085fbc3": {"doc_hash": "61235476a59a11a2eac6d804289d92777a31b3d06b9b98b3004a4b4b2db5e0d7", "ref_doc_id": "6666c3c9-1ffe-44c6-8618-97a0e3ff03cc"}, "4df803f0-5d8e-472e-a6a6-8238ede8ea85": {"doc_hash": "318387e8f8df6a06d5cb1870f1f1977e06e4d8ab9880fdb88f9c27e73395b2c6", "ref_doc_id": "91483b4b-e367-4cc8-856a-616c084c1c1f"}, "5b92be35-9496-458e-9bd8-0ccde83260a8": {"doc_hash": "6d602eebadba7f53556bb1093563db56bfe793a21656cb12e942e8bcf329f459", "ref_doc_id": "36c19c60-33f7-4c66-a5dc-24b9486cd994"}, "8c152b3a-30ef-49ef-940f-47888dccc026": {"doc_hash": "c3870f4f2513d764a086c0ba54dc2ed0685ca6c0f589ef5c0ee9ac5664f10f7e", "ref_doc_id": "a05c7b3b-9c25-4a08-a984-0e0e992d3020"}, "79ec7d93-b6a2-4731-9d6b-8d0d9ee373ef": {"doc_hash": "fd99f9e9ddfac398868e1a32f45dbe02feb11f75619fee05e315eb074f730be6", "ref_doc_id": "41d3822e-23c0-4df7-811c-aba915d974c5"}, "d61dd1a0-ea12-4ff5-8a92-cd3b972bda35": {"doc_hash": "2b4fabdd75cf3b1073a29d1eb6392e54151f921b704a72b59967e665677e10ad", "ref_doc_id": "987d13cb-8396-4f4a-9d55-4c05b1c7caaf"}, "7cb28a36-aa16-4845-a2f7-acde883347d0": {"doc_hash": "c8e139a6d0387fd9c6b1bf516274fa627770dfd8a6f8d0b7141237eeb4eb20ce", "ref_doc_id": "facd09ed-58a2-4071-abf9-b049b113791e"}, "db42729f-7629-4a10-8d52-15f089535e48": {"doc_hash": "f082e26cb8c69acc3ee231b6011623c45bc6e7cd5ae0c784f513fa00c5997fa0", "ref_doc_id": "016b6376-1f5f-4ab8-8ef4-c2eefa4d1ae0"}, "e8154537-0254-40dd-92d9-5099d6976671": {"doc_hash": "9f0bd050d50e8a4d434028f70a3defa090f1d15a75cb0efdfd357943211e8fba", "ref_doc_id": "1a3c5e81-8b4a-4b00-bb0b-c8f9f90f2ba6"}, "869cd7a9-5988-4ae2-895d-39caf4e41509": {"doc_hash": "2c9c9ca4e3e4869527a1258981b8c77ef1c606eee8e1f81f3035af36ac93c6a3", "ref_doc_id": "3e57da15-12aa-433c-bc85-e4130dec9e37"}, "3a1ff702-2029-419c-a930-87b4815ba419": {"doc_hash": "7b7fd50f33eae7f29647beb4b681a8587b4f49b0f9f221786401749ebd4d71e5", "ref_doc_id": "04128029-8178-486c-bf55-1c4f14774312"}, "a38e4a1f-53d3-4651-8b83-39377444d5e0": {"doc_hash": "98b6bd3ef74529f1324e6470154ec75ac94bea092102dc9ab927b21b6ca7c0d3", "ref_doc_id": "de41b7cf-03be-4df3-a034-98c4cebce8c9"}, "ac0dbd84-b3ae-4cfc-97ea-1eaf2209ed8a": {"doc_hash": "a2405c73abb485e2892b88cf6dda33730395168fc30998a183bd6b0549c66011", "ref_doc_id": "d5c55470-8e6c-400e-a0d8-29abea0f7bed"}, "c2f7585b-1ee0-467b-8ca7-1700d3d18ba3": {"doc_hash": "149885da0b2f6b69b44ea8ef15ccc2b902771fd443d2818a1eb5cda2030e3b59", "ref_doc_id": "b25bb007-bfde-4bdd-a7dc-6e8165d8d1b6"}, "de888354-1e7a-4768-8523-cc2280fb3350": {"doc_hash": "636c2d64fbf368ed8dbc5e5520683c8708e9f5d780891f3e0d7fbb4328de98d3", "ref_doc_id": "cce1528e-17b4-4e28-b72d-7130f88d3a7a"}, "86167735-076b-4f8e-bc27-b232d0d75f80": {"doc_hash": "ee09eae8fc52370b2dd181f49b7db8e3d151a627eb5b38529a695b0b01c05144", "ref_doc_id": "421edbf0-1570-4214-bb65-2875904ba0da"}, "66d6b380-1448-4b87-92bd-14ae0523a7f0": {"doc_hash": "dd931af1afdd6ecc7a7a4ca0bbf2e05e4621f1fc6aaa0c9accce5bc6da28ffd3", "ref_doc_id": "af643155-90ba-44d4-8b06-b1bf6aae4074"}, "1f081d2c-4908-4a18-99a6-5917efacd2f0": {"doc_hash": "d26b9f9b146d3003c175b56ada25d370e0b2e6c09949af4f5e321e1df54ca001", "ref_doc_id": "af643155-90ba-44d4-8b06-b1bf6aae4074"}, "bb9416dd-7d08-4204-8389-cd565416ef14": {"doc_hash": "2055cbefbf0508746444d0de0a6c4a4004b370ca4518865e59c5bfeb487ad892", "ref_doc_id": "af643155-90ba-44d4-8b06-b1bf6aae4074"}, "61db3850-dcca-4919-821d-e180dc786fe8": {"doc_hash": "8e87d7b9c92d29e53c0a4a22408287ecb465aeb19408fc326baa27727b445eec", "ref_doc_id": "eb2f0bbd-70a1-4c67-96fb-51b0af3d6350"}, "52fb2c29-1f25-49f5-90f3-60d856cfba72": {"doc_hash": "eac6d4a72de02b89999207227f2057d25fb649f9789f7a98e9188c9904ee9d02", "ref_doc_id": "ce29beaa-b6ec-4162-9238-ffb22f25996e"}, "7d60baaa-0588-4efe-9c0b-f88b890c2c0b": {"doc_hash": "2f7b170ed67f7beed2a4ccab85ecd16054a346cded16d381419facab4971a973", "ref_doc_id": "85ca1c28-ca0f-4dde-9026-706aed855ed7"}, "fb65fa84-8507-46d1-8d72-5c5e4abe2679": {"doc_hash": "b7a1779480a5cb7d8db8990a8dda6ffe203711eca37723291374db88a69e278e", "ref_doc_id": "cdcbc628-a47c-4c06-8c80-8ac3b57b03bc"}, "ca5814a9-2376-40a9-a6cd-9a81df95a887": {"doc_hash": "807b687375cd7a7bfc5e4447ac7dc67580fa356c3c89503623cf7c37d8dca7b4", "ref_doc_id": "6be697f4-8f37-4943-9805-38c7ed406fa0"}, "213bb680-4034-4552-b23c-1cdd26318f07": {"doc_hash": "5161641f3da32d59c096b1a7ca72465477f3860685646b53ec34446c03e63a45", "ref_doc_id": "debe3122-279b-4d49-8bc9-fe74a488011a"}, "df93a23f-0f96-430c-b36d-795bc0018f5c": {"doc_hash": "ec4e3040ed99dd61f79714476b9de8ab9e532eae80bcf3c76898dab435dfb828", "ref_doc_id": "ae22fc46-67d6-4891-946d-a8e52141ae5b"}, "6ca9b9e8-e639-4451-a85c-34d4c07b43fb": {"doc_hash": "49b86ec57c5e08249f827a8fa1d1a4b4cc23471e0b6419cd4f32ae4dda4745ea", "ref_doc_id": "c586c734-0136-47f5-817f-24b6eea6a608"}, "52a74f2d-e2b8-49b2-9f12-a99ee69d148d": {"doc_hash": "663020003c270ef8ceb9a123971748ae381eca43ee042eafc5e653d6f83e4242", "ref_doc_id": "74aa2bb2-f776-4673-82ad-ba124bf4006d"}, "1f1563ae-ffae-485e-bd01-ff53207a0456": {"doc_hash": "7b0ffb653c86ecbabd82a38a408e5db0fd65708e555bfbf01c375d5f12cba666", "ref_doc_id": "51293218-7001-43eb-853d-5c327ae69535"}}, "docstore/data": {"b47c42fb-7e14-4bbb-8735-4d454f6d8b8c": {"__data__": {"id_": "b47c42fb-7e14-4bbb-8735-4d454f6d8b8c", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06977792-ec7f-4178-8537-debbfbe1cb98", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "719b8062a3cc781324185a8f5f83a71e207516c4cc0171904e8ecd900645d23f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Clients\n\r\nA list of applications that support MCP integrations\r\n\r\nThis page provides an overview of applications that support the Model Context Protocol (MCP). Each client may support different MCP features, allowing for varying levels of integration with MCP servers.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 270, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6fa0b6ea-fb4c-4041-8dd1-64993774cc73": {"__data__": {"id_": "6fa0b6ea-fb4c-4041-8dd1-64993774cc73", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b79799a6-a7fc-4243-8dda-d29895477ec6", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "9076725a36340071b30e7dd043c8bf8b1a951c9b3db4098c2491a6f46f35d7f4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Feature support matrix\n\r\n| Client                       | [Resources] | [Prompts] | [Tools] | [Sampling] | Roots | Notes                                            |\r\n| ---------------------------- | ----------- | --------- | ------- | ---------- | ----- | ------------------------------------------------ |\r\n| [Claude Desktop App][Claude] | \u2705           | \u2705         | \u2705       | \u274c          | \u274c     | Full support for all MCP features                |\r\n| [Zed][Zed]                   | \u274c           | \u2705         | \u274c       | \u274c          | \u274c     | Prompts appear as slash commands                 |\r\n| [Sourcegraph Cody][Cody]     | \u2705           | \u274c         | \u274c       | \u274c          | \u274c     | Supports resources through OpenCTX               |\r\n| [Firebase Genkit][Genkit]    | \u26a0\ufe0f          | \u2705         | \u2705       | \u274c          | \u274c     | Supports resource list and lookup through tools. |\r\n\r\n[Claude]: https://claude.ai/download\r\n\r\n[Zed]: https://zed.dev\r\n\r\n[Cody]: https://sourcegraph.com/cody\r\n\r\n[Genkit]: https://github.com/firebase/genkit\r\n\r\n[Resources]: https://modelcontextprotocol.io/docs/concepts/resources\r\n\r\n[Prompts]: https://modelcontextprotocol.io/docs/concepts/prompts\r\n\r\n[Tools]: https://modelcontextprotocol.io/docs/concepts/tools\r\n\r\n[Sampling]: https://modelcontextprotocol.io/docs/concepts/sampling", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1305, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4e82e5a2-3c4d-4512-9a1b-6009458145b7": {"__data__": {"id_": "4e82e5a2-3c4d-4512-9a1b-6009458145b7", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7a84f05e-b538-4a28-b307-f4d240c08ee0", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "52090d674ce1ec8eb919a68ec2788533540d41ae589f3734533ad539aa2a4bd5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Client details", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 16, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82329d98-6b96-4ad2-b12a-c6e1b48b2b4c": {"__data__": {"id_": "82329d98-6b96-4ad2-b12a-c6e1b48b2b4c", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "24be54a7-9e50-4ad3-83ca-5c33b2cb7713", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a23806dd105d2a6c5634152f94cf11fb68f3198dccb14a626147494ff9b8ee15", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Claude Desktop App\n\r\nThe Claude desktop application provides comprehensive support for MCP, enabling deep integration with local tools and data sources.\r\n\r\n**Key features:**\r\n\r\n*   Full support for resources, allowing attachment of local files and data\r\n*   Support for prompt templates\r\n*   Tool integration for executing commands and scripts\r\n*   Local server connections for enhanced privacy and security\r\n\r\n> \u24d8 Note: The Claude.ai web application does not currently support MCP. MCP features are only available in the desktop application.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 544, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "25286998-9d45-4943-902c-d31b3fa1537a": {"__data__": {"id_": "25286998-9d45-4943-902c-d31b3fa1537a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91dab0c6-5231-4834-90e5-213d31e69cac", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "0dbf9f909911015faa7964e6a232ce8b62830f3184c03c900363ebadcd4acf2d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Zed\n\r\nZed is a high-performance code editor with built-in MCP support, focusing on prompt templates and tool integration.\r\n\r\n**Key features:**\r\n\r\n*   Prompt templates surface as slash commands in the editor\r\n*   Tool integration for enhanced coding workflows\r\n*   Tight integration with editor features and workspace context\r\n*   Does not support MCP resources", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 362, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5c8e33a5-f6dd-4973-9503-54dab9563719": {"__data__": {"id_": "5c8e33a5-f6dd-4973-9503-54dab9563719", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a017e8d-1d95-473f-92c3-de8cc528d1fe", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "27482bd92d9af1d8be6597d049eb47e436cce39028c905323ca695d10f59f58c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sourcegraph Cody\n\r\nCody is Sourcegraph's AI coding assistant, which implements MCP through OpenCTX.\r\n\r\n**Key features:**\r\n\r\n*   Support for MCP resources\r\n*   Integration with Sourcegraph's code intelligence\r\n*   Uses OpenCTX as an abstraction layer\r\n*   Future support planned for additional MCP features", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 307, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fda762bc-3cb2-4742-909d-77d2d0e3ba97": {"__data__": {"id_": "fda762bc-3cb2-4742-909d-77d2d0e3ba97", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22bedbeb-3e9f-48ae-ad40-01720f946dbd", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "2e4b185b0215fa39243a46fdb68575c444249256f29d35f043bffa76f2260f3c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Firebase Genkit\n\r\nGenkit is Firebase's SDK for building and integrating GenAI features into applications. The genkitx-mcp plugin enables consuming MCP servers as a client or creating MCP servers from Genkit tools and prompts.\r\n\r\n**Key features:**\r\n\r\n*   Client support for tools and prompts (resources partially supported)\r\n*   Rich discovery with support in Genkit's Dev UI playground\r\n*   Seamless interoperability with Genkit's existing tools and prompts\r\n*   Works across a wide variety of GenAI models from top providers", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 527, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f0370dd0-c4fb-40cf-9085-1c22d1e5c3e9": {"__data__": {"id_": "f0370dd0-c4fb-40cf-9085-1c22d1e5c3e9", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "18b63b00-3c34-4e5f-81fc-7cd0af69e8b7", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "32d6869cfb71b07dec25f215eb5e01b7af5925fbb0410450f8b926d2c777f8e8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Adding MCP support to your application\n\r\nIf you've added MCP support to your application, we encourage you to submit a pull request to add it to this list. MCP integration can provide your users with powerful contextual AI capabilities and make your application part of the growing MCP ecosystem.\r\n\r\nBenefits of adding MCP support:\r\n\r\n*   Enable users to bring their own context and tools\r\n*   Join a growing ecosystem of interoperable AI applications\r\n*   Provide users with flexible integration options\r\n*   Support local-first AI workflows\r\n\r\nTo get started with implementing MCP in your application, check out our Python or TypeScript SDK Documentation", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 658, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a52fc594-302f-4bd9-8599-b9c2f186b014": {"__data__": {"id_": "a52fc594-302f-4bd9-8599-b9c2f186b014", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f9d34b7-5879-4e66-a6aa-0e477a509ce3", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f95969ee8758eacd894c7e9b37238619146e152a81b47d3fa5dd13d61768d893", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Updates and corrections\n\r\nThis list is maintained by the community. If you notice any inaccuracies or would like to update information about MCP support in your application, please submit a pull request or open an issue in our documentation repository.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 254, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "61135a90-176b-4bc9-92dd-909d81861c07": {"__data__": {"id_": "61135a90-176b-4bc9-92dd-909d81861c07", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2902a59-40ac-4ed9-b88a-7fb9e4a83207", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "19e1a23f3d43d8d22e71e1e1962919298f0763cdb999cb9990d899c14c879bfb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Core architecture\n\r\nUnderstand how MCP connects clients, servers, and LLMs\r\n\r\nThe Model Context Protocol (MCP) is built on a flexible, extensible architecture that enables seamless communication between LLM applications and integrations. This document covers the core architectural components and concepts.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 308, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f14e52ff-bd4d-4815-9f7a-357885f302ee": {"__data__": {"id_": "f14e52ff-bd4d-4815-9f7a-357885f302ee", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf1c76a9-04ec-4895-adc8-38d866494da4", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8349a5599a89b7260047935861504309593cfdd040f6b9158f79110ffb95c292", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Overview\n\r\nMCP follows a client-server architecture where:\r\n\r\n*   **Hosts** are LLM applications (like Claude Desktop or IDEs) that initiate connections\r\n*   **Clients** maintain 1:1 connections with servers, inside the host application\r\n*   **Servers** provide context, tools, and prompts to clients\r\n\r\n```mermaid\r\nflowchart LR\r\n    subgraph \"&nbsp;Host (e.g., Claude Desktop)&nbsp;\"\r\n        client1[MCP Client]\r\n        client2[MCP Client]\r\n    end\r\n    subgraph \"Server Process\"\r\n        server1[MCP Server]\r\n    end\r\n    subgraph \"Server Process\"\r\n        server2[MCP Server]\r\n    end\r\n\r\n    client1 |Transport Layer| server1\r\n    client2 |Transport Layer| server2\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 676, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ef729c51-0616-403c-bd72-0fef8109454b": {"__data__": {"id_": "ef729c51-0616-403c-bd72-0fef8109454b", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4babb8dc-7684-4ce9-9f14-c033c7267719", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a9f30a16aae66416e4a1ec222e7da163055881acffdeb5303e841226eaa77400", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Core components", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 17, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c522716d-db35-4a7d-aa5f-a5fa21632cef": {"__data__": {"id_": "c522716d-db35-4a7d-aa5f-a5fa21632cef", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e3fd041-76b5-494f-b4c8-6304d73d9364", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "76ac28b201b9bd59b86dfc8d240273bf1b072b26b5c8eaac21718f556861fdac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Protocol layer\n\r\nThe protocol layer handles message framing, request/response linking, and high-level communication patterns.\r\n\r\n\r\n  \r\n    ```typescript\r\n    class Protocol {\r\n        // Handle incoming requests\r\n        setRequestHandler(schema: T, handler: (request: T, extra: RequestHandlerExtra) => Promise): void\r\n\r\n        // Handle incoming notifications\r\n        setNotificationHandler(schema: T, handler: (notification: T) => Promise): void\r\n\r\n        // Send requests and await responses\r\n        request(request: Request, schema: T, options?: RequestOptions): Promise\r\n\r\n        // Send one-way notifications\r\n        notification(notification: Notification): Promise\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    class Session(BaseSession[RequestT, NotificationT, ResultT]):\r\n        async def send_request(\r\n            self,\r\n            request: RequestT,\r\n            result_type: type[Result]\r\n        ) -> Result:\r\n            \"\"\"\r\n            Send request and wait for response. Raises McpError if response contains error.\r\n            \"\"\"\r\n            # Request handling implementation\r\n\r\n        async def send_notification(\r\n            self,\r\n            notification: NotificationT\r\n        ) -> None:\r\n            \"\"\"Send one-way notification that doesn't expect response.\"\"\"\r\n            # Notification handling implementation\r\n\r\n        async def _received_request(\r\n            self,\r\n            responder: RequestResponder[ReceiveRequestT, ResultT]\r\n        ) -> None:\r\n            \"\"\"Handle incoming request from other side.\"\"\"\r\n            # Request handling implementation\r\n\r\n        async def _received_notification(\r\n            self,\r\n            notification: ReceiveNotificationT\r\n        ) -> None:\r\n            \"\"\"Handle incoming notification from other side.\"\"\"\r\n            # Notification handling implementation\r\n    ```\r\n  \r\n\r\n\r\nKey classes include:\r\n\r\n*   `Protocol`\r\n*   `Client`\r\n*   `Server`", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1941, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "57ffeb4c-051e-4ac2-9c0b-51593d8cd7f0": {"__data__": {"id_": "57ffeb4c-051e-4ac2-9c0b-51593d8cd7f0", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d274cbf0-58c4-47ab-8df3-a0726bdc21fb", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "18aee7be0f081568702767e2698ee5266eb2c0c207975278e68d179f1a087646", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Transport layer\n\r\nThe transport layer handles the actual communication between clients and servers. MCP supports multiple transport mechanisms:\r\n\r\n1.  **Stdio transport**\r\n    *   Uses standard input/output for communication\r\n    *   Ideal for local processes\r\n\r\n2.  **HTTP with SSE transport**\r\n    *   Uses Server-Sent Events for server-to-client messages\r\n    *   HTTP POST for client-to-server messages\r\n\r\nAll transports use JSON-RPC 2.0 to exchange messages. See the specification for detailed information about the Model Context Protocol message format.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 561, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ee486c55-050e-4543-8bd8-06c7e747d2bb": {"__data__": {"id_": "ee486c55-050e-4543-8bd8-06c7e747d2bb", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a83a364-4584-4769-be60-9214d69c4c03", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "e8ae6d29cf1fbab4cc2cf21786b9aa2130e63b5ce7514c842d29a76603a7e74a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Message types\n\r\nMCP has these main types of messages:\r\n\r\n1.  **Requests** expect a response from the other side:\r\n    ```typescript\r\n    interface Request {\r\n      method: string;\r\n      params?: { ... };\r\n    }\r\n    ```\r\n\r\n2.  **Notifications** are one-way messages that don't expect a response:\r\n    ```typescript\r\n    interface Notification {\r\n      method: string;\r\n      params?: { ... };\r\n    }\r\n    ```\r\n\r\n3.  **Results** are successful responses to requests:\r\n    ```typescript\r\n    interface Result {\r\n      [key: string]: unknown;\r\n    }\r\n    ```\r\n\r\n4.  **Errors** indicate that a request failed:\r\n    ```typescript\r\n    interface Error {\r\n      code: number;\r\n      message: string;\r\n      data?: unknown;\r\n    }\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 734, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0235f2e0-8c99-41a0-819b-8eb215d0899e": {"__data__": {"id_": "0235f2e0-8c99-41a0-819b-8eb215d0899e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da8644f9-8dbc-48c6-b714-1ca1cb9cb7ee", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "2b53510808811f455893c57308bb6c52f080d6ceaf3fda8ffdc3b771f149db94", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Connection lifecycle", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 22, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "911916e0-f9f2-438a-a468-edf03e82ab3e": {"__data__": {"id_": "911916e0-f9f2-438a-a468-edf03e82ab3e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83aefef5-173f-4d29-bf00-b2fae3410d49", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f51bcd8b0f428ad76b2bf01cbdb3c076317315cf5b6c1153037bab3667156a2c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1. Initialization\n\r\n```mermaid\r\nsequenceDiagram\r\n    participant Client\r\n    participant Server\r\n\r\n    Client->>Server: initialize request\r\n    Server->>Client: initialize response\r\n    Client->>Server: initialized notification\r\n\r\n    Note over Client,Server: Connection ready for use\r\n```\r\n\r\n1.  Client sends `initialize` request with protocol version and capabilities\r\n2.  Server responds with its protocol version and capabilities\r\n3.  Client sends `initialized` notification as acknowledgment\r\n4.  Normal message exchange begins", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 534, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f9f1667-345e-439c-a11f-263af1717f25": {"__data__": {"id_": "2f9f1667-345e-439c-a11f-263af1717f25", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8998fa1-b2ff-4910-9c88-0537910a9476", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8278b72a7c1e54b451500c361ec487933f4678ecdae4e98960f056833599db70", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2. Message exchange\n\r\nAfter initialization, the following patterns are supported:\r\n\r\n*   **Request-Response**: Client or server sends requests, the other responds\r\n*   **Notifications**: Either party sends one-way messages", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 224, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f570ef9c-d1e4-4fcb-939b-856e98404f1f": {"__data__": {"id_": "f570ef9c-d1e4-4fcb-939b-856e98404f1f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9951e01-4c50-42ed-8e3b-4031c7cb6cae", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "e972f7619f7bf5226771635b388e775dde285cd95a5c5df4dc6128991524e11e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3. Termination\n\r\nEither party can terminate the connection:\r\n\r\n*   Clean shutdown via `close()`\r\n*   Transport disconnection\r\n*   Error conditions", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 148, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "df65f087-5ec0-4802-91a0-b521a2de1c4e": {"__data__": {"id_": "df65f087-5ec0-4802-91a0-b521a2de1c4e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84e9d413-aa9a-4156-9fc7-75b85e24767b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "1932c39c7e4b7a100596bced864180120ce2722ec0e192102c166c6883411338", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Error handling\n\r\nMCP defines these standard error codes:\r\n\r\n```typescript\r\nenum ErrorCode {\r\n  // Standard JSON-RPC error codes\r\n  ParseError = -32700,\r\n  InvalidRequest = -32600,\r\n  MethodNotFound = -32601,\r\n  InvalidParams = -32602,\r\n  InternalError = -32603\r\n}\r\n```\r\n\r\nSDKs and applications can define their own error codes above -32000.\r\n\r\nErrors are propagated through:\r\n\r\n*   Error responses to requests\r\n*   Error events on transports\r\n*   Protocol-level error handlers", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 478, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "efa9f17c-a0d3-4031-81bb-ecbdc2eb7802": {"__data__": {"id_": "efa9f17c-a0d3-4031-81bb-ecbdc2eb7802", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "01461507-6aa3-412c-a0bd-00a6f51a7120", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "3978862fbb7446ada380d3ca1a17f04b24a8883a31b618b4b2c193d2e85e7589", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Implementation example\n\r\nHere's a basic example of implementing an MCP server:\r\n\r\n\r\n  \r\n    ```typescript\r\n    import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\r\n    import { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\r\n\r\n    const server = new Server({\r\n      name: \"example-server\",\r\n      version: \"1.0.0\"\r\n    }, {\r\n      capabilities: {\r\n        resources: {}\r\n      }\r\n    });\r\n\r\n    // Handle requests\r\n    server.setRequestHandler(ListResourcesRequestSchema, async () => {\r\n      return {\r\n        resources: [\r\n          {\r\n            uri: \"example://resource\",\r\n            name: \"Example Resource\"\r\n          }\r\n        ]\r\n      };\r\n    });\r\n\r\n    // Connect transport\r\n    const transport = new StdioServerTransport();\r\n    await server.connect(transport);\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    import asyncio\r\n    import mcp.types as types\r\n    from mcp.server import Server\r\n    from mcp.server.stdio import stdio_server\r\n\r\n    app = Server(\"example-server\")\r\n\r\n    @app.list_resources()\r\n    async def list_resources() -> list[types.Resource]:\r\n        return [\r\n            types.Resource(\r\n                uri=\"example://resource\",\r\n                name=\"Example Resource\"\r\n            )\r\n        ]\r\n\r\n    async def main():\r\n        async with stdio_server() as streams:\r\n            await app.run(\r\n                streams[0],\r\n                streams[1],\r\n                app.create_initialization_options()\r\n            )\r\n\r\n    if __name__ == \"__main__\":\r\n        asyncio.run(main)\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1562, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b71cc32b-425c-447b-a4ea-ae9a45c5bb53": {"__data__": {"id_": "b71cc32b-425c-447b-a4ea-ae9a45c5bb53", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0b9caae-2563-489e-aca7-9cb25636a566", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "dd2c7da2074db08e2d845fc5639e99a4bd7f9d5952610a620a6f03ebbc65685b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 16, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eac26800-4f84-413f-a12e-2cbf232323dd": {"__data__": {"id_": "eac26800-4f84-413f-a12e-2cbf232323dd", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5321ee9c-06e5-4bfd-876e-5be265e49d9a", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "b39d350042f5d6396168f427190dabfed02bc47f486951f6669045ee2848eb5b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Transport selection\n\r\n1.  **Local communication**\r\n    *   Use stdio transport for local processes\r\n    *   Efficient for same-machine communication\r\n    *   Simple process management\r\n\r\n2.  **Remote communication**\r\n    *   Use SSE for scenarios requiring HTTP compatibility\r\n    *   Consider security implications including authentication and authorization", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 360, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48f54409-0f62-40d3-8a3f-1c229c5908a6": {"__data__": {"id_": "48f54409-0f62-40d3-8a3f-1c229c5908a6", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28c551b5-9595-4406-8b9d-44d378689ee1", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "230eedb38b0bb63d27fe85c698c40312d3172bcb7a10ff6b11eae567413e8adb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Message handling\n\r\n1.  **Request processing**\r\n    *   Validate inputs thoroughly\r\n    *   Use type-safe schemas\r\n    *   Handle errors gracefully\r\n    *   Implement timeouts\r\n\r\n2.  **Progress reporting**\r\n    *   Use progress tokens for long operations\r\n    *   Report progress incrementally\r\n    *   Include total progress when known\r\n\r\n3.  **Error management**\r\n    *   Use appropriate error codes\r\n    *   Include helpful error messages\r\n    *   Clean up resources on errors", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 480, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9cd5ba7-6cb7-44dd-9606-11d25bd4f559": {"__data__": {"id_": "d9cd5ba7-6cb7-44dd-9606-11d25bd4f559", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5dc6b721-a7f0-4f94-97a8-2ac60d63c8cb", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "43dcef5c7216975ba70217beade98359dc6e44c252704ea0ea8277d3657a6397", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security considerations\n\r\n1.  **Transport security**\r\n    *   Use TLS for remote connections\r\n    *   Validate connection origins\r\n    *   Implement authentication when needed\r\n\r\n2.  **Message validation**\r\n    *   Validate all incoming messages\r\n    *   Sanitize inputs\r\n    *   Check message size limits\r\n    *   Verify JSON-RPC format\r\n\r\n3.  **Resource protection**\r\n    *   Implement access controls\r\n    *   Validate resource paths\r\n    *   Monitor resource usage\r\n    *   Rate limit requests\r\n\r\n4.  **Error handling**\r\n    *   Don't leak sensitive information\r\n    *   Log security-relevant errors\r\n    *   Implement proper cleanup\r\n    *   Handle DoS scenarios", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 669, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "92b2d6a1-0a99-471f-b5e1-20abec53a2c5": {"__data__": {"id_": "92b2d6a1-0a99-471f-b5e1-20abec53a2c5", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "422a3694-fe52-4c6f-8147-5088eeec4039", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "b4b90f5823268ec97e91d5fd2df2c810ba667ae71ce446c02b233e7b0312ce80", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Debugging and monitoring\n\r\n1.  **Logging**\r\n    *   Log protocol events\r\n    *   Track message flow\r\n    *   Monitor performance\r\n    *   Record errors\r\n\r\n2.  **Diagnostics**\r\n    *   Implement health checks\r\n    *   Monitor connection state\r\n    *   Track resource usage\r\n    *   Profile performance\r\n\r\n3.  **Testing**\r\n    *   Test different transports\r\n    *   Verify error handling\r\n    *   Check edge cases\r\n    *   Load test servers", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 440, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "21ffd6dd-a03f-4f75-82fc-e2413895a282": {"__data__": {"id_": "21ffd6dd-a03f-4f75-82fc-e2413895a282", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "887d1c89-81b2-4be6-8cbf-2d12fd4c6faf", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "4be349281e22a81ce65416b93b92766d0fc8e783621d5b9326ca8df3da09016a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Debugging\n\r\nA comprehensive guide to debugging Model Context Protocol (MCP) integrations\r\n\r\nEffective debugging is essential when developing MCP servers or integrating them with applications. This guide covers the debugging tools and approaches available in the MCP ecosystem.\r\n\r\n\r\n  This guide is for macOS. Guides for other platforms are coming soon.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 354, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab1382c7-64bf-43bc-a004-8ca8fb756140": {"__data__": {"id_": "ab1382c7-64bf-43bc-a004-8ca8fb756140", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd681403-a52a-401b-a8fb-23c7037367fb", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "ffd50d6f5179435436b1e77e91e1cc9e3b9b4e52adfe551233516d77ff496129", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Debugging tools overview\n\r\nMCP provides several tools for debugging at different levels:\r\n\r\n1.  **MCP Inspector**\r\n    *   Interactive debugging interface\r\n    *   Direct server testing\r\n    *   See the Inspector guide for details\r\n\r\n2.  **Claude Desktop Developer Tools**\r\n    *   Integration testing\r\n    *   Log collection\r\n    *   Chrome DevTools integration\r\n\r\n3.  **Server Logging**\r\n    *   Custom logging implementations\r\n    *   Error tracking\r\n    *   Performance monitoring", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 486, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d032a9d1-497b-43a7-8e7a-4c368da8a724": {"__data__": {"id_": "d032a9d1-497b-43a7-8e7a-4c368da8a724", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fffb161b-7ea8-4080-b8a9-964ff78c4c5c", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "5c17019b58698ef3aa5c6a62adecbf708b6d214b6f9299b9ae410cb4630089f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Debugging in Claude Desktop", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 29, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "22c7e67e-4601-48be-9fc4-fc2a586cd33f": {"__data__": {"id_": "22c7e67e-4601-48be-9fc4-fc2a586cd33f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58a45610-1500-4839-93aa-2b4d485a9969", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "68af19ce4ecbda422494cf654cd3e882d694c5d67b24dd0749bd0bd68165a467", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Checking server status\n\r\nThe Claude.app interface provides basic server status information:\r\n\r\n1.  Click the \ud83d\udd0c icon to view:\r\n    *   Connected servers\r\n    *   Available prompts and resources\r\n\r\n2.  Click the \ud83d\udd28 icon to view:\r\n    *   Tools made available to the model", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 270, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2587d4f-2d3b-4383-9896-fc654d00259a": {"__data__": {"id_": "b2587d4f-2d3b-4383-9896-fc654d00259a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d27ec27-70a0-474c-bc2d-a8642aaa8825", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "ca4ac58398a26e166b125e828aad9a5b4eb35a5b8af2968ffed3c9f060a369c7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Viewing logs\n\r\nReview detailed MCP logs from Claude Desktop:\r\n\r\n```bash\r\n# Follow logs in real-time\r\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\r\n```\r\n\r\nThe logs capture:\r\n\r\n*   Server connection events\r\n*   Configuration issues\r\n*   Runtime errors\r\n*   Message exchanges", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 274, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d7a42fb6-dbe5-49bb-adc7-63d6d2501dbf": {"__data__": {"id_": "d7a42fb6-dbe5-49bb-adc7-63d6d2501dbf", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b12e0c93-229a-43aa-96cd-51a7625f48cc", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "d6d1958b824903ba4c8bcaf8e1577ef0c3f18227e9f4629a572692531ca28497", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Using Chrome DevTools\n\r\nAccess Chrome's developer tools inside Claude Desktop to investigate client-side errors:\r\n\r\n1.  Enable DevTools:\r\n\r\n```bash\r\njq '.allowDevTools = true' ~/Library/Application\\ Support/Claude/developer_settings.json > tmp.json \\\r\n  && mv tmp.json ~/Library/Application\\ Support/Claude/developer_settings.json\r\n```\r\n\r\n2.  Open DevTools: `Command-Option-Shift-i`\r\n\r\nNote: You'll see two DevTools windows:\r\n\r\n*   Main content window\r\n*   App title bar window\r\n\r\nUse the Console panel to inspect client-side errors.\r\n\r\nUse the Network panel to inspect:\r\n\r\n*   Message payloads\r\n*   Connection timing", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 619, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97757397-efbe-4079-9305-8dee972ed749": {"__data__": {"id_": "97757397-efbe-4079-9305-8dee972ed749", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26bbd5ae-66a4-4545-bedb-d2184a025e5c", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "0cf6b930cf2589e3d3999fc65edcee88414f88559cc98b0a3f17717a8812aaac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Common issues", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 15, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c1b93c0c-cb09-43c8-8040-5af9143aa912": {"__data__": {"id_": "c1b93c0c-cb09-43c8-8040-5af9143aa912", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d324b3e8-8a0e-463f-ab65-a933933dd0b8", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "18e52645f1f985d0a40dc5a399d6e877abd89510fe3c787f9ec14bb8094ad9e1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Environment variables\n\r\nMCP servers inherit only a subset of environment variables automatically, like `USER`, `HOME`, and `PATH`.\r\n\r\nTo override the default variables or provide your own, you can specify an `env` key in `claude_desktop_config.json`:\r\n\r\n```json\r\n{\r\n  \"myserver\": {\r\n    \"command\": \"mcp-server-myapp\",\r\n    \"env\": {\r\n      \"MYAPP_API_KEY\": \"some_key\",\r\n    }\r\n  }\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 389, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0b568a55-d168-426a-a286-acdb2e242efa": {"__data__": {"id_": "0b568a55-d168-426a-a286-acdb2e242efa", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7bc96df3-6a48-4842-9d56-ed8ae877cb9f", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f49c0d500920d373b1b801e8dc153c022399e25d842366225f65fd5265f3b38b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Server initialization\n\r\nCommon initialization problems:\r\n\r\n1.  **Path Issues**\r\n    *   Incorrect server executable path\r\n    *   Missing required files\r\n    *   Permission problems\r\n\r\n2.  **Configuration Errors**\r\n    *   Invalid JSON syntax\r\n    *   Missing required fields\r\n    *   Type mismatches\r\n\r\n3.  **Environment Problems**\r\n    *   Missing environment variables\r\n    *   Incorrect variable values\r\n    *   Permission restrictions", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 441, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69a4bc11-2155-4bb2-903a-0f9ce5a36b9e": {"__data__": {"id_": "69a4bc11-2155-4bb2-903a-0f9ce5a36b9e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85afdd1d-3363-44e8-ad23-adfc23649238", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "22613de13f4dc3ca272b8bb7606e8815d01642da83e1f1e2abd372f030d5968a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Connection problems\n\r\nWhen servers fail to connect:\r\n\r\n1.  Check Claude Desktop logs\r\n2.  Verify server process is running\r\n3.  Test standalone with Inspector\r\n4.  Verify protocol compatibility", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 195, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f219b098-33ee-45a7-8e39-ab5f48cf0fb9": {"__data__": {"id_": "f219b098-33ee-45a7-8e39-ab5f48cf0fb9", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7152d24d-d099-4f5f-95b5-c1bdee21484d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "d055ae02a6a94a33363978c6f1229eb98727467b93af49e1319d2835c91bffd8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Implementing logging", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 22, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "18c39861-c28e-4bf2-aafe-d536d2e9c400": {"__data__": {"id_": "18c39861-c28e-4bf2-aafe-d536d2e9c400", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "419d5db5-f118-43c0-9ef9-58e419936b75", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a5b1f1189e953951ceae822675faa770b829e492f57b0c47af927c99d3fe815f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Server-side logging\n\r\nWhen building a server that uses the local stdio transport, all messages logged to stderr (standard error) will be captured by the host application (e.g., Claude Desktop) automatically.\r\n\r\n\r\n  Local MCP servers should not log messages to stdout (standard out), as this will interfere with protocol operation.\r\n\r\n\r\nFor all transports, you can also provide logging to the client by sending a log message notification:\r\n\r\n\r\n  \r\n    ```python\r\n    server.request_context.session.send_log_message(\r\n      level=\"info\",\r\n      data=\"Server started successfully\",\r\n    )\r\n    ```\r\n  \r\n\r\n  \r\n    ```typescript\r\n    server.sendLoggingMessage({\r\n      level: \"info\",\r\n      data: \"Server started successfully\",\r\n    });\r\n    ```\r\n  \r\n\r\n\r\nImportant events to log:\r\n\r\n*   Initialization steps\r\n*   Resource access\r\n*   Tool execution\r\n*   Error conditions\r\n*   Performance metrics", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 892, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a4faad99-903c-4baa-bf96-51a97c9a244b": {"__data__": {"id_": "a4faad99-903c-4baa-bf96-51a97c9a244b", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e3ec590-ec9b-4cbd-b8f1-0489bc5c4099", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c086bd341aa256bc4a52a9c5941d2a04b25af809c99927928ef26dd8ede148ef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Client-side logging\n\r\nIn client applications:\r\n\r\n1.  Enable debug logging\r\n2.  Monitor network traffic\r\n3.  Track message exchanges\r\n4.  Record error states", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 158, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0e785f78-62b7-41d4-af6f-c44cdde1bd22": {"__data__": {"id_": "0e785f78-62b7-41d4-af6f-c44cdde1bd22", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "469afb5d-e4f1-4114-9e8a-552542f70df5", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8ed3c7593575c56501cb93b459b60ce56b050179589c7e5fcd18fef77c68b499", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Debugging workflow", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 20, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "728bdf89-80af-45b0-acb6-93750f25f219": {"__data__": {"id_": "728bdf89-80af-45b0-acb6-93750f25f219", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "749ac45b-16fa-485d-9234-642d198d9490", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8f7d107b2a4e57f3b21ff4428b521c1c85a582c7bb9a4a747b38b3d0b2ff61af", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Development cycle\n\r\n1.  Initial Development\r\n    *   Use Inspector for basic testing\r\n    *   Implement core functionality\r\n    *   Add logging points\r\n\r\n2.  Integration Testing\r\n    *   Test in Claude Desktop\r\n    *   Monitor logs\r\n    *   Check error handling", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 263, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "27fb5f81-5afe-4a0c-a181-749b8347a900": {"__data__": {"id_": "27fb5f81-5afe-4a0c-a181-749b8347a900", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c23e7c4-de16-4ec1-ba81-3ca43a95901b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "42aaa45edf6ed1651628e80c8d8df88451a91dd8e21d1d4b1053cb9d41a32baf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Testing changes\n\r\nTo test changes efficiently:\r\n\r\n*   **Configuration changes**: Restart Claude Desktop\r\n*   **Server code changes**: Use Command-R to reload\r\n*   **Quick iteration**: Use Inspector during development", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 218, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b1a52d68-56ac-43b1-adb3-7984f193ec94": {"__data__": {"id_": "b1a52d68-56ac-43b1-adb3-7984f193ec94", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7c8fef52-d82f-4942-a036-d22ac5aba3e4", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a0b64203e3fb242cf89a26987d306f8fe54f77948332ea464a232d81b0551b87", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 16, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9e7ef6f-260c-4155-aa2b-6349e15ee669": {"__data__": {"id_": "f9e7ef6f-260c-4155-aa2b-6349e15ee669", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b327916-a5eb-4df6-905c-037140f78f0b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "9fa7542522c13078551ada075786fdff153085da196ce7c365203ece6a481258", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Logging strategy\n\r\n1.  **Structured Logging**\r\n    *   Use consistent formats\r\n    *   Include context\r\n    *   Add timestamps\r\n    *   Track request IDs\r\n\r\n2.  **Error Handling**\r\n    *   Log stack traces\r\n    *   Include error context\r\n    *   Track error patterns\r\n    *   Monitor recovery\r\n\r\n3.  **Performance Tracking**\r\n    *   Log operation timing\r\n    *   Monitor resource usage\r\n    *   Track message sizes\r\n    *   Measure latency", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 442, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e275e857-6466-445d-8a8b-5fdaeb2ee632": {"__data__": {"id_": "e275e857-6466-445d-8a8b-5fdaeb2ee632", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d89d363-7b4b-42b3-b185-bba007cc6439", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "74ace3ca3ee90731f42cc41009837a65a343f72c4696873a1fad9dc16eb6ff2d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security considerations\n\r\nWhen debugging:\r\n\r\n1.  **Sensitive Data**\r\n    *   Sanitize logs\r\n    *   Protect credentials\r\n    *   Mask personal information\r\n\r\n2.  **Access Control**\r\n    *   Verify permissions\r\n    *   Check authentication\r\n    *   Monitor access patterns", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 273, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4e46cba6-8647-469b-a707-5c50c669771f": {"__data__": {"id_": "4e46cba6-8647-469b-a707-5c50c669771f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae2dafad-92e4-4fd9-8f71-ce1925618393", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "375a9786b9835faa3b957f727e7dc670fa00c87b38f75adb0e3d9c6d214f6ad4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Getting help\n\r\nWhen encountering issues:\r\n\r\n1.  **First Steps**\r\n    *   Check server logs\r\n    *   Test with Inspector\r\n    *   Review configuration\r\n    *   Verify environment\r\n\r\n2.  **Support Channels**\r\n    *   GitHub issues\r\n    *   GitHub discussions\r\n\r\n3.  **Providing Information**\r\n    *   Log excerpts\r\n    *   Configuration files\r\n    *   Steps to reproduce\r\n    *   Environment details", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1d66b171-e4b0-4a9a-9672-61d259388332": {"__data__": {"id_": "1d66b171-e4b0-4a9a-9672-61d259388332", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b285c89-30a7-4626-9d8d-7ddb31749b9e", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "df4445fc3f5a12fadd97f6dc864ba48c3652a456263f4670042967f43432f36d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Next steps\n\r\n\r\n  \r\n    Learn to use the MCP Inspector", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 55, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "286a2818-4b29-41a7-bd0d-a329da830f1e": {"__data__": {"id_": "286a2818-4b29-41a7-bd0d-a329da830f1e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd574a3f-0ee4-4e04-b3de-ce503bd07670", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "048250d22849cadbc5f8d736a15b46573f9adffd01b35b5d20e6abf4b45b5dd8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Inspector\n\r\nIn-depth guide to using the MCP Inspector for testing and debugging Model Context Protocol servers\r\n\r\nThe MCP Inspector is an interactive developer tool for testing and debugging MCP servers. While the Debugging Guide covers the Inspector as part of the overall debugging toolkit, this document provides a detailed exploration of the Inspector's features and capabilities.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 386, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dfb3a3cc-d36b-4b93-8b76-399821902d14": {"__data__": {"id_": "dfb3a3cc-d36b-4b93-8b76-399821902d14", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "60d82583-d785-48b9-94a3-ab34b6cc81c4", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a74ddceae9b4d8d408875a0067646195e295c031a2f516dedb8258b6fb579e0e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Getting started", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 17, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f65b9030-f0be-40f7-b2a7-b7aa4028a871": {"__data__": {"id_": "f65b9030-f0be-40f7-b2a7-b7aa4028a871", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8863ca32-d4a1-4677-93d3-c586428fd17e", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8c20553f17ef2d458ea2e4f2dc3311111f7e6347fcd4de9b2aa509a7854cbd86", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Installation and basic usage\n\r\nThe Inspector runs directly through `npx` without requiring installation:\r\n\r\n```bash\r\nnpx @modelcontextprotocol/inspector \r\n```\r\n\r\n```bash\r\nnpx @modelcontextprotocol/inspector   \r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 216, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eb8e9c76-3d68-4181-94c5-7da68fa55dc1": {"__data__": {"id_": "eb8e9c76-3d68-4181-94c5-7da68fa55dc1", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7157e970-cd48-47fa-94a9-4f56899ed7c4", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8c4260f897adb9a2d625084643104057fe61598eade3e4b56fe73a60b20fbddd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Inspecting servers from NPM or PyPi\n\r\nA common way to start server packages from NPM or PyPi.\r\n\r\n\r\n  \r\n    ```bash\r\n    npx -y @modelcontextprotocol/inspector npx  \r\n    # For example\r\n    npx -y @modelcontextprotocol/inspector npx server-postgres postgres://127.0.0.1/testdb\r\n    ```\r\n  \r\n\r\n  \r\n    ```bash\r\n    npx @modelcontextprotocol/inspector uvx  \r\n    # For example\r\n    npx @modelcontextprotocol/inspector uvx mcp-server-git --repository ~/code/mcp/servers.git\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 480, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc2fbfd3-5b25-4023-a3cf-f5ee295b2baa": {"__data__": {"id_": "dc2fbfd3-5b25-4023-a3cf-f5ee295b2baa", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "283984ff-35df-455e-adb3-ee5c04bf52b7", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8dc1ef7c92f430dd8b659dbe2ce6c7ba40206f72ab802bb3c5de59db152b263a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Inspecting locally developed servers\n\r\nTo inspect servers locally developed or downloaded as a repository, the most common\r\nway is:\r\n\r\n\r\n  \r\n    ```bash\r\n    npx @modelcontextprotocol/inspector node path/to/server/index.js args...\r\n    ```\r\n  \r\n\r\n  \r\n    ```bash\r\n    npx @modelcontextprotocol/inspector \\\r\n      uv \\\r\n      --directory path/to/server \\\r\n      run \\\r\n      package-name \\\r\n      args...\r\n    ```\r\n  \r\n\r\n\r\nPlease carefully read any attached README for the most accurate instructions.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 501, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed33ca78-6e09-4114-9bde-e7e3b4114217": {"__data__": {"id_": "ed33ca78-6e09-4114-9bde-e7e3b4114217", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b5dd838-2b6c-431d-a5c3-48a4277207d0", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8b1cfe3e2e0c82d4fd834b253dafe53786e676fbe15205ea177eb68ad90ce8d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Feature overview\n\r\n\r\n  \r\n\r\n\r\nThe Inspector provides several features for interacting with your MCP server:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 108, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab92706d-56b7-4bf3-b696-ce6fb93a892c": {"__data__": {"id_": "ab92706d-56b7-4bf3-b696-ce6fb93a892c", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4ad37d9-6d05-48c9-afdf-4e1cb3327a42", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c3384d8e662a7035130fdaf54087dff46022b4a29419e1b821fb40c5625f96d4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Server connection pane\n\r\n*   Allows selecting the transport for connecting to the server\r\n*   For local servers, supports customizing the command-line arguments and environment", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 178, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9f8dcb08-d3ee-4a10-9c3a-750f440a7981": {"__data__": {"id_": "9f8dcb08-d3ee-4a10-9c3a-750f440a7981", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e562e9ce-09ad-4064-b75b-05b89d47dd64", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "646d522f71d29b0fad09f2c6b4270a1bf98198d9d90c90da5014bc963884ac7a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Resources tab\n\r\n*   Lists all available resources\r\n*   Shows resource metadata (MIME types, descriptions)\r\n*   Allows resource content inspection\r\n*   Supports subscription testing", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 182, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "339c2513-036b-48fc-8386-07a08e0313aa": {"__data__": {"id_": "339c2513-036b-48fc-8386-07a08e0313aa", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "047d8813-a04e-4ee2-bf1b-9ffbb49e6e78", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "50679579562ca066e0288883d586346ae903309f0c950acec38876492cf6d817", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Prompts tab\n\r\n*   Displays available prompt templates\r\n*   Shows prompt arguments and descriptions\r\n*   Enables prompt testing with custom arguments\r\n*   Previews generated messages", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 183, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d0b63bc7-23f1-477b-bde6-43a93ace4834": {"__data__": {"id_": "d0b63bc7-23f1-477b-bde6-43a93ace4834", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fa4b0f4-beec-4d83-bee5-ab31ff5cd3ba", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a23e01cb5d6db21981677f32bf6000cbf2653db7b21a8637a132efff139d81f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Tools tab\n\r\n*   Lists available tools\r\n*   Shows tool schemas and descriptions\r\n*   Enables tool testing with custom inputs\r\n*   Displays tool execution results", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 162, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "773f5f17-d66e-4401-a4a1-469458b8da32": {"__data__": {"id_": "773f5f17-d66e-4401-a4a1-469458b8da32", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "799cbbb3-d4f5-4bfc-912b-f86e373d0e8d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "10db9e4b95a9bbfcc6593805e0d68eceac8bdca63cd11a04739e8c077b996c9e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Notifications pane\n\r\n*   Presents all logs recorded from the server\r\n*   Shows notifications received from the server", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 119, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "631b4409-4f86-4ee8-8287-2ebfe2480f7d": {"__data__": {"id_": "631b4409-4f86-4ee8-8287-2ebfe2480f7d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "69fdff5b-92ca-4f7b-989e-3679c5ac1cd4", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "2eb24b4415b40f89b36b26f72838692f299fbebe4891b9222fa299b142bd2675", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 16, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2050fee9-1ead-43ed-99c1-c666ea242f3f": {"__data__": {"id_": "2050fee9-1ead-43ed-99c1-c666ea242f3f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82913062-5c96-4eae-8ae9-4131091e8bd1", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "d359368aa1e21e5adefed9599d3259fe0dc65a5ecd4c37c4b455633f96a6bc45", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Development workflow\n\r\n1.  Start Development\r\n    *   Launch Inspector with your server\r\n    *   Verify basic connectivity\r\n    *   Check capability negotiation\r\n\r\n2.  Iterative testing\r\n    *   Make server changes\r\n    *   Rebuild the server\r\n    *   Reconnect the Inspector\r\n    *   Test affected features\r\n    *   Monitor messages\r\n\r\n3.  Test edge cases\r\n    *   Invalid inputs\r\n    *   Missing prompt arguments\r\n    *   Concurrent operations\r\n    *   Verify error handling and error responses", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 498, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b27251e8-0db0-4907-8058-00c917776c5d": {"__data__": {"id_": "b27251e8-0db0-4907-8058-00c917776c5d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "baca83a1-6f67-4946-8a8a-2e677dec84a3", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8f0cda25375b6f12af64ae00c23074c03ffd04fb528ac1b7a0c385dfe954f293", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Next steps\n\r\n\r\n  \r\n    Check out the MCP Inspector source code\r\n  \r\n\r\n  \r\n    Learn about broader debugging strategies", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 120, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48845265-fa5b-4e98-9bd1-6f48fb321d72": {"__data__": {"id_": "48845265-fa5b-4e98-9bd1-6f48fb321d72", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e3ec7194-47fc-4c1d-8021-c9ca02afcb69", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "1f0366a6305c5ae4fa7de30d270b19e1037800363f103e95d77aeb0b91de3412", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction\n\r\nGet started with the Model Context Protocol (MCP)\r\n\r\nThe Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 398, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e54edf57-570b-4851-ac72-78794af458c7": {"__data__": {"id_": "e54edf57-570b-4851-ac72-78794af458c7", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "47b20144-10ce-425f-b0e4-64d31a641578", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "ee5d7298c99bf4f5e5b9410f857acfb5c845ba5c601767b1c5a1bb01cf0e5467", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Get started with MCP\n\r\nChoose the path that best fits your needs:\r\n\r\n\r\n  \r\n    The fastest way to see MCP in action\u2014connect example servers to Claude Desktop\r\n  \r\n\r\n  \r\n    Create a simple MCP server in Python to understand the basics\r\n  \r\n\r\n  \r\n    Create a simple MCP server in TypeScript to understand the basics", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 317, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aea2e275-efe4-44cc-b045-e20f2b2554e7": {"__data__": {"id_": "aea2e275-efe4-44cc-b045-e20f2b2554e7", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d38acb5c-aacd-4555-93cf-4191a8d4084f", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8fcdcc7479a9e0520c04fa59aa7352dc3035f97819365da874bb041d6860b26d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Development tools\n\r\nEssential tools for building and debugging MCP servers:\r\n\r\n\r\n  \r\n    Learn how to effectively debug MCP servers and integrations\r\n  \r\n\r\n  \r\n    Test and inspect your MCP servers with our interactive debugging tool", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 235, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ee00b89e-fc3f-4427-9dc5-6cfa23d6a872": {"__data__": {"id_": "ee00b89e-fc3f-4427-9dc5-6cfa23d6a872", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5dcd142-089f-4430-b5b0-f055740c3e49", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8f50fbb87ce2e97e6d2c0e6bfe37cdfd8f34c5b3760118b28392ad0a8c7080ed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Explore MCP\n\r\nDive deeper into MCP's core concepts and capabilities:\r\n\r\n\r\n  \r\n    Understand how MCP connects clients, servers, and LLMs\r\n  \r\n\r\n  \r\n    Expose data and content from your servers to LLMs\r\n  \r\n\r\n  \r\n    Create reusable prompt templates and workflows\r\n  \r\n\r\n  \r\n    Enable LLMs to perform actions through your server\r\n  \r\n\r\n  \r\n    Let your servers request completions from LLMs\r\n  \r\n\r\n  \r\n    Learn about MCP's communication mechanism", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 450, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "57e370a8-a3bd-42e2-8bd1-701c1428f21f": {"__data__": {"id_": "57e370a8-a3bd-42e2-8bd1-701c1428f21f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8201c0c-fbca-4345-a2f0-ca01c25d8712", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "9408ec27fecb643c1606cf8c32999ce793bc6a132e0699708c38d3936c8429a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Contributing\n\r\nWant to contribute? Check out @modelcontextprotocol on GitHub to join our growing community of developers building with MCP.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 141, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "28706ee0-edbd-49a1-84e6-828bec0fa98b": {"__data__": {"id_": "28706ee0-edbd-49a1-84e6-828bec0fa98b", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73d0401f-fa58-4b29-a752-912f4f4c0819", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "52f67a688c35802cbd20a480a67ca8bae2020fd1c40a2ab0bcc61e636bb94f28", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Prompts\n\r\nCreate reusable prompt templates and workflows\r\n\r\nPrompts enable servers to define reusable prompt templates and workflows that clients can easily surface to users and LLMs. They provide a powerful way to standardize and share common LLM interactions.\r\n\r\n\r\n  Prompts are designed to be **user-controlled**, meaning they are exposed from servers to clients with the intention of the user being able to explicitly select them for use.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 444, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c921c514-851b-44ff-b18a-623bcac206d8": {"__data__": {"id_": "c921c514-851b-44ff-b18a-623bcac206d8", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51309f06-0813-422c-b527-e515eb51de4a", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f1b2e87b52a4d2d85528b283c7bf744aa31162e75233e371cb46aad25e7ee8fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Overview\n\r\nPrompts in MCP are predefined templates that can:\r\n\r\n*   Accept dynamic arguments\r\n*   Include context from resources\r\n*   Chain multiple interactions\r\n*   Guide specific workflows\r\n*   Surface as UI elements (like slash commands)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 243, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9bdde2a-704f-4626-863e-1023354ceea8": {"__data__": {"id_": "b9bdde2a-704f-4626-863e-1023354ceea8", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ce7dc28-591b-4b77-a2b1-d7828ea67e17", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "47f63ddfc0ed407fc4724a8b67ef4f75dcd889a7fdcf3605dc263b319fd78816", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Prompt structure\n\r\nEach prompt is defined with:\r\n\r\n```typescript\r\n{\r\n  name: string;              // Unique identifier for the prompt\r\n  description?: string;      // Human-readable description\r\n  arguments?: [              // Optional list of arguments\r\n    {\r\n      name: string;          // Argument identifier\r\n      description?: string;  // Argument description\r\n      required?: boolean;    // Whether argument is required\r\n    }\r\n  ]\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 451, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ed9d7613-2c6e-4c03-aac8-525274f627b9": {"__data__": {"id_": "ed9d7613-2c6e-4c03-aac8-525274f627b9", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4a7d4a5-6c27-47f5-80d7-8a58763a7e53", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "597b229165670f76e7d12be4b8e98494e9a76b0c96312d155c11491a9f1fb9eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Discovering prompts\n\r\nClients can discover available prompts through the `prompts/list` endpoint:\r\n\r\n```typescript\r\n// Request\r\n{\r\n  method: \"prompts/list\"\r\n}\r\n\r\n// Response\r\n{\r\n  prompts: [\r\n    {\r\n      name: \"analyze-code\",\r\n      description: \"Analyze code for potential improvements\",\r\n      arguments: [\r\n        {\r\n          name: \"language\",\r\n          description: \"Programming language\",\r\n          required: true\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 465, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "074508c2-44f9-476a-929e-436b0423e5e2": {"__data__": {"id_": "074508c2-44f9-476a-929e-436b0423e5e2", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c438e8aa-7ffe-40e8-acac-b6924aed965b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "5bfbb872b3aba0aef42abcaed0bc0d9fa7de6a497d9f84a8d3d7518e0f792d9f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Using prompts\n\r\nTo use a prompt, clients make a `prompts/get` request:\r\n\r\n````typescript\r\n// Request\r\n{\r\n  method: \"prompts/get\",\r\n  params: {\r\n    name: \"analyze-code\",\r\n    arguments: {\r\n      language: \"python\"\r\n    }\r\n  }\r\n}\r\n\r\n// Response\r\n{\r\n  description: \"Analyze Python code for potential improvements\",\r\n  messages: [\r\n    {\r\n      role: \"user\",\r\n      content: {\r\n        type: \"text\",\r\n        text: \"Please analyze the following Python code for potential improvements:\\n\\n```python\\ndef calculate_sum(numbers):\\n    total = 0\\n    for num in numbers:\\n        total = total + num\\n    return total\\n\\nresult = calculate_sum([1, 2, 3, 4, 5])\\nprint(result)\\n```\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n````", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 706, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bbc9e626-e7e8-4315-b75c-6d99167beee7": {"__data__": {"id_": "bbc9e626-e7e8-4315-b75c-6d99167beee7", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5b65b58-2b28-4dc6-a65c-75d00109020b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "aedd45f3f5fbbd80f7d315c81fbbc6a6e97fd054c5ace102fbb9b3974b46986e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Dynamic prompts\n\r\nPrompts can be dynamic and include:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 55, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a104ef5-602a-47a3-95ba-51df1aa3efbe": {"__data__": {"id_": "1a104ef5-602a-47a3-95ba-51df1aa3efbe", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8d8308c-1e72-48ab-8b80-ba98a775490c", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "4119dee1923b596062892dffe22248036186ea551420e8f06cadd532dba3b0b5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Embedded resource context\n\r\n```json\r\n{\r\n  \"name\": \"analyze-project\",\r\n  \"description\": \"Analyze project logs and code\",\r\n  \"arguments\": [\r\n    {\r\n      \"name\": \"timeframe\",\r\n      \"description\": \"Time period to analyze logs\",\r\n      \"required\": true\r\n    },\r\n    {\r\n      \"name\": \"fileUri\",\r\n      \"description\": \"URI of code file to review\",\r\n      \"required\": true\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nWhen handling the `prompts/get` request:\r\n\r\n```json\r\n{\r\n  \"messages\": [\r\n    {\r\n      \"role\": \"user\",\r\n      \"content\": {\r\n        \"type\": \"text\",\r\n        \"text\": \"Analyze these system logs and the code file for any issues:\"\r\n      }\r\n    },\r\n    {\r\n      \"role\": \"user\",\r\n      \"content\": {\r\n        \"type\": \"resource\",\r\n        \"resource\": {\r\n          \"uri\": \"logs://recent?timeframe=1h\",\r\n          \"text\": \"[2024-03-14 15:32:11] ERROR: Connection timeout in network.py:127\\n[2024-03-14 15:32:15] WARN: Retrying connection (attempt 2/3)\\n[2024-03-14 15:32:20] ERROR: Max retries exceeded\",\r\n          \"mimeType\": \"text/plain\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"role\": \"user\",\r\n      \"content\": {\r\n        \"type\": \"resource\",\r\n        \"resource\": {\r\n          \"uri\": \"file:///path/to/code.py\",\r\n          \"text\": \"def connect_to_service(timeout=30):\\n    retries = 3\\n    for attempt in range(retries):\\n        try:\\n            return establish_connection(timeout)\\n        except TimeoutError:\\n            if attempt == retries - 1:\\n                raise\\n            time.sleep(5)\\n\\ndef establish_connection(timeout):\\n    # Connection implementation\\n    pass\",\r\n          \"mimeType\": \"text/x-python\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1652, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "056d77ac-cfb2-42c5-8957-bf73f4ff00d3": {"__data__": {"id_": "056d77ac-cfb2-42c5-8957-bf73f4ff00d3", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7501837-1409-48f3-8cc6-26a0f161fbd5", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8f7aa169b560ee2fcbcc301c22033029a748f29a7586b95d305a69db26c1813d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Multi-step workflows\n\r\n```typescript\r\nconst debugWorkflow = {\r\n  name: \"debug-error\",\r\n  async getMessages(error: string) {\r\n    return [\r\n      {\r\n        role: \"user\",\r\n        content: {\r\n          type: \"text\",\r\n          text: `Here's an error I'm seeing: ${error}`\r\n        }\r\n      },\r\n      {\r\n        role: \"assistant\",\r\n        content: {\r\n          type: \"text\",\r\n          text: \"I'll help analyze this error. What have you tried so far?\"\r\n        }\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: {\r\n          type: \"text\",\r\n          text: \"I've tried restarting the service, but the error persists.\"\r\n        }\r\n      }\r\n    ];\r\n  }\r\n};\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 670, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e77b58fd-169a-48f3-a213-c029eb595892": {"__data__": {"id_": "e77b58fd-169a-48f3-a213-c029eb595892", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "621780ee-ccbe-49b7-8d80-88f4f5312f13", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "091b4529ecda9ab739fd13e5bd182e58aabc9eb4fafdbf417bed754b2ff46050", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Example implementation\n\r\nHere's a complete example of implementing prompts in an MCP server:\r\n\r\n\r\n  \r\n    ```typescript\r\n    import { Server } from \"@modelcontextprotocol/sdk/server\";\r\n    import {\r\n      ListPromptsRequestSchema,\r\n      GetPromptRequestSchema\r\n    } from \"@modelcontextprotocol/sdk/types\";\r\n\r\n    const PROMPTS = {\r\n      \"git-commit\": {\r\n        name: \"git-commit\",\r\n        description: \"Generate a Git commit message\",\r\n        arguments: [\r\n          {\r\n            name: \"changes\",\r\n            description: \"Git diff or description of changes\",\r\n            required: true\r\n          }\r\n        ]\r\n      },\r\n      \"explain-code\": {\r\n        name: \"explain-code\",\r\n        description: \"Explain how code works\",\r\n        arguments: [\r\n          {\r\n            name: \"code\",\r\n            description: \"Code to explain\",\r\n            required: true\r\n          },\r\n          {\r\n            name: \"language\",\r\n            description: \"Programming language\",\r\n            required: false\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    const server = new Server({\r\n      name: \"example-prompts-server\",\r\n      version: \"1.0.0\"\r\n    }, {\r\n      capabilities: {\r\n        prompts: {}\r\n      }\r\n    });\r\n\r\n    // List available prompts\r\n    server.setRequestHandler(ListPromptsRequestSchema, async () => {\r\n      return {\r\n        prompts: Object.values(PROMPTS)\r\n      };\r\n    });\r\n\r\n    // Get specific prompt\r\n    server.setRequestHandler(GetPromptRequestSchema, async (request) => {\r\n      const prompt = PROMPTS[request.params.name];\r\n      if (!prompt) {\r\n        throw new Error(`Prompt not found: ${request.params.name}`);\r\n      }\r\n\r\n      if (request.params.name === \"git-commit\") {\r\n        return {\r\n          messages: [\r\n            {\r\n              role: \"user\",\r\n              content: {\r\n                type: \"text\",\r\n                text: `Generate a concise but descriptive commit message for these changes:\\n\\n${request.params.arguments?.changes}`\r\n              }\r\n            }\r\n          ]\r\n        };\r\n      }\r\n\r\n      if (request.params.name === \"explain-code\") {\r\n        const language = request.params.arguments?.language || \"Unknown\";\r\n        return {\r\n          messages: [\r\n            {\r\n              role: \"user\",\r\n              content: {\r\n                type: \"text\",\r\n                text: `Explain how this ${language} code works:\\n\\n${request.params.arguments?.code}`\r\n              }\r\n            }\r\n          ]\r\n        };\r\n      }\r\n\r\n      throw new Error(\"Prompt implementation not found\");\r\n    });\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    from mcp.server import Server\r\n    import mcp.types as types\r\n\r\n    # Define available prompts\r\n    PROMPTS = {\r\n        \"git-commit\": types.Prompt(\r\n            name=\"git-commit\",\r\n            description=\"Generate a Git commit message\",\r\n            arguments=[\r\n                types.PromptArgument(\r\n                    name=\"changes\",\r\n                    description=\"Git diff or description of changes\",\r\n                    required=True\r\n                )\r\n            ],\r\n        ),\r\n        \"explain-code\": types.Prompt(\r\n            name=\"explain-code\",\r\n            description=\"Explain how code works\",\r\n            arguments=[\r\n                types.PromptArgument(\r\n                    name=\"code\",\r\n                    description=\"Code to explain\",\r\n                    required=True\r\n                ),\r\n                types.PromptArgument(\r\n                    name=\"language\",\r\n                    description=\"Programming language\",\r\n                    required=False\r\n                )\r\n            ],\r\n        )\r\n    }\r\n\r\n    # Initialize server\r\n    app = Server(\"example-prompts-server\")\r\n\r\n    @app.list_prompts()\r\n    async def list_prompts() -> list[types.Prompt]:\r\n        return list(PROMPTS.values())\r\n\r\n    @app.get_prompt()\r\n    async def get_prompt(\r\n        name: str, arguments: dict[str, str] | None = None\r\n    ) -> types.GetPromptResult:\r\n        if name not in PROMPTS:\r\n            raise ValueError(f\"Prompt not found: {name}\")\r\n\r\n        if name == \"git-commit\":\r\n            changes = arguments.get(\"changes\") if arguments else \"\"\r\n            return types.GetPromptResult(\r\n                messages=[\r\n                    types.PromptMessage(\r\n                        role=\"user\",\r\n                        content=types.TextContent(\r\n                            type=\"text\",\r\n                            text=f\"Generate a concise but descriptive commit message \"\r\n                            f\"for these changes:\\n\\n{changes}\"\r\n                        )\r\n                    )\r\n                ]\r\n            )\r\n\r\n        if name == \"explain-code\":\r\n            code = arguments.get(\"code\") if arguments else \"\"\r\n            language = arguments.get(\"language\", \"Unknown\") if arguments else \"Unknown\"\r\n            return types.GetPromptResult(\r\n                messages=[\r\n                    types.PromptMessage(\r\n                        role=\"user\",\r\n                        content=types.TextContent(\r\n                            type=\"text\",\r\n                            text=f\"Explain how this {language} code works:\\n\\n{code}\"\r\n                        )\r\n                    )\r\n                ]\r\n            )\r\n\r\n        raise ValueError(\"Prompt implementation not found\")\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 5337, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ae73518d-e247-409a-b8f8-4fefe14f2ce8": {"__data__": {"id_": "ae73518d-e247-409a-b8f8-4fefe14f2ce8", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "121694bb-5e98-4230-8455-a3d4d13c87e1", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "004d636a2e1b781fd717d89bb73455e3ebe15532d153b243d39dc88aa567499d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices\n\r\nWhen implementing prompts:\r\n\r\n1.  Use clear, descriptive prompt names\r\n2.  Provide detailed descriptions for prompts and arguments\r\n3.  Validate all required arguments\r\n4.  Handle missing arguments gracefully\r\n5.  Consider versioning for prompt templates\r\n6.  Cache dynamic content when appropriate\r\n7.  Implement error handling\r\n8.  Document expected argument formats\r\n9.  Consider prompt composability\r\n10. Test prompts with various inputs", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 460, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "005b73a0-4e3c-4115-a277-e836f242923e": {"__data__": {"id_": "005b73a0-4e3c-4115-a277-e836f242923e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ebc6a198-26ca-41fe-a4bf-31677337140d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "05c7f62e0ecbe8232deb161c430f895b0e1d1311264dd6420a0294f4aa8f02f5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "UI integration\n\r\nPrompts can be surfaced in client UIs as:\r\n\r\n*   Slash commands\r\n*   Quick actions\r\n*   Context menu items\r\n*   Command palette entries\r\n*   Guided workflows\r\n*   Interactive forms", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 199, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f0bdd9b-32b7-44c3-8734-178f14b570f4": {"__data__": {"id_": "5f0bdd9b-32b7-44c3-8734-178f14b570f4", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b941ae0c-1ae5-41d6-bd69-922d0d428d4d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "bd9e34d55812d32c0509deeb4d8d7e3b0d6cf7fd387594768280a1079296e094", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Updates and changes\n\r\nServers can notify clients about prompt changes:\r\n\r\n1.  Server capability: `prompts.listChanged`\r\n2.  Notification: `notifications/prompts/list_changed`\r\n3.  Client re-fetches prompt list", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 211, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb5634f7-e3c7-43f9-be99-8361dfdef754": {"__data__": {"id_": "fb5634f7-e3c7-43f9-be99-8361dfdef754", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb886181-3ab6-4423-b3f9-8fae57985365", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "b3a0f6d04c89563ad3849d9295e23c8a48234802087e8a113d8e16d2af86b721", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security considerations\n\r\nWhen implementing prompts:\r\n\r\n*   Validate all arguments\r\n*   Sanitize user input\r\n*   Consider rate limiting\r\n*   Implement access controls\r\n*   Audit prompt usage\r\n*   Handle sensitive data appropriately\r\n*   Validate generated content\r\n*   Implement timeouts\r\n*   Consider prompt injection risks\r\n*   Document security requirements", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 362, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a5109113-2235-42dc-a2a4-ffdefcbe0662": {"__data__": {"id_": "a5109113-2235-42dc-a2a4-ffdefcbe0662", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f4df009f-5f91-4884-a556-46e00eb22f98", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c21487262fd6d58b2d8c2113f82c04832e170715999a691bc67af013fe3e0ad2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Python\n\r\nCreate a simple MCP server in Python in 15 minutes\r\n\r\nLet's build your first MCP server in Python! We'll create a weather server that provides current weather data as a resource and lets Claude fetch forecasts using tools.\r\n\r\n\r\n  This guide uses the OpenWeatherMap API. You'll need a free API key from OpenWeatherMap to follow along.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 344, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bca52b8f-a0a6-43cb-b669-b1c2ce04a208": {"__data__": {"id_": "bca52b8f-a0a6-43cb-b669-b1c2ce04a208", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90971de8-80ef-4744-9dd8-721b7e3e7b0a", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "9a81a9f6ceef9cd03d7095f94336e5df0728c0673b6f93a6944565857a9a54cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Prerequisites\n\r\n\r\n  The following steps are for macOS. Guides for other platforms are coming soon.\r\n\r\n\r\n\r\n  \r\n    You'll need Python 3.10 or higher:\r\n\r\n    ```bash\r\n    python --version  # Should be 3.10 or higher\r\n    ```\r\n  \r\n\r\n  \r\n    See https://docs.astral.sh/uv/ for more information.\r\n\r\n    ```bash\r\n    brew install uv\r\n    uv --version # Should be 0.4.18 or higher\r\n    ```\r\n  \r\n\r\n  \r\n    ```bash\r\n    uvx create-mcp-server --path weather_service\r\n    cd weather_service\r\n    ```\r\n  \r\n\r\n  \r\n    ```bash\r\n    uv add httpx python-dotenv\r\n    ```\r\n  \r\n\r\n  \r\n    Create `.env`:\r\n\r\n    ```bash\r\n    OPENWEATHER_API_KEY=your-api-key-here\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 651, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c579e13d-c757-4b59-a189-2222499ec86f": {"__data__": {"id_": "c579e13d-c757-4b59-a189-2222499ec86f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca0e58a1-7d70-418c-b5c1-53a598e9af36", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "6b3629c1684282764b8302b1d9cc60ef9184bd850751bf88b486bcf71eac4053", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3d1ebf39-6548-425a-bde8-89a1e76a0b44", "node_type": "1", "metadata": {}, "hash": "8838fd547d80433f9caf05ffa52398ee6120dca3b4a25708c332855ded95c70c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Create your server\n\r\n\r\n  \r\n    In `weather_service/src/weather_service/server.py`\r\n\r\n    ```python\r\n    import os\r\n    import json\r\n    import logging\r\n    from datetime import datetime, timedelta\r\n    from collections.abc import Sequence\r\n    from functools import lru_cache\r\n    from typing import Any\r\n\r\n    import httpx\r\n    import asyncio\r\n    from dotenv import load_dotenv\r\n    from mcp.server import Server\r\n    from mcp.types import (\r\n        Resource,\r\n        Tool,\r\n        TextContent,\r\n        ImageContent,\r\n        EmbeddedResource,\r\n        LoggingLevel\r\n    )\r\n    from pydantic import AnyUrl\r\n\r\n    # Load environment variables\r\n    load_dotenv()\r\n\r\n    # Configure logging\r\n    logging.basicConfig(level=logging.INFO)\r\n    logger = logging.getLogger(\"weather-server\")\r\n\r\n    # API configuration\r\n    API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\r\n    if not API_KEY:\r\n        raise ValueError(\"OPENWEATHER_API_KEY environment variable required\")\r\n\r\n    API_BASE_URL = \"http://api.openweathermap.org/data/2.5\"\r\n    DEFAULT_CITY = \"London\"\r\n    CURRENT_WEATHER_ENDPOINT = \"weather\"\r\n    FORECAST_ENDPOINT = \"forecast\"\r\n\r\n    # The rest of our server implementation will go here\r\n    ```\r\n  \r\n\r\n  \r\n    Add this functionality:\r\n\r\n    ```python\r\n    # Create reusable params\r\n    http_params = {\r\n        \"appid\": API_KEY,\r\n        \"units\": \"metric\"\r\n    }\r\n\r\n    async def fetch_weather(city: str) -> dict[str, Any]:\r\n        async with httpx.AsyncClient() as client:\r\n            response = await client.get(\r\n                f\"{API_BASE_URL}/weather\",\r\n                params={\"q\": city, **http_params}\r\n            )\r\n            response.raise_for_status()\r\n            data = response.json()\r\n\r\n        return {\r\n            \"temperature\": data[\"main\"][\"temp\"],\r\n            \"conditions\": data[\"weather\"][0][\"description\"],\r\n            \"humidity\": data[\"main\"][\"humidity\"],\r\n            \"wind_speed\": data[\"wind\"][\"speed\"],\r\n            \"timestamp\": datetime.now().isoformat()\r\n        }\r\n\r\n\r\n    app = Server(\"weather-server\")\r\n    ```\r\n  \r\n\r\n  \r\n    Add these resource-related handlers to our main function:\r\n\r\n    ```python\r\n    app = Server(\"weather-server\")\r\n\r\n    @app.list_resources()\r\n    async def list_resources() -> list[Resource]:\r\n        \"\"\"List available weather resources.\"\"\"\r\n        uri = AnyUrl(f\"weather://{DEFAULT_CITY}/current\")\r\n        return [\r\n            Resource(\r\n                uri=uri,\r\n                name=f\"Current weather in {DEFAULT_CITY}\",\r\n                mimeType=\"application/json\",\r\n                description=\"Real-time weather data\"\r\n            )\r\n        ]\r\n\r\n    @app.read_resource()\r\n    async def read_resource(uri: AnyUrl) -> str:\r\n        \"\"\"Read current weather data for a city.\"\"\"\r\n        city = DEFAULT_CITY\r\n        if str(uri).startswith(\"weather://\") and str(uri).endswith(\"/current\"):\r\n            city = str(uri).split(\"/\")[-2]\r\n        else:\r\n            raise ValueError(f\"Unknown resource: {uri}\")\r\n\r\n        try:\r\n            weather_data = await fetch_weather(city)\r\n            return json.dumps(weather_data, indent=2)\r\n        except httpx.HTTPError as e:\r\n            raise RuntimeError(f\"Weather API error: {str(e)}\")\r\n\r\n    ```\r\n  \r\n\r\n  \r\n    Add these tool-related handlers:\r\n\r\n    ```python\r\n    app = Server(\"weather-server\")\r\n\r\n    # Resource implementation ...\r\n\r\n    @app.list_tools()\r\n    async def list_tools() -> list[Tool]:\r\n        \"\"\"List available weather tools.\"\"\"\r\n        return [\r\n            Tool(\r\n                name=\"get_forecast\",\r\n                description=\"Get weather forecast for a city\",\r\n                inputSchema={\r\n                    \"type\": \"object\",\r\n                    \"properties\": {\r\n                        \"city\": {\r\n                            \"type\": \"string\",\r\n                            \"description\": \"City name\"\r\n                        },\r\n                        \"days\": {\r\n                            \"type\": \"number\",\r\n                            \"description\": \"Number of days (1-5)\",\r\n                            \"minimum\": 1,\r\n                            \"maximum\": 5\r\n                        }\r\n                    },\r\n                    \"required\": [\"city\"]\r\n                }\r\n            )\r\n        ]\r\n\r\n    @app.call_tool()\r\n    async def call_tool(name: str, arguments: Any) -> Sequence[TextContent | ImageContent | EmbeddedResource]:\r\n        \"\"\"Handle tool calls for weather forecasts.\"\"\"", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 4450, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3d1ebf39-6548-425a-bde8-89a1e76a0b44": {"__data__": {"id_": "3d1ebf39-6548-425a-bde8-89a1e76a0b44", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ca0e58a1-7d70-418c-b5c1-53a598e9af36", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "6b3629c1684282764b8302b1d9cc60ef9184bd850751bf88b486bcf71eac4053", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c579e13d-c757-4b59-a189-2222499ec86f", "node_type": "1", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "4277cddc18631f0a67ca661436b3a7b2d2e1aee15b7c245dc8e55ec8e120fc3c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "return [\r\n            Tool(\r\n                name=\"get_forecast\",\r\n                description=\"Get weather forecast for a city\",\r\n                inputSchema={\r\n                    \"type\": \"object\",\r\n                    \"properties\": {\r\n                        \"city\": {\r\n                            \"type\": \"string\",\r\n                            \"description\": \"City name\"\r\n                        },\r\n                        \"days\": {\r\n                            \"type\": \"number\",\r\n                            \"description\": \"Number of days (1-5)\",\r\n                            \"minimum\": 1,\r\n                            \"maximum\": 5\r\n                        }\r\n                    },\r\n                    \"required\": [\"city\"]\r\n                }\r\n            )\r\n        ]\r\n\r\n    @app.call_tool()\r\n    async def call_tool(name: str, arguments: Any) -> Sequence[TextContent | ImageContent | EmbeddedResource]:\r\n        \"\"\"Handle tool calls for weather forecasts.\"\"\"\r\n        if name != \"get_forecast\":\r\n            raise ValueError(f\"Unknown tool: {name}\")\r\n\r\n        if not isinstance(arguments, dict) or \"city\" not in arguments:\r\n            raise ValueError(\"Invalid forecast arguments\")\r\n\r\n        city = arguments[\"city\"]\r\n        days = min(int(arguments.get(\"days\", 3)), 5)\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                response = await client.get(\r\n                    f\"{API_BASE_URL}/{FORECAST_ENDPOINT}\",\r\n                    params={\r\n                        \"q\": city,\r\n                        \"cnt\": days * 8,  # API returns 3-hour intervals\r\n                        **http_params,\r\n                    }\r\n                )\r\n                response.raise_for_status()\r\n                data = response.json()\r\n\r\n            forecasts = []\r\n            for i in range(0, len(data[\"list\"]), 8):\r\n                day_data = data[\"list\"][i]\r\n                forecasts.append({\r\n                    \"date\": day_data[\"dt_txt\"].split()[0],\r\n                    \"temperature\": day_data[\"main\"][\"temp\"],\r\n                    \"conditions\": day_data[\"weather\"][0][\"description\"]\r\n                })\r\n\r\n            return [\r\n                TextContent(\r\n                    type=\"text\",\r\n                    text=json.dumps(forecasts, indent=2)\r\n                )\r\n            ]\r\n        except httpx.HTTPError as e:\r\n            logger.error(f\"Weather API error: {str(e)}\")\r\n            raise RuntimeError(f\"Weather API error: {str(e)}\")\r\n    ```\r\n  \r\n\r\n  \r\n    Add this to the end of `weather_service/src/weather_service/server.py`:\r\n\r\n    ```python\r\n    async def main():\r\n        # Import here to avoid issues with event loops\r\n        from mcp.server.stdio import stdio_server\r\n\r\n        async with stdio_server() as (read_stream, write_stream):\r\n            await app.run(\r\n                read_stream,\r\n                write_stream,\r\n                app.create_initialization_options()\r\n            )\r\n    ```\r\n  \r\n\r\n  \r\n    Add this to the end of `weather_service/src/weather_service/__init__.py`:\r\n\r\n    ```python\r\n    from . import server\r\n    import asyncio\r\n\r\n    def main():\r\n       \"\"\"Main entry point for the package.\"\"\"\r\n       asyncio.run(server.main())\r\n\r\n    # Optionally expose other important items at package level\r\n    __all__ = ['main', 'server']\r\n    ```", "mimetype": "text/plain", "start_char_idx": 3483, "end_char_idx": 6809, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b8fa73a0-83d0-45bf-9f2a-b47c1d60b6fb": {"__data__": {"id_": "b8fa73a0-83d0-45bf-9f2a-b47c1d60b6fb", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5026ae97-70ac-4dbb-bc68-3bdec795b3e0", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "535d4a05b302477cff61478701cda058eb15703b00a2b5c60cd2820287ac4555", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Connect to Claude Desktop\n\r\n\r\n  \r\n    Add to `claude_desktop_config.json`:\r\n\r\n    ```json\r\n    {\r\n      \"mcpServers\": {\r\n        \"weather\": {\r\n          \"command\": \"uv\",\r\n          \"args\": [\r\n            \"--directory\",\r\n            \"path/to/your/project\",\r\n            \"run\",\r\n            \"weather-service\"\r\n          ],\r\n          \"env\": {\r\n            \"OPENWEATHER_API_KEY\": \"your-api-key\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    1.  Quit Claude completely\r\n\r\n    2.  Start Claude again\r\n\r\n    3.  Look for your weather server in the \ud83d\udd0c menu", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 568, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "405bae98-66a7-4845-b6d0-d962f9a0bb7e": {"__data__": {"id_": "405bae98-66a7-4845-b6d0-d962f9a0bb7e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "31de72e2-e86c-4fd0-be16-f1eaf9015127", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "34aac1862aafafb65409867451080e33f6ba2a79ddfc5b568a07b632a625adbf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Try it out!\n\r\n\r\n  \r\n    Ask Claude:\r\n\r\n    ```\r\n    What's the current weather in San Francisco? Can you analyze the conditions and tell me if it's a good day for outdoor activities?\r\n    ```\r\n  \r\n\r\n  \r\n    Ask Claude:\r\n\r\n    ```\r\n    Can you get me a 5-day forecast for Tokyo and help me plan what clothes to pack for my trip?\r\n    ```\r\n  \r\n\r\n  \r\n    Ask Claude:\r\n\r\n    ```\r\n    Can you analyze the forecast for both Tokyo and San Francisco and tell me which city would be better for outdoor photography this week?\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 526, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "af1cab62-326e-471a-ace5-da9e07e85cb2": {"__data__": {"id_": "af1cab62-326e-471a-ace5-da9e07e85cb2", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a76e75-fe3a-478e-9c53-c369579167a8", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "838461e410f79def92de2d118a424b02759d23a9a621ab49a77f4ca552051274", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Understanding the code\n\r\n\r\n  \r\n    ```python\r\n    async def read_resource(self, uri: str) -> ReadResourceResult:\r\n        # ...\r\n    ```\r\n\r\n    Python type hints help catch errors early and improve code maintainability.\r\n  \r\n\r\n  \r\n    ```python\r\n    @app.list_resources()\r\n    async def list_resources(self) -> ListResourcesResult:\r\n        return ListResourcesResult(\r\n            resources=[\r\n                Resource(\r\n                    uri=f\"weather://{DEFAULT_CITY}/current\",\r\n                    name=f\"Current weather in {DEFAULT_CITY}\",\r\n                    mimeType=\"application/json\",\r\n                    description=\"Real-time weather data\"\r\n                )\r\n            ]\r\n        )\r\n    ```\r\n\r\n    Resources provide data that Claude can access as context.\r\n  \r\n\r\n  \r\n    ```python\r\n    Tool(\r\n        name=\"get_forecast\",\r\n        description=\"Get weather forecast for a city\",\r\n        inputSchema={\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"city\": {\r\n                    \"type\": \"string\",\r\n                    \"description\": \"City name\"\r\n                },\r\n                \"days\": {\r\n                    \"type\": \"number\",\r\n                    \"description\": \"Number of days (1-5)\",\r\n                    \"minimum\": 1,\r\n                    \"maximum\": 5\r\n                }\r\n            },\r\n            \"required\": [\"city\"]\r\n        }\r\n    )\r\n    ```\r\n\r\n    Tools let Claude take actions through your server with validated inputs.\r\n  \r\n\r\n  \r\n    ```python\r\n    # Create server instance with name\r\n    app = Server(\"weather-server\")\r\n\r\n    # Register resource handler\r\n    @app.list_resources()\r\n    async def list_resources() -> list[Resource]:\r\n        \"\"\"List available resources\"\"\"\r\n        return [...]\r\n\r\n    # Register tool handler\r\n    @app.call_tool()\r\n    async def call_tool(name: str, arguments: Any) -> Sequence[TextContent]:\r\n        \"\"\"Handle tool execution\"\"\"\r\n        return [...]\r\n\r\n    # Register additional handlers\r\n    @app.read_resource()\r\n    ...\r\n    @app.list_tools()\r\n    ...\r\n    ```\r\n\r\n    The MCP server uses a simple app pattern - create a Server instance and register handlers with decorators. Each handler maps to a specific MCP protocol operation.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2235, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3cc54cbf-1067-413b-8a7a-d705683909bb": {"__data__": {"id_": "3cc54cbf-1067-413b-8a7a-d705683909bb", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae7fb894-b0ac-4228-b550-57edc710e393", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "618bfccb92207581094a823ba5dc0d837d315ef764d10320532477368e5da63c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices\n\r\n\r\n  \r\n    ```python\r\n    try:\r\n        async with httpx.AsyncClient() as client:\r\n            response = await client.get(..., params={..., **http_params})\r\n            response.raise_for_status()\r\n    except httpx.HTTPError as e:\r\n        raise McpError(\r\n            ErrorCode.INTERNAL_ERROR,\r\n            f\"API error: {str(e)}\"\r\n        )\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    if not isinstance(args, dict) or \"city\" not in args:\r\n        raise McpError(\r\n            ErrorCode.INVALID_PARAMS,\r\n            \"Invalid forecast arguments\"\r\n        )\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    if not API_KEY:\r\n        raise ValueError(\"OPENWEATHER_API_KEY is required\")\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 694, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fab4d423-a2a6-464a-a2e8-5dea48b733e1": {"__data__": {"id_": "fab4d423-a2a6-464a-a2e8-5dea48b733e1", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "21d9b4cf-2e86-4034-9825-991968e97416", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f760857dd1513c6ffcaf79af6c7d7108447f3c4a991438cbbc64586dc4b13e97", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Available transports\n\r\nWhile this guide uses stdio transport, MCP supports additional transport options:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 106, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3dbf6370-8863-4a91-b88c-1349d4370a77": {"__data__": {"id_": "3dbf6370-8863-4a91-b88c-1349d4370a77", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f7f02eb7-8c77-4f41-9ff4-65a7a6f296e9", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c77c2da2c62815b3af298a5ad5aedbcdd606fd9915701310e39ea9a172b2d2ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "SSE (Server-Sent Events)\n\r\n```python\r\nfrom mcp.server.sse import SseServerTransport\r\nfrom starlette.applications import Starlette\r\nfrom starlette.routing import Route\r\n\r\n# Create SSE transport with endpoint\r\nsse = SseServerTransport(\"/messages\")\r\n\r\n# Handler for SSE connections\r\nasync def handle_sse(scope, receive, send):\r\n    async with sse.connect_sse(scope, receive, send) as streams:\r\n        await app.run(\r\n            streams[0], streams[1], app.create_initialization_options()\r\n        )\r\n\r\n# Handler for client messages\r\nasync def handle_messages(scope, receive, send):\r\n    await sse.handle_post_message(scope, receive, send)\r\n\r\n# Create Starlette app with routes\r\napp = Starlette(\r\n    debug=True,\r\n    routes=[\r\n        Route(\"/sse\", endpoint=handle_sse),\r\n        Route(\"/messages\", endpoint=handle_messages, methods=[\"POST\"]),\r\n    ],\r\n)\r\n\r\n# Run with any ASGI server\r\nimport uvicorn\r\nuvicorn.run(app, host=\"0.0.0.0\", port=8000)\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 951, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b3a64693-f1f0-4fc1-8cff-853e6a7d422a": {"__data__": {"id_": "b3a64693-f1f0-4fc1-8cff-853e6a7d422a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c14983c3-d499-436f-bc9c-fe3f9b8d436e", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "d30d6d6bb403ae9930eaddb2c3cfa1d89ff895edd7dc74ba778c84eed4d55654", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Advanced features\n\r\n\r\n  \r\n    The request context provides access to the current request's metadata and the active client session. Access it through `server.request_context`:\r\n\r\n    ```python\r\n    @app.call_tool()\r\n    async def call_tool(name: str, arguments: Any) -> Sequence[TextContent]:\r\n        # Access the current request context\r\n        ctx = self.request_context\r\n\r\n        # Get request metadata like progress tokens\r\n        if progress_token := ctx.meta.progressToken:\r\n            # Send progress notifications via the session\r\n            await ctx.session.send_progress_notification(\r\n                progress_token=progress_token,\r\n                progress=0.5,\r\n                total=1.0\r\n            )\r\n\r\n        # Sample from the LLM client\r\n        result = await ctx.session.create_message(\r\n            messages=[\r\n                SamplingMessage(\r\n                    role=\"user\",\r\n                    content=TextContent(\r\n                        type=\"text\",\r\n                        text=\"Analyze this weather data: \" + json.dumps(arguments)\r\n                    )\r\n                )\r\n            ],\r\n            max_tokens=100\r\n        )\r\n\r\n        return [TextContent(type=\"text\", text=result.content.text)]\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    # Cache settings\r\n    cache_timeout = timedelta(minutes=15)\r\n    last_cache_time = None\r\n    cached_weather = None\r\n\r\n    async def fetch_weather(city: str) -> dict[str, Any]:\r\n        global cached_weather, last_cache_time\r\n\r\n        now = datetime.now()\r\n        if (cached_weather is None or\r\n            last_cache_time is None or\r\n            now - last_cache_time > cache_timeout):\r\n\r\n            async with httpx.AsyncClient() as client:\r\n                response = await client.get(\r\n                    f\"{API_BASE_URL}/{CURRENT_WEATHER_ENDPOINT}\",\r\n                    params={\"q\": city, **http_params}\r\n                )\r\n                response.raise_for_status()\r\n                data = response.json()\r\n\r\n            cached_weather = {\r\n                \"temperature\": data[\"main\"][\"temp\"],\r\n                \"conditions\": data[\"weather\"][0][\"description\"],\r\n                \"humidity\": data[\"main\"][\"humidity\"],\r\n                \"wind_speed\": data[\"wind\"][\"speed\"],\r\n                \"timestamp\": datetime.now().isoformat()\r\n            }\r\n            last_cache_time = now\r\n\r\n        return cached_weather\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    @self.call_tool()\r\n    async def call_tool(self, name: str, arguments: Any) -> CallToolResult:\r\n        if progress_token := self.request_context.meta.progressToken:\r\n            # Send progress notifications\r\n            await self.request_context.session.send_progress_notification(\r\n                progress_token=progress_token,\r\n                progress=1,\r\n                total=2\r\n            )\r\n\r\n            # Fetch data...\r\n\r\n            await self.request_context.session.send_progress_notification(\r\n                progress_token=progress_token,\r\n                progress=2,\r\n                total=2\r\n            )\r\n\r\n        # Rest of the method implementation...\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    # Set up logging\r\n    logger = logging.getLogger(\"weather-server\")\r\n    logger.setLevel(logging.INFO)\r\n\r\n    @app.set_logging_level()\r\n    async def set_logging_level(level: LoggingLevel) -> EmptyResult:\r\n        logger.setLevel(level.upper())\r\n        await app.request_context.session.send_log_message(\r\n            level=\"info\",\r\n            data=f\"Log level set to {level}\",\r\n            logger=\"weather-server\"\r\n        )\r\n        return EmptyResult()\r\n\r\n    # Use logger throughout the code\r\n    # For example:\r\n    # logger.info(\"Weather data fetched successfully\")\r\n    # logger.error(f\"Error fetching weather data: {str(e)}\")\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    @app.list_resource_templates()\r\n    async def list_resource_templates() -> list[ResourceTemplate]:\r\n        return [\r\n            ResourceTemplate(\r\n                uriTemplate=\"weather://{city}/current\",\r\n                name=\"Current weather for any city\",\r\n                mimeType=\"application/json\"\r\n            )\r\n        ]\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 4167, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "78966c2b-c82e-4354-a3b6-b28123a5607b": {"__data__": {"id_": "78966c2b-c82e-4354-a3b6-b28123a5607b", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94b4de45-2e13-415c-b988-042201857c79", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "b9f0d798aa9619bedc61a29ca4bedd54b1575c3b80b153e0e461d7e8ce3e41f9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Testing\n\r\n\r\n  \r\n    Create `tests/weather_test.py`:\r\n\r\n    ```python\r\n    import pytest\r\n    import os\r\n    from unittest.mock import patch, Mock\r\n    from datetime import datetime\r\n    import json\r\n    from pydantic import AnyUrl\r\n    os.environ[\"OPENWEATHER_API_KEY\"] = \"TEST\"\r\n\r\n    from weather_service.server import (\r\n        fetch_weather,\r\n        read_resource,\r\n        call_tool,\r\n        list_resources,\r\n        list_tools,\r\n        DEFAULT_CITY\r\n    )\r\n\r\n    @pytest.fixture\r\n    def anyio_backend():\r\n        return \"asyncio\"\r\n\r\n    @pytest.fixture\r\n    def mock_weather_response():\r\n        return {\r\n            \"main\": {\r\n                \"temp\": 20.5,\r\n                \"humidity\": 65\r\n            },\r\n            \"weather\": [\r\n                {\"description\": \"scattered clouds\"}\r\n            ],\r\n            \"wind\": {\r\n                \"speed\": 3.6\r\n            }\r\n        }\r\n\r\n    @pytest.fixture\r\n    def mock_forecast_response():\r\n        return {\r\n            \"list\": [\r\n                {\r\n                    \"dt_txt\": \"2024-01-01 12:00:00\",\r\n                    \"main\": {\"temp\": 18.5},\r\n                    \"weather\": [{\"description\": \"sunny\"}]\r\n                },\r\n                {\r\n                    \"dt_txt\": \"2024-01-02 12:00:00\",\r\n                    \"main\": {\"temp\": 17.2},\r\n                    \"weather\": [{\"description\": \"cloudy\"}]\r\n                }\r\n            ]\r\n        }\r\n\r\n    @pytest.mark.anyio\r\n    async def test_fetch_weather(mock_weather_response):\r\n        with patch('requests.Session.get') as mock_get:\r\n            mock_get.return_value.json.return_value = mock_weather_response\r\n            mock_get.return_value.raise_for_status = Mock()\r\n\r\n            weather = await fetch_weather(\"London\")\r\n\r\n            assert weather[\"temperature\"] == 20.5\r\n            assert weather[\"conditions\"] == \"scattered clouds\"\r\n            assert weather[\"humidity\"] == 65\r\n            assert weather[\"wind_speed\"] == 3.6\r\n            assert \"timestamp\" in weather\r\n\r\n    @pytest.mark.anyio\r\n    async def test_read_resource():\r\n        with patch('weather_service.server.fetch_weather') as mock_fetch:\r\n            mock_fetch.return_value = {\r\n                \"temperature\": 20.5,\r\n                \"conditions\": \"clear sky\",\r\n                \"timestamp\": datetime.now().isoformat()\r\n            }\r\n\r\n            uri = AnyUrl(\"weather://London/current\")\r\n            result = await read_resource(uri)\r\n\r\n            assert isinstance(result, str)\r\n            assert \"temperature\" in result\r\n            assert \"clear sky\" in result\r\n\r\n    @pytest.mark.anyio\r\n    async def test_call_tool(mock_forecast_response):\r\n        class Response():\r\n            def raise_for_status(self):\r\n                pass\r\n\r\n            def json(self):\r\n                return mock_forecast_response\r\n\r\n        class AsyncClient():\r\n            def __aenter__(self):\r\n                return self\r\n\r\n            async def __aexit__(self, *exc_info):\r\n                pass\r\n\r\n            async def get(self, *args, **kwargs):\r\n                return Response()\r\n\r\n        with patch('httpx.AsyncClient', new=AsyncClient) as mock_client:\r\n            result = await call_tool(\"get_forecast\", {\"city\": \"London\", \"days\": 2})\r\n\r\n            assert len(result) == 1\r\n            assert result[0].type == \"text\"\r\n            forecast_data = json.loads(result[0].text)\r\n            assert len(forecast_data) == 1\r\n            assert forecast_data[0][\"temperature\"] == 18.5\r\n            assert forecast_data[0][\"conditions\"] == \"sunny\"\r\n\r\n    @pytest.mark.anyio\r\n    async def test_list_resources():\r\n        resources = await list_resources()\r\n        assert len(resources) == 1\r\n        assert resources[0].name == f\"Current weather in {DEFAULT_CITY}\"\r\n        assert resources[0].mimeType == \"application/json\"\r\n\r\n    @pytest.mark.anyio\r\n    async def test_list_tools():\r\n        tools = await list_tools()\r\n        assert len(tools) == 1\r\n        assert tools[0].name == \"get_forecast\"\r\n        assert \"city\" in tools[0].inputSchema[\"properties\"]\r\n    ```\r\n  \r\n\r\n  \r\n    ```bash\r\n    uv add --dev pytest\r\n    uv run pytest\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 4144, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d01f5efb-3102-405a-86bc-d6859bed043c": {"__data__": {"id_": "d01f5efb-3102-405a-86bc-d6859bed043c", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5e503a8-478b-4548-b8d8-746efa3bf199", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "7cad8f7ec825715dd8bbc8c68789a4a6f5c038f514ced41cef81d7fe59f4e867", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Troubleshooting", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 17, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69e0aa0d-5e63-4d9d-84ed-f4614e620b90": {"__data__": {"id_": "69e0aa0d-5e63-4d9d-84ed-f4614e620b90", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "560e6cd7-e001-4530-a256-80bd1bd2bc87", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "cfe499074962415170ecd522203fc9585a7dd194ded6c8e99cf574d9e47f254f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Installation issues\n\r\n```bash\r\n# Check Python version\r\npython --version\r\n\r\n# Reinstall dependencies\r\nuv sync --reinstall\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 127, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "055c622e-cf8a-4a50-b5fe-62c96eae1c57": {"__data__": {"id_": "055c622e-cf8a-4a50-b5fe-62c96eae1c57", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "202194d6-6c38-498b-8d35-fd14ffcc47e0", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "171d1bc4ea7ceb912db2efb83ffafa27387dd9a4302ee0b0ea0a8f102f28da8a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Type checking\n\r\n```bash\r\n# Install mypy\r\nuv add --dev pyright\r\n\r\n# Run type checker\r\nuv run pyright src\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 110, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d54418da-1242-4fc7-8d3f-c80980d26298": {"__data__": {"id_": "d54418da-1242-4fc7-8d3f-c80980d26298", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a803291-8524-4855-8d1d-6eeb52b1c1e7", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c6f34a65638e3d46a5c503d208f670eae937198d3fb6123949ec8a41d6f9fcf9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Next steps\n\r\n\r\n  \r\n    Learn more about the MCP architecture\r\n  \r\n\r\n  \r\n    Check out the Python SDK on GitHub", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 112, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f9a5e0b-5f3a-413e-a20e-a8d097668d4f": {"__data__": {"id_": "7f9a5e0b-5f3a-413e-a20e-a8d097668d4f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac67467e-f49e-4a9b-ba45-0ebc78644ec7", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "e1e678a6ef029ebcb48a7e8793cf49364aa7684dbf390c5e81025e5d04f7e791", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Quickstart\n\r\nGet started with MCP in less than 5 minutes\r\n\r\nMCP is a protocol that enables secure connections between host applications, such as Claude Desktop, and local services. In this quickstart guide, you'll learn how to:\r\n\r\n*   Set up a local SQLite database\r\n*   Connect Claude Desktop to it through MCP\r\n*   Query and analyze your data securely\r\n\r\n\r\n  While this guide focuses on using Claude Desktop as an example MCP host, the protocol is open and can be integrated by any application. IDEs, AI tools, and other software can all use MCP to connect to local integrations in a standardized way.\r\n\r\n\r\n\r\n  Claude Desktop's MCP support is currently in developer preview and only supports connecting to local MCP servers running on your machine. Remote MCP connections are not yet supported. This integration is only available in the Claude Desktop app, not the Claude web interface (claude.ai).", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 902, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "de0b63e0-5a79-4314-8f4f-250c7d468b25": {"__data__": {"id_": "de0b63e0-5a79-4314-8f4f-250c7d468b25", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "922dcff3-d45f-46a9-8e18-c102a80c2317", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a93a8e5d496eab1815c9446d4a6b2d312bead85d1f602f7da95b1c6bcb4cddfe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "How MCP works\n\r\nMCP (Model Context Protocol) is an open protocol that enables secure, controlled interactions between AI applications and local or remote resources. Let's break down how it works, then look at how we'll use it in this guide.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 242, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa2f339c-f6f6-42c4-9ae8-9a8c10a9847d": {"__data__": {"id_": "aa2f339c-f6f6-42c4-9ae8-9a8c10a9847d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87ed4747-1073-4fbc-8c80-91b3f6d54785", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "fa08110f8aec13816da9334c7a0276c4ad0bdb3a3785a6908a811c7870120176", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "General Architecture\n\r\nAt its core, MCP follows a client-server architecture where a host application can connect to multiple servers:\r\n\r\n```mermaid\r\nflowchart LR\r\n    subgraph \"Your Computer\"\r\n        Host[\"MCP Host\\n(Claude, IDEs, Tools)\"]\r\n        S1[\"MCP Server A\"]\r\n        S2[\"MCP Server B\"]\r\n        S3[\"MCP Server C\"]\r\n\r\n        Host |\"MCP Protocol\"| S1\r\n        Host |\"MCP Protocol\"| S2\r\n        Host |\"MCP Protocol\"| S3\r\n\r\n        S1  R1[(\"Local\\nResource A\")]\r\n        S2  R2[(\"Local\\nResource B\")]\r\n    end\r\n\r\n    subgraph \"Internet\"\r\n        S3 |\"Web APIs\"| R3[(\"Remote\\nResource C\")]\r\n    end\r\n```\r\n\r\n*   **MCP Hosts**: Programs like Claude Desktop, IDEs, or AI tools that want to access resources through MCP\r\n*   **MCP Clients**: Protocol clients that maintain 1:1 connections with servers\r\n*   **MCP Servers**: Lightweight programs that each expose specific capabilities through the standardized Model Context Protocol\r\n*   **Local Resources**: Your computer's resources (databases, files, services) that MCP servers can securely access\r\n*   **Remote Resources**: Resources available over the internet (e.g., through APIs) that MCP servers can connect to", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1173, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b6954c32-8a27-4123-b5eb-bb48bb352c6a": {"__data__": {"id_": "b6954c32-8a27-4123-b5eb-bb48bb352c6a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d7d1913-f4b1-4309-93a3-d76a5002942e", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "1704186f850377b196f72056e85fd84480cfc37f44f3d747c52cf42bbe7c97b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "In This Guide\n\r\nFor this quickstart, we'll implement a focused example using SQLite:\r\n\r\n```mermaid\r\nflowchart LR\r\n    subgraph \"Your Computer\"\r\n        direction LR\r\n        Claude[\"Claude Desktop\"]\r\n        MCP[\"SQLite MCP Server\"]\r\n        DB[(SQLite Database\\n~/test.db)]\r\n\r\n        Claude |\"MCP Protocol\\n(Queries & Results)\"| MCP\r\n        MCP |\"Local Access\\n(SQL Operations)\"| DB\r\n    end\r\n```\r\n\r\n1.  Claude Desktop acts as our MCP client\r\n2.  A SQLite MCP Server provides secure database access\r\n3.  Your local SQLite database stores the actual data\r\n\r\nThe communication between the SQLite MCP server and your local SQLite database happens entirely on your machine\u2014your SQLite database is not exposed to the internet. The Model Context Protocol ensures that Claude Desktop can only perform approved database operations through well-defined interfaces. This gives you a secure way to let Claude analyze and interact with your local data while maintaining complete control over what it can access.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1004, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4ab0fe13-eb80-420d-9669-223c78a0d111": {"__data__": {"id_": "4ab0fe13-eb80-420d-9669-223c78a0d111", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57d53c61-df4b-4a59-9904-55cfe4f5a355", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "399758fcc9e1ca0d25f3610926c0438b65c3953e623101152309dc03864af5a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Prerequisites\n\r\n*   macOS or Windows\r\n*   The latest version of Claude Desktop installed\r\n*   uv 0.4.18 or higher (`uv --version` to check)\r\n*   Git (`git --version` to check)\r\n*   SQLite (`sqlite3 --version` to check)\r\n\r\n\r\n  \r\n    ```bash\r\n    # Using Homebrew\r\n    brew install uv git sqlite3\r\n\r\n    # Or download directly:\r\n    # uv: https://docs.astral.sh/uv/\r\n    # Git: https://git-scm.com\r\n    # SQLite: https://www.sqlite.org/download.html\r\n    ```\r\n  \r\n\r\n  \r\n    ```powershell\r\n    # Using winget\r\n    winget install --id=astral-sh.uv -e\r\n    winget install git.git sqlite.sqlite\r\n\r\n    # Or download directly:\r\n    # uv: https://docs.astral.sh/uv/\r\n    # Git: https://git-scm.com\r\n    # SQLite: https://www.sqlite.org/download.html\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 752, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4a11928e-7b6e-4f9d-8023-d0e8182a2ba1": {"__data__": {"id_": "4a11928e-7b6e-4f9d-8023-d0e8182a2ba1", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "523d0cac-9b53-4c72-81bb-6536d99707a1", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "26fd976f6c8e4068166cca446022b5fd329b443382d86d7e3132b9f756035ce7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Installation\n\r\n\r\n  \r\n    \r\n      \r\n        Let's create a simple SQLite database for testing:\r\n\r\n        ```bash\r\n        # Create a new SQLite database\r\n        sqlite3 ~/test.db <<EOF\r\n        CREATE TABLE products (\r\n          id INTEGER PRIMARY KEY,\r\n          name TEXT,\r\n          price REAL\r\n        );\r\n\r\n        INSERT INTO products (name, price) VALUES\r\n          ('Widget', 19.99),\r\n          ('Gadget', 29.99),\r\n          ('Gizmo', 39.99),\r\n          ('Smart Watch', 199.99),\r\n          ('Wireless Earbuds', 89.99),\r\n          ('Portable Charger', 24.99),\r\n          ('Bluetooth Speaker', 79.99),\r\n          ('Phone Stand', 15.99),\r\n          ('Laptop Sleeve', 34.99),\r\n          ('Mini Drone', 299.99),\r\n          ('LED Desk Lamp', 45.99),\r\n          ('Keyboard', 129.99),\r\n          ('Mouse Pad', 12.99),\r\n          ('USB Hub', 49.99),\r\n          ('Webcam', 69.99),\r\n          ('Screen Protector', 9.99),\r\n          ('Travel Adapter', 27.99),\r\n          ('Gaming Headset', 159.99),\r\n          ('Fitness Tracker', 119.99),\r\n          ('Portable SSD', 179.99);\r\n        EOF\r\n        ```\r\n      \r\n\r\n      \r\n        Open your Claude Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor.\r\n\r\n        For example, if you have VS Code installed:\r\n\r\n        ```bash\r\n        code ~/Library/Application\\ Support/Claude/claude_desktop_config.json\r\n        ```\r\n\r\n        Add this configuration (replace YOUR\\_USERNAME with your actual username):\r\n\r\n        ```json\r\n        {\r\n          \"mcpServers\": {\r\n            \"sqlite\": {\r\n              \"command\": \"uvx\",\r\n              \"args\": [\"mcp-server-sqlite\", \"--db-path\", \"/Users/YOUR_USERNAME/test.db\"]\r\n            }\r\n          }\r\n        }\r\n        ```\r\n\r\n        This tells Claude Desktop:\r\n\r\n        1.  There's an MCP server named \"sqlite\"\r\n        2.  Launch it by running `uvx mcp-server-sqlite`\r\n        3.  Connect it to your test database\r\n\r\n        Save the file, and restart **Claude Desktop**.\r\n      \r\n    \r\n  \r\n\r\n  \r\n    \r\n      \r\n        Let's create a simple SQLite database for testing:\r\n\r\n        ```powershell\r\n        # Create a new SQLite database\r\n        $sql = @'\r\n        CREATE TABLE products (\r\n          id INTEGER PRIMARY KEY,\r\n          name TEXT,\r\n          price REAL\r\n        );\r\n\r\n        INSERT INTO products (name, price) VALUES\r\n          ('Widget', 19.99),\r\n          ('Gadget', 29.99),\r\n          ('Gizmo', 39.99),\r\n          ('Smart Watch', 199.99),\r\n          ('Wireless Earbuds', 89.99),\r\n          ('Portable Charger', 24.99),\r\n          ('Bluetooth Speaker', 79.99),\r\n          ('Phone Stand', 15.99),\r\n          ('Laptop Sleeve', 34.99),\r\n          ('Mini Drone', 299.99),\r\n          ('LED Desk Lamp', 45.99),\r\n          ('Keyboard', 129.99),\r\n          ('Mouse Pad', 12.99),\r\n          ('USB Hub', 49.99),\r\n          ('Webcam', 69.99),\r\n          ('Screen Protector', 9.99),\r\n          ('Travel Adapter', 27.99),\r\n          ('Gaming Headset', 159.99),\r\n          ('Fitness Tracker', 119.99),\r\n          ('Portable SSD', 179.99);\r\n        '@\r\n\r\n        cd ~\r\n        & sqlite3 test.db $sql\r\n        ```\r\n      \r\n\r\n      \r\n        Open your Claude Desktop App configuration at `%APPDATA%\\Claude\\claude_desktop_config.json` in a text editor.\r\n\r\n        For example, if you have VS Code installed:\r\n\r\n        ```powershell\r\n        code $env:AppData\\Claude\\claude_desktop_config.json\r\n        ```\r\n\r\n        Add this configuration (replace YOUR\\_USERNAME with your actual username):\r\n\r\n        ```json\r\n        {\r\n          \"mcpServers\": {\r\n            \"sqlite\": {\r\n              \"command\": \"uvx\",\r\n              \"args\": [\r\n                \"mcp-server-sqlite\",\r\n                \"--db-path\",\r\n                \"C:\\\\Users\\\\YOUR_USERNAME\\\\test.db\"\r\n              ]\r\n            }\r\n          }\r\n        }\r\n        ```\r\n\r\n        This tells Claude Desktop:\r\n\r\n        1.  There's an MCP server named \"sqlite\"\r\n        2.  Launch it by running `uvx mcp-server-sqlite`\r\n        3.  Connect it to your test database\r\n\r\n        Save the file, and restart **Claude Desktop**.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 4119, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "faefa5eb-a1de-480c-a0f1-915a015ae2f6": {"__data__": {"id_": "faefa5eb-a1de-480c-a0f1-915a015ae2f6", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a64535dd-4a97-4860-b5f0-708358508c1d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "ad42548c84efdcc3c5f14584e1857702fc2e343edb62021eb301c96b13120694", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Test it out\n\r\nLet's verify everything is working. Try sending this prompt to Claude Desktop:\r\n\r\n```\r\nCan you connect to my SQLite database and tell me what products are available, and their prices?\r\n```\r\n\r\nClaude Desktop will:\r\n\r\n1.  Connect to the SQLite MCP server\r\n2.  Query your local database\r\n3.  Format and present the results", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 335, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b39f3ad7-d703-43f3-a70e-3246f745796a": {"__data__": {"id_": "b39f3ad7-d703-43f3-a70e-3246f745796a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5094cab-bb02-4365-9145-ad1ae902ae4b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "535eb9ff8c3a557a3b05693dfe07519f236dbcb01593a41032a532ce36a4baa6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "What's happening under the hood?\n\r\nWhen you interact with Claude Desktop using MCP:\r\n\r\n1.  **Server Discovery**: Claude Desktop connects to your configured MCP servers on startup\r\n\r\n2.  **Protocol Handshake**: When you ask about data, Claude Desktop:\r\n    *   Identifies which MCP server can help (sqlite in this case)\r\n    *   Negotiates capabilities through the protocol\r\n    *   Requests data or actions from the MCP server\r\n\r\n3.  **Interaction Flow**:\r\n    ```mermaid\r\n    sequenceDiagram\r\n        participant C as Claude Desktop\r\n        participant M as MCP Server\r\n        participant D as SQLite DB\r\n\r\n        C->>M: Initialize connection\r\n        M-->>C: Available capabilities\r\n\r\n        C->>M: Query request\r\n        M->>D: SQL query\r\n        D-->>M: Results\r\n        M-->>C: Formatted results\r\n    ```\r\n\r\n4.  **Security**:\r\n    *   MCP servers only expose specific, controlled capabilities\r\n    *   MCP servers run locally on your machine, and the resources they access are not exposed to the internet\r\n    *   Claude Desktop requires user confirmation for sensitive operations", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1091, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73b9900e-3a87-4ec1-b8eb-7cd4bbbd3f68": {"__data__": {"id_": "73b9900e-3a87-4ec1-b8eb-7cd4bbbd3f68", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "46719a54-a341-4b3f-9b3d-51c93158d62f", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a3af8279d643dc48ecf305230630b7a5d95b209d07ed41698120c8595ccd34d1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Try these examples\n\r\nNow that MCP is working, try these increasingly powerful examples:\r\n\r\n\r\n  \r\n    ```\r\n    What's the average price of all products in the database?\r\n    ```\r\n  \r\n\r\n  \r\n    ```\r\n    Can you analyze the price distribution and suggest any pricing optimizations?\r\n    ```\r\n  \r\n\r\n  \r\n    ```\r\n    Could you help me design and create a new table for storing customer orders?\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7cebd59e-b0e0-4414-920f-febf4ccf025f": {"__data__": {"id_": "7cebd59e-b0e0-4414-920f-febf4ccf025f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4c4343f-9f0e-4fc6-8cde-fc09d8d4e4ae", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "833d5003c5c33ca796789a9a4677aa398520f81ba5e1f8ca3e1df9803b0175f6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Add more capabilities\n\r\nWant to give Claude Desktop more local integration capabilities? Add these servers to your configuration:\r\n\r\n\r\n  Note that these MCP servers will require Node.js to be installed on your machine.\r\n\r\n\r\n\r\n  \r\n    Add this to your config to let Claude Desktop read and analyze files:\r\n\r\n    ```json\r\n    \"filesystem\": {\r\n      \"command\": \"npx\",\r\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/Users/YOUR_USERNAME/Desktop\"]\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    Connect Claude Desktop to your PostgreSQL database:\r\n\r\n    ```json\r\n    \"postgres\": {\r\n      \"command\": \"npx\",\r\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\r\n    }\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 715, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2a4a365c-ed8e-4f7c-b389-d529aa2cd99f": {"__data__": {"id_": "2a4a365c-ed8e-4f7c-b389-d529aa2cd99f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a417b631-a8ac-4471-bbba-6611d21409bd", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "60aa4670b571234c528ff879352559648bf2193c3858ab405ffb573acb4c557a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "More MCP Clients\n\r\nWhile this guide demonstrates MCP using Claude Desktop as a client, several other applications support MCP integration:\r\n\r\n\r\n  \r\n    A high-performance, multiplayer code editor with built-in MCP support for AI-powered coding assistance\r\n  \r\n\r\n  \r\n    Code intelligence platform featuring MCP integration for enhanced code search and analysis capabilities\r\n  \r\n\r\n\r\nEach host application may implement MCP features differently or support different capabilities. Check their respective documentation for specific setup instructions and supported features.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 573, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6770f799-fba6-40e1-a721-94f441a2d7e9": {"__data__": {"id_": "6770f799-fba6-40e1-a721-94f441a2d7e9", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "676e96c3-9e3e-475b-97bf-ed28b9cf5c3b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "688853da28e0fddad9a5ca2b55acdcad3744475e23821393d693acca28a1262b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Troubleshooting\n\r\n\r\n  \r\n    1.  Check if MCP is enabled:\r\n        *   Click the \ud83d\udd0c icon in Claude Desktop, next to the chat box\r\n        *   Expand \"Installed MCP Servers\"\r\n        *   You should see your configured servers\r\n\r\n    2.  Verify your config:\r\n        *   From Claude Desktop, go to Claude > Settings\u2026\r\n        *   Open the \"Developer\" tab to see your configuration\r\n\r\n    3.  Restart Claude Desktop completely:\r\n        *   Quit the app (not just close the window)\r\n        *   Start it again\r\n  \r\n\r\n  \r\n    1.  Check Claude Desktop's logs:\r\n        ```bash\r\n        tail -n 20 -f ~/Library/Logs/Claude/mcp*.log\r\n        ```\r\n\r\n    2.  Verify database access:\r\n        ```bash\r\n        # Test database connection\r\n        sqlite3 ~/test.db \".tables\"\r\n        ```\r\n\r\n    3.  Common fixes:\r\n        *   Check file paths in your config\r\n        *   Verify database file permissions\r\n        *   Ensure SQLite is installed properly", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 941, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0ed207eb-d1c8-43da-8937-b6338ac1282d": {"__data__": {"id_": "0ed207eb-d1c8-43da-8937-b6338ac1282d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "24dfb47b-3694-44cf-8f36-6c25d0b70135", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c0bf8f4fe18e57bc949095523c39b9dc33e0aee71164a99766d062c0d53bbcb1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Next steps\n\r\n\r\n  \r\n    Create your own MCP servers to give your LLM clients new capabilities.\r\n  \r\n\r\n  \r\n    Browse our collection of example servers to see what's possible.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 175, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9a02158d-8d11-46de-a952-f8404936da61": {"__data__": {"id_": "9a02158d-8d11-46de-a952-f8404936da61", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b76a792-4f4c-406b-bc68-d89d1bfe1222", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "caefcc94992a35134f85c3e977a417e102b33edb261904c39ecc2eba5e4bb09f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Resources\n\r\nExpose data and content from your servers to LLMs\r\n\r\nResources are a core primitive in the Model Context Protocol (MCP) that allow servers to expose data and content that can be read by clients and used as context for LLM interactions.\r\n\r\n\r\n  Resources are designed to be **application-controlled**, meaning that the client application can decide how and when they should be used.\r\n  Different MCP clients may handle resources differently. For example:\r\n\r\n  *   Claude Desktop currently requires users to explicitly select resources before they can be used\r\n  *   Other clients might automatically select resources based on heuristics\r\n  *   Some implementations may even allow the AI model itself to determine which resources to use\r\n\r\n  Server authors should be prepared to handle any of these interaction patterns when implementing resource support. In order to expose data to models automatically, server authors should use a **model-controlled** primitive such as Tools.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 989, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e7504596-30f7-4fb3-a61b-988df99ef1cd": {"__data__": {"id_": "e7504596-30f7-4fb3-a61b-988df99ef1cd", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1fe207c7-1ea5-4d16-b5af-e647cdaccf68", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "20000a603646078577fcfd7c3d441f4be6de9989777c1c95b0b677f9edaca5ad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Overview\n\r\nResources represent any kind of data that an MCP server wants to make available to clients. This can include:\r\n\r\n*   File contents\r\n*   Database records\r\n*   API responses\r\n*   Live system data\r\n*   Screenshots and images\r\n*   Log files\r\n*   And more\r\n\r\nEach resource is identified by a unique URI and can contain either text or binary data.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 354, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7b701d84-6166-4fda-ace9-5701c32fc881": {"__data__": {"id_": "7b701d84-6166-4fda-ace9-5701c32fc881", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a238ed18-5ddc-45b5-826b-c50fcf6cc9d0", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "415d873bb51c33d61a956684cf2c6e1efdc9f2a67eb12c57dd2cec7c5d395fba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Resource URIs\n\r\nResources are identified using URIs that follow this format:\r\n\r\n```\r\n[protocol]://[host]/[path]\r\n```\r\n\r\nFor example:\r\n\r\n*   `file:///home/user/documents/report.pdf`\r\n*   `postgres://database/customers/schema`\r\n*   `screen://localhost/display1`\r\n\r\nThe protocol and path structure is defined by the MCP server implementation. Servers can define their own custom URI schemes.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 390, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "af3140b4-a51b-4618-9d79-e0b7d1a87638": {"__data__": {"id_": "af3140b4-a51b-4618-9d79-e0b7d1a87638", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d1c5909-e638-43b5-b702-618cec4a8970", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "ff8c01d5583a6f81ed489d2578fe9f62569a1e0a32ad4675b93b1a7bbb06bb53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Resource types\n\r\nResources can contain two types of content:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 62, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "60d7476b-cf48-473e-bac5-fb1fea7e7df8": {"__data__": {"id_": "60d7476b-cf48-473e-bac5-fb1fea7e7df8", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3728fd48-a72e-4028-a8a2-253e3bc30ecc", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c628441429955077e733893254f99b1ed79147b3fbafbb56fdae422df817348b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Text resources\n\r\nText resources contain UTF-8 encoded text data. These are suitable for:\r\n\r\n*   Source code\r\n*   Configuration files\r\n*   Log files\r\n*   JSON/XML data\r\n*   Plain text", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 184, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "462ee74d-d77f-49f7-b2f8-bac1fee4d772": {"__data__": {"id_": "462ee74d-d77f-49f7-b2f8-bac1fee4d772", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73d15744-b514-442d-82d0-3b54e9c138e9", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "3f452414cb0e6fb2149bb9b4728abdf2adec6d86d17336f67111249a81995845", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Binary resources\n\r\nBinary resources contain raw binary data encoded in base64. These are suitable for:\r\n\r\n*   Images\r\n*   PDFs\r\n*   Audio files\r\n*   Video files\r\n*   Other non-text formats", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 190, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "146fa74c-c442-4f8b-999b-a8f76572f71b": {"__data__": {"id_": "146fa74c-c442-4f8b-999b-a8f76572f71b", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0c86139-b721-4f87-a98e-47b0cf7665c9", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "0c02b22fe914589c1375f37ad27682b81fb2ee6ae2c34543a7eda2069631f2ef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Resource discovery\n\r\nClients can discover available resources through two main methods:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 89, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "85979e22-39ac-48da-bdae-bf38a0ca84a4": {"__data__": {"id_": "85979e22-39ac-48da-bdae-bf38a0ca84a4", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c85a4f75-6d24-4182-ae5d-7a920fe6bc89", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "434d04150f9d12bc1a24d7e154c69a41e3cd5109c35c09f1e342360aa54b7d6e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Direct resources\n\r\nServers expose a list of concrete resources via the `resources/list` endpoint. Each resource includes:\r\n\r\n```typescript\r\n{\r\n  uri: string;           // Unique identifier for the resource\r\n  name: string;          // Human-readable name\r\n  description?: string;  // Optional description\r\n  mimeType?: string;     // Optional MIME type\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 362, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7a19de45-4b7b-44bb-a85c-f68256c0acc2": {"__data__": {"id_": "7a19de45-4b7b-44bb-a85c-f68256c0acc2", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72d06ab8-952b-4494-8c0e-34a0b0e0144f", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "3050e6623ffcadb453e2f004484c0f521b9ee65e64d8aca9f070e4f71939864c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Resource templates\n\r\nFor dynamic resources, servers can expose URI templates that clients can use to construct valid resource URIs:\r\n\r\n```typescript\r\n{\r\n  uriTemplate: string;   // URI template following RFC 6570\r\n  name: string;          // Human-readable name for this type\r\n  description?: string;  // Optional description\r\n  mimeType?: string;     // Optional MIME type for all matching resources\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 410, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "19e58b01-1807-4bb2-ac2c-b958f1168d01": {"__data__": {"id_": "19e58b01-1807-4bb2-ac2c-b958f1168d01", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d4b0ca0-2d14-4011-8bb1-b5a0a51ae27d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "ec55c3ca226ab11c7929b4c75c5bd19adbc794abf3a78726ed78eec870c502d6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Reading resources\n\r\nTo read a resource, clients make a `resources/read` request with the resource URI.\r\n\r\nThe server responds with a list of resource contents:\r\n\r\n```typescript\r\n{\r\n  contents: [\r\n    {\r\n      uri: string;        // The URI of the resource\r\n      mimeType?: string;  // Optional MIME type\r\n\r\n      // One of:\r\n      text?: string;      // For text resources\r\n      blob?: string;      // For binary resources (base64 encoded)\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n\r\n  Servers may return multiple resources in response to one `resources/read` request. This could be used, for example, to return a list of files inside a directory when the directory is read.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 659, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f7b8222-5087-4e3f-b714-4a234b5fd3fd": {"__data__": {"id_": "6f7b8222-5087-4e3f-b714-4a234b5fd3fd", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d68bc248-2499-42e1-b497-dda25de5dd68", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "989d687f660333d8ad8b62cec4be7df1eac064ae204fbf1d38fa728a36bdbab7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Resource updates\n\r\nMCP supports real-time updates for resources through two mechanisms:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 89, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8e765eca-f59b-452f-b5d6-d8c02030db55": {"__data__": {"id_": "8e765eca-f59b-452f-b5d6-d8c02030db55", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29e37942-eaec-4407-b57d-5d9403c4ee37", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "301e39ea87c2faea59ba7e4193781f93369a4f4ec8214923f739681fe1678827", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "List changes\n\r\nServers can notify clients when their list of available resources changes via the `notifications/resources/list_changed` notification.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 151, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "34c9b810-0bab-4838-9ab1-6607923aed92": {"__data__": {"id_": "34c9b810-0bab-4838-9ab1-6607923aed92", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86098e8f-0111-43de-92f7-3f4a67e24525", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "e6cf6fedccbc8f1a1aaae6387bc96aafae079b9f0d70ad5d9874f025a337d3a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Content changes\n\r\nClients can subscribe to updates for specific resources:\r\n\r\n1.  Client sends `resources/subscribe` with resource URI\r\n2.  Server sends `notifications/resources/updated` when the resource changes\r\n3.  Client can fetch latest content with `resources/read`\r\n4.  Client can unsubscribe with `resources/unsubscribe`", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 330, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "abf3ccfd-6397-41cd-9725-cafc50215058": {"__data__": {"id_": "abf3ccfd-6397-41cd-9725-cafc50215058", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5b39789-ed3e-441b-875d-b88261af2ba5", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "cb7ac20e0a94d1aee77b72d4532168a708371263d6b30281b12054cd34a3bd7e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Example implementation\n\r\nHere's a simple example of implementing resource support in an MCP server:\r\n\r\n\r\n  \r\n    ```typescript\r\n    const server = new Server({\r\n      name: \"example-server\",\r\n      version: \"1.0.0\"\r\n    }, {\r\n      capabilities: {\r\n        resources: {}\r\n      }\r\n    });\r\n\r\n    // List available resources\r\n    server.setRequestHandler(ListResourcesRequestSchema, async () => {\r\n      return {\r\n        resources: [\r\n          {\r\n            uri: \"file:///logs/app.log\",\r\n            name: \"Application Logs\",\r\n            mimeType: \"text/plain\"\r\n          }\r\n        ]\r\n      };\r\n    });\r\n\r\n    // Read resource contents\r\n    server.setRequestHandler(ReadResourceRequestSchema, async (request) => {\r\n      const uri = request.params.uri;\r\n\r\n      if (uri === \"file:///logs/app.log\") {\r\n        const logContents = await readLogFile();\r\n        return {\r\n          contents: [\r\n            {\r\n              uri,\r\n              mimeType: \"text/plain\",\r\n              text: logContents\r\n            }\r\n          ]\r\n        };\r\n      }\r\n\r\n      throw new Error(\"Resource not found\");\r\n    });\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    app = Server(\"example-server\")\r\n\r\n    @app.list_resources()\r\n    async def list_resources() -> list[types.Resource]:\r\n        return [\r\n            types.Resource(\r\n                uri=\"file:///logs/app.log\",\r\n                name=\"Application Logs\",\r\n                mimeType=\"text/plain\"\r\n            )\r\n        ]\r\n\r\n    @app.read_resource()\r\n    async def read_resource(uri: AnyUrl) -> str:\r\n        if str(uri) == \"file:///logs/app.log\":\r\n            log_contents = await read_log_file()\r\n            return log_contents\r\n\r\n        raise ValueError(\"Resource not found\")\r\n\r\n    # Start server\r\n    async with stdio_server() as streams:\r\n        await app.run(\r\n            streams[0],\r\n            streams[1],\r\n            app.create_initialization_options()\r\n        )\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1931, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f8b78cb2-9c46-42ca-b402-1699a802f609": {"__data__": {"id_": "f8b78cb2-9c46-42ca-b402-1699a802f609", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94c53122-0a62-418b-a234-a09c1083d0b0", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c67051a0577c8e02895a2aca3fe1306848c21a011d3a24446fa7b95f80aaca96", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices\n\r\nWhen implementing resource support:\r\n\r\n1.  Use clear, descriptive resource names and URIs\r\n2.  Include helpful descriptions to guide LLM understanding\r\n3.  Set appropriate MIME types when known\r\n4.  Implement resource templates for dynamic content\r\n5.  Use subscriptions for frequently changing resources\r\n6.  Handle errors gracefully with clear error messages\r\n7.  Consider pagination for large resource lists\r\n8.  Cache resource contents when appropriate\r\n9.  Validate URIs before processing\r\n10. Document your custom URI schemes", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 550, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8309e946-9aa8-4e54-99e5-48665be09c35": {"__data__": {"id_": "8309e946-9aa8-4e54-99e5-48665be09c35", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f7ada60-85e8-4c29-9311-f38624912487", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "24b9b2ccc47181f38b76eece97ac4f710da5e684007fd0cc69b0e33babf3d656", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security considerations\n\r\nWhen exposing resources:\r\n\r\n*   Validate all resource URIs\r\n*   Implement appropriate access controls\r\n*   Sanitize file paths to prevent directory traversal\r\n*   Be cautious with binary data handling\r\n*   Consider rate limiting for resource reads\r\n*   Audit resource access\r\n*   Encrypt sensitive data in transit\r\n*   Validate MIME types\r\n*   Implement timeouts for long-running reads\r\n*   Handle resource cleanup appropriately", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 456, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c37af261-29ad-4ee4-9b97-6ce2fb507e34": {"__data__": {"id_": "c37af261-29ad-4ee4-9b97-6ce2fb507e34", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d1379ec-a3a7-45dc-9fcd-593f556e412d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a24aa09a9b3468a591c9cb11fc805e7aece7379394840cb92fd25fa749f737c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sampling\n\r\nLet your servers request completions from LLMs\r\n\r\nSampling is a powerful MCP feature that allows servers to request LLM completions through the client, enabling sophisticated agentic behaviors while maintaining security and privacy.\r\n\r\n\r\n  This feature of MCP is not yet supported in the Claude Desktop client.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 323, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b235286f-b165-47f7-8f71-74cdc7b6ade3": {"__data__": {"id_": "b235286f-b165-47f7-8f71-74cdc7b6ade3", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51d02de8-dc42-44ef-9ffb-d354f030dd46", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "08f856f62375f75a9d5925a015214ac9e1a8263543deb9535e915952fac84345", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "How sampling works\n\r\nThe sampling flow follows these steps:\r\n\r\n1.  Server sends a `sampling/createMessage` request to the client\r\n2.  Client reviews the request and can modify it\r\n3.  Client samples from an LLM\r\n4.  Client reviews the completion\r\n5.  Client returns the result to the server\r\n\r\nThis human-in-the-loop design ensures users maintain control over what the LLM sees and generates.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 394, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e844280-66b2-4a4a-903f-0439390e372d": {"__data__": {"id_": "9e844280-66b2-4a4a-903f-0439390e372d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "65d88e18-bbfb-4f81-843d-30469e264cf7", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c73cbd8ae41d4245ecd2b3c2737e67cfcf5dcb35144ef0a256db3eae8c458e10", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Message format\n\r\nSampling requests use a standardized message format:\r\n\r\n```typescript\r\n{\r\n  messages: [\r\n    {\r\n      role: \"user\" | \"assistant\",\r\n      content: {\r\n        type: \"text\" | \"image\",\r\n\r\n        // For text:\r\n        text?: string,\r\n\r\n        // For images:\r\n        data?: string,             // base64 encoded\r\n        mimeType?: string\r\n      }\r\n    }\r\n  ],\r\n  modelPreferences?: {\r\n    hints?: [{\r\n      name?: string                // Suggested model name/family\r\n    }],\r\n    costPriority?: number,         // 0-1, importance of minimizing cost\r\n    speedPriority?: number,        // 0-1, importance of low latency\r\n    intelligencePriority?: number  // 0-1, importance of capabilities\r\n  },\r\n  systemPrompt?: string,\r\n  includeContext?: \"none\" | \"thisServer\" | \"allServers\",\r\n  temperature?: number,\r\n  maxTokens: number,\r\n  stopSequences?: string[],\r\n  metadata?: Record\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 902, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8a240d04-5e7c-4339-ba30-988f23419277": {"__data__": {"id_": "8a240d04-5e7c-4339-ba30-988f23419277", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "61999da8-d939-4d3b-9847-0ecb272a1495", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8135de69a260df8a30af40f9299587b9195ae797ea9421f2bcc062f15956df6c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Request parameters", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 20, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0474504a-862a-42c1-b115-f276e78e0b6f": {"__data__": {"id_": "0474504a-862a-42c1-b115-f276e78e0b6f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77e3bdc9-26d6-4577-bc90-796919c7ac00", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "3c834a6172591b302dba20d3c87925e42ef62900d156ad063bd80d5c6d279af2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Messages\n\r\nThe `messages` array contains the conversation history to send to the LLM. Each message has:\r\n\r\n*   `role`: Either \"user\" or \"assistant\"\r\n*   `content`: The message content, which can be:\r\n    *   Text content with a `text` field\r\n    *   Image content with `data` (base64) and `mimeType` fields", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 308, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6166d6fd-973c-43bd-9aff-7834d8686059": {"__data__": {"id_": "6166d6fd-973c-43bd-9aff-7834d8686059", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e978e5a-a9e7-4bdf-8590-02f74352172e", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a6109a695ce6e13763cba594e655307356b5dd64c8eec68c0368b7af8cd340e8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Model preferences\n\r\nThe `modelPreferences` object allows servers to specify their model selection preferences:\r\n\r\n*   `hints`: Array of model name suggestions that clients can use to select an appropriate model:\r\n    *   `name`: String that can match full or partial model names (e.g. \"claude-3\", \"sonnet\")\r\n    *   Clients may map hints to equivalent models from different providers\r\n    *   Multiple hints are evaluated in preference order\r\n\r\n*   Priority values (0-1 normalized):\r\n    *   `costPriority`: Importance of minimizing costs\r\n    *   `speedPriority`: Importance of low latency response\r\n    *   `intelligencePriority`: Importance of advanced model capabilities\r\n\r\nClients make the final model selection based on these preferences and their available models.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d94bf21a-8365-4ed4-9b98-18b7c695607b": {"__data__": {"id_": "d94bf21a-8365-4ed4-9b98-18b7c695607b", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a999f13-7735-4fba-8302-728cfb93364c", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "cc320f36fc0826376fca64fdc2a7bfa6def1860f73d6d745d12e104478df0caf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "System prompt\n\r\nAn optional `systemPrompt` field allows servers to request a specific system prompt. The client may modify or ignore this.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 140, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73bb49b5-b406-475e-880f-0036f9acdbe0": {"__data__": {"id_": "73bb49b5-b406-475e-880f-0036f9acdbe0", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c6a2a30-1ca3-4ff3-a3ac-d7ef75e47e27", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "55532cf2ed31ae55f3c165836f0a33f0598973bf9b4b2755cba6821762be7a75", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Context inclusion\n\r\nThe `includeContext` parameter specifies what MCP context to include:\r\n\r\n*   `\"none\"`: No additional context\r\n*   `\"thisServer\"`: Include context from the requesting server\r\n*   `\"allServers\"`: Include context from all connected MCP servers\r\n\r\nThe client controls what context is actually included.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 320, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca43dbcb-d727-4165-8edb-05c0d1aa2293": {"__data__": {"id_": "ca43dbcb-d727-4165-8edb-05c0d1aa2293", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc499ba4-9259-4e59-b844-96d8b1eeee69", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "26bea9c9fc75cdb870a8f8eca756c59aa7183d0511ff23d9ddab0b9c7dc10194", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sampling parameters\n\r\nFine-tune the LLM sampling with:\r\n\r\n*   `temperature`: Controls randomness (0.0 to 1.0)\r\n*   `maxTokens`: Maximum tokens to generate\r\n*   `stopSequences`: Array of sequences that stop generation\r\n*   `metadata`: Additional provider-specific parameters", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 275, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "574cc3f9-4d9d-456e-9760-27e9e2339053": {"__data__": {"id_": "574cc3f9-4d9d-456e-9760-27e9e2339053", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10221894-99bd-48a8-af53-e01f8ff35f89", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "3bd707f25c22b830b44ece33cd0cd9916a40a74e004ac8548cb0d4663afbed39", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Response format\n\r\nThe client returns a completion result:\r\n\r\n```typescript\r\n{\r\n  model: string,  // Name of the model used\r\n  stopReason?: \"endTurn\" | \"stopSequence\" | \"maxTokens\" | string,\r\n  role: \"user\" | \"assistant\",\r\n  content: {\r\n    type: \"text\" | \"image\",\r\n    text?: string,\r\n    data?: string,\r\n    mimeType?: string\r\n  }\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 341, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5e1b4a63-8d44-4848-8253-685bfd529f9f": {"__data__": {"id_": "5e1b4a63-8d44-4848-8253-685bfd529f9f", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b01b5cec-e13c-4dbe-8330-027585a0a953", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "0ea86f09c3ae2fb8c47aa92701c6a145e1832955f834bb8ec1105a872f121729", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Example request\n\r\nHere's an example of requesting sampling from a client:\r\n\r\n```json\r\n{\r\n  \"method\": \"sampling/createMessage\",\r\n  \"params\": {\r\n    \"messages\": [\r\n      {\r\n        \"role\": \"user\",\r\n        \"content\": {\r\n          \"type\": \"text\",\r\n          \"text\": \"What files are in the current directory?\"\r\n        }\r\n      }\r\n    ],\r\n    \"systemPrompt\": \"You are a helpful file system assistant.\",\r\n    \"includeContext\": \"thisServer\",\r\n    \"maxTokens\": 100\r\n  }\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 472, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab0d0a99-0c00-47eb-aebc-9e43375603a3": {"__data__": {"id_": "ab0d0a99-0c00-47eb-aebc-9e43375603a3", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fb7440ec-0750-400c-a94a-3b0445ede4bc", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "5c9527033da354224a2e54c035ee434db4c03b59cb1d0415b9d95e528f03e280", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices\n\r\nWhen implementing sampling:\r\n\r\n1.  Always provide clear, well-structured prompts\r\n2.  Handle both text and image content appropriately\r\n3.  Set reasonable token limits\r\n4.  Include relevant context through `includeContext`\r\n5.  Validate responses before using them\r\n6.  Handle errors gracefully\r\n7.  Consider rate limiting sampling requests\r\n8.  Document expected sampling behavior\r\n9.  Test with various model parameters\r\n10. Monitor sampling costs", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 468, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b3d7d85-e78c-43f1-b025-06d4079ba738": {"__data__": {"id_": "4b3d7d85-e78c-43f1-b025-06d4079ba738", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1956cde6-bf60-44b2-b020-77e3b2133e3d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "3c6e3201b097ced7b4d83243cc87eba3978252304eb65989b6671a39d6e4a9f9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Human in the loop controls\n\r\nSampling is designed with human oversight in mind:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 81, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2bd74a2-8c59-4bbf-a45a-1ab290836855": {"__data__": {"id_": "b2bd74a2-8c59-4bbf-a45a-1ab290836855", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c367460d-d277-4a9d-828a-e78fc4212b1e", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "96159c25df993ad55f79744c149483eaaf818df32059d235f2f6e63d898f205e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "For prompts\n\r\n*   Clients should show users the proposed prompt\r\n*   Users should be able to modify or reject prompts\r\n*   System prompts can be filtered or modified\r\n*   Context inclusion is controlled by the client", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 218, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "15d1e7d8-b7e1-4d8f-841e-7f3bceea7dcb": {"__data__": {"id_": "15d1e7d8-b7e1-4d8f-841e-7f3bceea7dcb", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "220b9d46-cadf-4242-8699-a214cd9d0e9c", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "ec33a66008aec954410ee07206c5f9c074db58e82caacaecd90c8abcc237251b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "For completions\n\r\n*   Clients should show users the completion\r\n*   Users should be able to modify or reject completions\r\n*   Clients can filter or modify completions\r\n*   Users control which model is used", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 207, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "59231042-98f2-4000-baf8-49adb607a7cf": {"__data__": {"id_": "59231042-98f2-4000-baf8-49adb607a7cf", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c167640f-f167-40e9-a724-59758cc1d39b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "382de7880adb4fd1d712605abe00520c3ed247f96b84721eb22ad706eda71d16", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security considerations\n\r\nWhen implementing sampling:\r\n\r\n*   Validate all message content\r\n*   Sanitize sensitive information\r\n*   Implement appropriate rate limits\r\n*   Monitor sampling usage\r\n*   Encrypt data in transit\r\n*   Handle user data privacy\r\n*   Audit sampling requests\r\n*   Control cost exposure\r\n*   Implement timeouts\r\n*   Handle model errors gracefully", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 369, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69e22506-9f4c-480c-8742-1c3ec5ba94da": {"__data__": {"id_": "69e22506-9f4c-480c-8742-1c3ec5ba94da", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e464e1d-c62b-4b2a-9d6a-9827b6b8c014", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "e0e25de437deb299801d46ee370e28ddf1290333bad53318e51a0741f171a1ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Common patterns", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 17, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "078c98c1-e9b3-4669-97a1-63dea5d8699a": {"__data__": {"id_": "078c98c1-e9b3-4669-97a1-63dea5d8699a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ef2a78e-fc88-493e-ba17-7a48c25345c2", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f72cb5f5f1a1643236296987cd324b8575cd189edeb6d6b7bdbcd6c909cdb574", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Agentic workflows\n\r\nSampling enables agentic patterns like:\r\n\r\n*   Reading and analyzing resources\r\n*   Making decisions based on context\r\n*   Generating structured data\r\n*   Handling multi-step tasks\r\n*   Providing interactive assistance", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 240, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d6d3b4c6-f165-4c30-b486-c49b732a49b2": {"__data__": {"id_": "d6d3b4c6-f165-4c30-b486-c49b732a49b2", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5312dc11-6db6-435e-80e0-3eef52a8cf86", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "c5375cee416cb7561453269c1918c3d285e819cf65fee6fb72240ddf285c7e99", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Context management\n\r\nBest practices for context:\r\n\r\n*   Request minimal necessary context\r\n*   Structure context clearly\r\n*   Handle context size limits\r\n*   Update context as needed\r\n*   Clean up stale context", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 212, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "07b7eb2d-a6d1-4729-8982-d199fa693b7e": {"__data__": {"id_": "07b7eb2d-a6d1-4729-8982-d199fa693b7e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05d87d3c-6257-4d80-8131-0bb1fa956cac", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "6febaf51e386d9a14c47c853759042e75ce50cb24eff32d93dc0df6693619541", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Error handling\n\r\nRobust error handling should:\r\n\r\n*   Catch sampling failures\r\n*   Handle timeout errors\r\n*   Manage rate limits\r\n*   Validate responses\r\n*   Provide fallback behaviors\r\n*   Log errors appropriately", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 216, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f7d77b86-36eb-4d2a-adcb-a07e3c36a49c": {"__data__": {"id_": "f7d77b86-36eb-4d2a-adcb-a07e3c36a49c", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54368674-c124-45c1-ae78-513abdc5834d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "66c582c8d743b4d27d88444d58e42cb64a91e6d493c08e2a75da7b50d5345d1d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Limitations\n\r\nBe aware of these limitations:\r\n\r\n*   Sampling depends on client capabilities\r\n*   Users control sampling behavior\r\n*   Context size has limits\r\n*   Rate limits may apply\r\n*   Costs should be considered\r\n*   Model availability varies\r\n*   Response times vary\r\n*   Not all content types supported", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 311, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "be67a91c-3143-40ed-83dd-f58c88fb5e6c": {"__data__": {"id_": "be67a91c-3143-40ed-83dd-f58c88fb5e6c", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc8e30a0-ccee-4b00-8a7d-0e4039f53431", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "9be3ad0946e7c57486cedf1f6a58260075f0590cb884b5a77a78c16fbdd4db68", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Tools\n\r\nEnable LLMs to perform actions through your server\r\n\r\nTools are a powerful primitive in the Model Context Protocol (MCP) that enable servers to expose executable functionality to clients. Through tools, LLMs can interact with external systems, perform computations, and take actions in the real world.\r\n\r\n\r\n  Tools are designed to be **model-controlled**, meaning that tools are exposed from servers to clients with the intention of the AI model being able to automatically invoke them (with a human in the loop to grant approval).", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 541, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e4708e79-deca-4fb3-96ae-7c50de789d4e": {"__data__": {"id_": "e4708e79-deca-4fb3-96ae-7c50de789d4e", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1784b2ef-f5af-444f-850b-6b0a62808f1b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f609224142a34dceba32a4c281a59447bd09f4e6ce49d13c5f8062d1de123c4e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Overview\n\r\nTools in MCP allow servers to expose executable functions that can be invoked by clients and used by LLMs to perform actions. Key aspects of tools include:\r\n\r\n*   **Discovery**: Clients can list available tools through the `tools/list` endpoint\r\n*   **Invocation**: Tools are called using the `tools/call` endpoint, where servers perform the requested operation and return results\r\n*   **Flexibility**: Tools can range from simple calculations to complex API interactions\r\n\r\nLike resources, tools are identified by unique names and can include descriptions to guide their usage. However, unlike resources, tools represent dynamic operations that can modify state or interact with external systems.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 710, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd2b6b95-290b-4a25-8897-0785a80bad6d": {"__data__": {"id_": "dd2b6b95-290b-4a25-8897-0785a80bad6d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a38cb569-6ff6-42fe-a0d5-55d66c00d58b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f09da81801213129faa0e5576069cac6ee6164dc3a36fb21f3df4c2974343a65", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Tool definition structure\n\r\nEach tool is defined with the following structure:\r\n\r\n```typescript\r\n{\r\n  name: string;          // Unique identifier for the tool\r\n  description?: string;  // Human-readable description\r\n  inputSchema: {         // JSON Schema for the tool's parameters\r\n    type: \"object\",\r\n    properties: { ... }  // Tool-specific parameters\r\n  }\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 371, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a6dd2d4e-33fe-4791-8e27-80c686aa4a4a": {"__data__": {"id_": "a6dd2d4e-33fe-4791-8e27-80c686aa4a4a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c96c36e4-e9c0-4c54-bc01-12bbafee1fad", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "62229526db23be1f9c0bcb794b2ed4b2d0e8cca41326e1f1585c9377b8d48212", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Implementing tools\n\r\nHere's an example of implementing a basic tool in an MCP server:\r\n\r\n\r\n  \r\n    ```typescript\r\n    const server = new Server({\r\n      name: \"example-server\",\r\n      version: \"1.0.0\"\r\n    }, {\r\n      capabilities: {\r\n        tools: {}\r\n      }\r\n    });\r\n\r\n    // Define available tools\r\n    server.setRequestHandler(ListToolsRequestSchema, async () => {\r\n      return {\r\n        tools: [{\r\n          name: \"calculate_sum\",\r\n          description: \"Add two numbers together\",\r\n          inputSchema: {\r\n            type: \"object\",\r\n            properties: {\r\n              a: { type: \"number\" },\r\n              b: { type: \"number\" }\r\n            },\r\n            required: [\"a\", \"b\"]\r\n          }\r\n        }]\r\n      };\r\n    });\r\n\r\n    // Handle tool execution\r\n    server.setRequestHandler(CallToolRequestSchema, async (request) => {\r\n      if (request.params.name === \"calculate_sum\") {\r\n        const { a, b } = request.params.arguments;\r\n        return {\r\n          toolResult: a + b\r\n        };\r\n      }\r\n      throw new Error(\"Tool not found\");\r\n    });\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    app = Server(\"example-server\")\r\n\r\n    @app.list_tools()\r\n    async def list_tools() -> list[types.Tool]:\r\n        return [\r\n            types.Tool(\r\n                name=\"calculate_sum\",\r\n                description=\"Add two numbers together\",\r\n                inputSchema={\r\n                    \"type\": \"object\",\r\n                    \"properties\": {\r\n                        \"a\": {\"type\": \"number\"},\r\n                        \"b\": {\"type\": \"number\"}\r\n                    },\r\n                    \"required\": [\"a\", \"b\"]\r\n                }\r\n            )\r\n        ]\r\n\r\n    @app.call_tool()\r\n    async def call_tool(\r\n        name: str,\r\n        arguments: dict\r\n    ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:\r\n        if name == \"calculate_sum\":\r\n            a = arguments[\"a\"]\r\n            b = arguments[\"b\"]\r\n            result = a + b\r\n            return [types.TextContent(type=\"text\", text=str(result))]\r\n        raise ValueError(f\"Tool not found: {name}\")\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2116, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "22ba2c04-98b0-46ce-86ad-e936679a8e59": {"__data__": {"id_": "22ba2c04-98b0-46ce-86ad-e936679a8e59", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41f403e3-1b0a-4746-a191-5292a6dfed8f", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "cec612863b9b859a768fb10b679a6085403852ac29025e4fa6e0238130d193e6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Example tool patterns\n\r\nHere are some examples of types of tools that a server could provide:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 95, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bc247849-23a3-40dc-8458-7108a581e435": {"__data__": {"id_": "bc247849-23a3-40dc-8458-7108a581e435", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "48492b05-7a08-4584-976f-c686bee6528d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "05233c34e3cc323234322b22ce29262af4b1500324d5fc2bce60747f97da50b5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "System operations\n\r\nTools that interact with the local system:\r\n\r\n```typescript\r\n{\r\n  name: \"execute_command\",\r\n  description: \"Run a shell command\",\r\n  inputSchema: {\r\n    type: \"object\",\r\n    properties: {\r\n      command: { type: \"string\" },\r\n      args: { type: \"array\", items: { type: \"string\" } }\r\n    }\r\n  }\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 323, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "baa02a67-d979-4e01-b652-23183b476fb6": {"__data__": {"id_": "baa02a67-d979-4e01-b652-23183b476fb6", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f4c44ea-d310-4f2b-a5fa-6b6c0208f0d9", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "4f5718f267e80412e591a7f7f7a280fe47add02d93e3d678b22524032554f487", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "API integrations\n\r\nTools that wrap external APIs:\r\n\r\n```typescript\r\n{\r\n  name: \"github_create_issue\",\r\n  description: \"Create a GitHub issue\",\r\n  inputSchema: {\r\n    type: \"object\",\r\n    properties: {\r\n      title: { type: \"string\" },\r\n      body: { type: \"string\" },\r\n      labels: { type: \"array\", items: { type: \"string\" } }\r\n    }\r\n  }\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 349, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c6da1bf5-0efc-46d2-ae00-8b143d1651ca": {"__data__": {"id_": "c6da1bf5-0efc-46d2-ae00-8b143d1651ca", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd9b266e-87b0-4e18-a5bf-80fc8f05b39d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "d042b4c227792fa22d2630d466d0856d963508353a620755b0be7312795b1cb9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Data processing\n\r\nTools that transform or analyze data:\r\n\r\n```typescript\r\n{\r\n  name: \"analyze_csv\",\r\n  description: \"Analyze a CSV file\",\r\n  inputSchema: {\r\n    type: \"object\",\r\n    properties: {\r\n      filepath: { type: \"string\" },\r\n      operations: {\r\n        type: \"array\",\r\n        items: {\r\n          enum: [\"sum\", \"average\", \"count\"]\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 382, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48f65610-0156-4761-a2aa-3dc64f3c46d3": {"__data__": {"id_": "48f65610-0156-4761-a2aa-3dc64f3c46d3", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da5ddae2-25ad-42d4-a1c2-ef512c8ecd77", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a7d43962688ce6205bef4aab927895cb10f8292838b0860098868a79ac035429", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices\n\r\nWhen implementing tools:\r\n\r\n1.  Provide clear, descriptive names and descriptions\r\n2.  Use detailed JSON Schema definitions for parameters\r\n3.  Include examples in tool descriptions to demonstrate how the model should use them\r\n4.  Implement proper error handling and validation\r\n5.  Use progress reporting for long operations\r\n6.  Keep tool operations focused and atomic\r\n7.  Document expected return value structures\r\n8.  Implement proper timeouts\r\n9.  Consider rate limiting for resource-intensive operations\r\n10. Log tool usage for debugging and monitoring", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 579, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9b97c60-459f-40a9-8d26-4c150c7bbaab": {"__data__": {"id_": "b9b97c60-459f-40a9-8d26-4c150c7bbaab", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68673685-3b8a-4484-922d-f303a520f2e9", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "62a8dc3a4c25ed88bcb1c37040b9d55bd75af2046b8efb237150865a7a920c6a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security considerations\n\r\nWhen exposing tools:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 48, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "564005b6-103d-4404-ab38-fe9b8f82d87d": {"__data__": {"id_": "564005b6-103d-4404-ab38-fe9b8f82d87d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0db188fd-bc56-4c66-a9ac-00e77a7d68c4", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "079a91770e810f10a1496ce5c7b72d23f6fa6a02d3a2fa3c077c7995b7d9770a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Input validation\n\r\n*   Validate all parameters against the schema\r\n*   Sanitize file paths and system commands\r\n*   Validate URLs and external identifiers\r\n*   Check parameter sizes and ranges\r\n*   Prevent command injection", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 225, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9ba1620b-d937-4ebb-92a4-5d8c32584967": {"__data__": {"id_": "9ba1620b-d937-4ebb-92a4-5d8c32584967", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06e624e6-cfba-4085-89d7-ed3dd0f8a094", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "f31189e7254d7f4eb3d35004f63841407bfc2e90f94c5a2825f76d6d1981a274", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Access control\n\r\n*   Implement authentication where needed\r\n*   Use appropriate authorization checks\r\n*   Audit tool usage\r\n*   Rate limit requests\r\n*   Monitor for abuse", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 172, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "11fe8893-9339-42a8-af95-74d218a3f3fc": {"__data__": {"id_": "11fe8893-9339-42a8-af95-74d218a3f3fc", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4fc6a57-b5d2-49cc-980f-ccbf3a85e416", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "72d088feabc38925e50f3f884ca7bd972f53077eca29897e9b11af33fa9446fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Error handling\n\r\n*   Don't expose internal errors to clients\r\n*   Log security-relevant errors\r\n*   Handle timeouts appropriately\r\n*   Clean up resources after errors\r\n*   Validate return values", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 196, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7ab559cd-2ce0-42b6-a234-592003f0d06d": {"__data__": {"id_": "7ab559cd-2ce0-42b6-a234-592003f0d06d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b59cebe-e79a-47ac-aaa6-9ab84cb47ad7", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "836d0c56d934c5abc0b819aaf01fa5993881971c9836b7345873fa36318c2ebb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Tool discovery and updates\n\r\nMCP supports dynamic tool discovery:\r\n\r\n1.  Clients can list available tools at any time\r\n2.  Servers can notify clients when tools change using `notifications/tools/list_changed`\r\n3.  Tools can be added or removed during runtime\r\n4.  Tool definitions can be updated (though this should be done carefully)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 336, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9ed57344-d45d-4833-a114-7db4662e2d9a": {"__data__": {"id_": "9ed57344-d45d-4833-a114-7db4662e2d9a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b514e5d-1fb4-4e1d-88a4-79095f5a374a", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "eedb3674163557dbe2892d4a2967f251804cbee734e1c42712c1f93376a67074", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Error handling\n\r\nTool errors should be reported within the result object, not as MCP protocol-level errors. This allows the LLM to see and potentially handle the error. When a tool encounters an error:\r\n\r\n1.  Set `isError` to `true` in the result\r\n2.  Include error details in the `content` array\r\n\r\nHere's an example of proper error handling for tools:\r\n\r\n\r\n  \r\n    ```typescript\r\n    try {\r\n      // Tool operation\r\n      const result = performOperation();\r\n      return {\r\n        content: [\r\n          {\r\n            type: \"text\",\r\n            text: `Operation successful: ${result}`\r\n          }\r\n        ]\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        isError: true,\r\n        content: [\r\n          {\r\n            type: \"text\",\r\n            text: `Error: ${error.message}`\r\n          }\r\n        ]\r\n      };\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    try:\r\n        # Tool operation\r\n        result = perform_operation()\r\n        return types.CallToolResult(\r\n            content=[\r\n                types.TextContent(\r\n                    type=\"text\",\r\n                    text=f\"Operation successful: {result}\"\r\n                )\r\n            ]\r\n        )\r\n    except Exception as error:\r\n        return types.CallToolResult(\r\n            isError=True,\r\n            content=[\r\n                types.TextContent(\r\n                    type=\"text\",\r\n                    text=f\"Error: {str(error)}\"\r\n                )\r\n            ]\r\n        )\r\n    ```\r\n  \r\n\r\n\r\nThis approach allows the LLM to see that an error occurred and potentially take corrective action or request human intervention.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1607, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42510425-a514-41d6-a2e2-7bd79f85331d": {"__data__": {"id_": "42510425-a514-41d6-a2e2-7bd79f85331d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "63a41810-4eb1-4d5f-87a0-684450732272", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "ceb59b9a62c1758b0feb36f0e586742e306df16ad1b2a2e96cd9b26807a429e0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Testing tools\n\r\nA comprehensive testing strategy for MCP tools should cover:\r\n\r\n*   **Functional testing**: Verify tools execute correctly with valid inputs and handle invalid inputs appropriately\r\n*   **Integration testing**: Test tool interaction with external systems using both real and mocked dependencies\r\n*   **Security testing**: Validate authentication, authorization, input sanitization, and rate limiting\r\n*   **Performance testing**: Check behavior under load, timeout handling, and resource cleanup\r\n*   **Error handling**: Ensure tools properly report errors through the MCP protocol and clean up resources", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 622, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5d216ea9-1fbc-47df-9996-88c7037422a9": {"__data__": {"id_": "5d216ea9-1fbc-47df-9996-88c7037422a9", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e9221596-abb2-4324-b89d-2cd7b2a92ddb", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a59fa793701eb8847e175f0fdaddcb8f83f626a258dfc48f39ea52030f9b28ec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Transports\n\r\nLearn about MCP's communication mechanisms\r\n\r\nTransports in the Model Context Protocol (MCP) provide the foundation for communication between clients and servers. A transport handles the underlying mechanics of how messages are sent and received.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 261, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0fc9d80d-d4be-436f-9a7c-56762e1f1ed5": {"__data__": {"id_": "0fc9d80d-d4be-436f-9a7c-56762e1f1ed5", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1334826a-501d-49ae-ad22-5cc91c3b001c", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a662522899b4bf391126d39a67997d1ceba636c88358fedb3abdd91ce29748c8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Message Format\n\r\nMCP uses JSON-RPC 2.0 as its wire format. The transport layer is responsible for converting MCP protocol messages into JSON-RPC format for transmission and converting received JSON-RPC messages back into MCP protocol messages.\r\n\r\nThere are three types of JSON-RPC messages used:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 297, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4eec010c-f71c-44ee-9b89-e1559085fbc3": {"__data__": {"id_": "4eec010c-f71c-44ee-9b89-e1559085fbc3", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6666c3c9-1ffe-44c6-8618-97a0e3ff03cc", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "994d4c80c40f60efd0b2ce6314195670225570883cc9e975881edce312110034", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Requests\n\r\n```typescript\r\n{\r\n  jsonrpc: \"2.0\",\r\n  id: number | string,\r\n  method: string,\r\n  params?: object\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 118, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4df803f0-5d8e-472e-a6a6-8238ede8ea85": {"__data__": {"id_": "4df803f0-5d8e-472e-a6a6-8238ede8ea85", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91483b4b-e367-4cc8-856a-616c084c1c1f", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "91fc1360249b8c02db290853114ace45288935c7ba63876741550aa5fa1e616e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Responses\n\r\n```typescript\r\n{\r\n  jsonrpc: \"2.0\",\r\n  id: number | string,\r\n  result?: object,\r\n  error?: {\r\n    code: number,\r\n    message: string,\r\n    data?: unknown\r\n  }\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 180, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b92be35-9496-458e-9bd8-0ccde83260a8": {"__data__": {"id_": "5b92be35-9496-458e-9bd8-0ccde83260a8", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "36c19c60-33f7-4c66-a5dc-24b9486cd994", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "752d4ada0fae87797010d053b1548490ab274bd557030a0ae27a9d571052abe9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Notifications\n\r\n```typescript\r\n{\r\n  jsonrpc: \"2.0\",\r\n  method: string,\r\n  params?: object\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 99, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8c152b3a-30ef-49ef-940f-47888dccc026": {"__data__": {"id_": "8c152b3a-30ef-49ef-940f-47888dccc026", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a05c7b3b-9c25-4a08-a984-0e0e992d3020", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "061769fb62e23f439731a996ab79392870b71a9ea382464d8d42db7385e42a28", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Built-in Transport Types\n\r\nMCP includes two standard transport implementations:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 81, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "79ec7d93-b6a2-4731-9d6b-8d0d9ee373ef": {"__data__": {"id_": "79ec7d93-b6a2-4731-9d6b-8d0d9ee373ef", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41d3822e-23c0-4df7-811c-aba915d974c5", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "3c99cbcad126297b1a40019c53474eea8fb5a0be9186068ca9935ff6e6575f43", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Standard Input/Output (stdio)\n\r\nThe stdio transport enables communication through standard input and output streams. This is particularly useful for local integrations and command-line tools.\r\n\r\nUse stdio when:\r\n\r\n*   Building command-line tools\r\n*   Implementing local integrations\r\n*   Needing simple process communication\r\n*   Working with shell scripts\r\n\r\n\r\n  \r\n    ```typescript\r\n    const server = new Server({\r\n      name: \"example-server\",\r\n      version: \"1.0.0\"\r\n    }, {\r\n      capabilities: {}\r\n    });\r\n\r\n    const transport = new StdioServerTransport();\r\n    await server.connect(transport);\r\n    ```\r\n  \r\n\r\n  \r\n    ```typescript\r\n    const client = new Client({\r\n      name: \"example-client\",\r\n      version: \"1.0.0\"\r\n    }, {\r\n      capabilities: {}\r\n    });\r\n\r\n    const transport = new StdioClientTransport({\r\n      command: \"./server\",\r\n      args: [\"--option\", \"value\"]\r\n    });\r\n    await client.connect(transport);\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    app = Server(\"example-server\")\r\n\r\n    async with stdio_server() as streams:\r\n        await app.run(\r\n            streams[0],\r\n            streams[1],\r\n            app.create_initialization_options()\r\n        )\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    params = StdioServerParameters(\r\n        command=\"./server\",\r\n        args=[\"--option\", \"value\"]\r\n    )\r\n\r\n    async with stdio_client(params) as streams:\r\n        async with ClientSession(streams[0], streams[1]) as session:\r\n            await session.initialize()\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1500, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d61dd1a0-ea12-4ff5-8a92-cd3b972bda35": {"__data__": {"id_": "d61dd1a0-ea12-4ff5-8a92-cd3b972bda35", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "987d13cb-8396-4f4a-9d55-4c05b1c7caaf", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a87ac49e074569a74a285795aac96e212e0d983010e2516b12f8a452178a5789", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Server-Sent Events (SSE)\n\r\nSSE transport enables server-to-client streaming with HTTP POST requests for client-to-server communication.\r\n\r\nUse SSE when:\r\n\r\n*   Only server-to-client streaming is needed\r\n*   Working with restricted networks\r\n*   Implementing simple updates\r\n\r\n\r\n  \r\n    ```typescript\r\n    const server = new Server({\r\n      name: \"example-server\",\r\n      version: \"1.0.0\"\r\n    }, {\r\n      capabilities: {}\r\n    });\r\n\r\n    const transport = new SSEServerTransport(\"/message\", response);\r\n    await server.connect(transport);\r\n    ```\r\n  \r\n\r\n  \r\n    ```typescript\r\n    const client = new Client({\r\n      name: \"example-client\",\r\n      version: \"1.0.0\"\r\n    }, {\r\n      capabilities: {}\r\n    });\r\n\r\n    const transport = new SSEClientTransport(\r\n      new URL(\"http://localhost:3000/sse\")\r\n    );\r\n    await client.connect(transport);\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    from mcp.server.sse import SseServerTransport\r\n    from starlette.applications import Starlette\r\n    from starlette.routing import Route\r\n\r\n    app = Server(\"example-server\")\r\n    sse = SseServerTransport(\"/messages\")\r\n\r\n    async def handle_sse(scope, receive, send):\r\n        async with sse.connect_sse(scope, receive, send) as streams:\r\n            await app.run(streams[0], streams[1], app.create_initialization_options())\r\n\r\n    async def handle_messages(scope, receive, send):\r\n        await sse.handle_post_message(scope, receive, send)\r\n\r\n    starlette_app = Starlette(\r\n        routes=[\r\n            Route(\"/sse\", endpoint=handle_sse),\r\n            Route(\"/messages\", endpoint=handle_messages, methods=[\"POST\"]),\r\n        ]\r\n    )\r\n    ```\r\n  \r\n\r\n  \r\n    ```python\r\n    async with sse_client(\"http://localhost:8000/sse\") as streams:\r\n        async with ClientSession(streams[0], streams[1]) as session:\r\n            await session.initialize()\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1849, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7cb28a36-aa16-4845-a2f7-acde883347d0": {"__data__": {"id_": "7cb28a36-aa16-4845-a2f7-acde883347d0", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "facd09ed-58a2-4071-abf9-b049b113791e", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "9fed74e8eae65ed338906e4d7ea874a8e91546c3e2e7a0cc28aa07217eadef02", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Custom Transports\n\r\nMCP makes it easy to implement custom transports for specific needs. Any transport implementation just needs to conform to the Transport interface:\r\n\r\nYou can implement custom transports for:\r\n\r\n*   Custom network protocols\r\n*   Specialized communication channels\r\n*   Integration with existing systems\r\n*   Performance optimization\r\n\r\n\r\n  \r\n    ```typescript\r\n    interface Transport {\r\n      // Start processing messages\r\n      start(): Promise;\r\n\r\n      // Send a JSON-RPC message\r\n      send(message: JSONRPCMessage): Promise;\r\n\r\n      // Close the connection\r\n      close(): Promise;\r\n\r\n      // Callbacks\r\n      onclose?: () => void;\r\n      onerror?: (error: Error) => void;\r\n      onmessage?: (message: JSONRPCMessage) => void;\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    Note that while MCP Servers are often implemented with asyncio, we recommend\r\n    implementing low-level interfaces like transports with `anyio` for wider compatibility.\r\n\r\n    ```python\r\n    @contextmanager\r\n    async def create_transport(\r\n        read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception],\r\n        write_stream: MemoryObjectSendStream[JSONRPCMessage]\r\n    ):\r\n        \"\"\"\r\n        Transport interface for MCP.\r\n\r\n        Args:\r\n            read_stream: Stream to read incoming messages from\r\n            write_stream: Stream to write outgoing messages to\r\n        \"\"\"\r\n        async with anyio.create_task_group() as tg:\r\n            try:\r\n                # Start processing messages\r\n                tg.start_soon(lambda: process_messages(read_stream))\r\n\r\n                # Send messages\r\n                async with write_stream:\r\n                    yield write_stream\r\n\r\n            except Exception as exc:\r\n                # Handle errors\r\n                raise exc\r\n            finally:\r\n                # Clean up\r\n                tg.cancel_scope.cancel()\r\n                await write_stream.aclose()\r\n                await read_stream.aclose()\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1977, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "db42729f-7629-4a10-8d52-15f089535e48": {"__data__": {"id_": "db42729f-7629-4a10-8d52-15f089535e48", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "016b6376-1f5f-4ab8-8ef4-c2eefa4d1ae0", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "79ffc350eb233b50c9e947abef2c85885e21acb25fb99c212b9952220e047d7c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Error Handling\n\r\nTransport implementations should handle various error scenarios:\r\n\r\n1.  Connection errors\r\n2.  Message parsing errors\r\n3.  Protocol errors\r\n4.  Network timeouts\r\n5.  Resource cleanup\r\n\r\nExample error handling:\r\n\r\n\r\n  \r\n    ```typescript\r\n    class ExampleTransport implements Transport {\r\n      async start() {\r\n        try {\r\n          // Connection logic\r\n        } catch (error) {\r\n          this.onerror?.(new Error(`Failed to connect: ${error}`));\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      async send(message: JSONRPCMessage) {\r\n        try {\r\n          // Sending logic\r\n        } catch (error) {\r\n          this.onerror?.(new Error(`Failed to send message: ${error}`));\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    Note that while MCP Servers are often implemented with asyncio, we recommend\r\n    implementing low-level interfaces like transports with `anyio` for wider compatibility.\r\n\r\n    ```python\r\n    @contextmanager\r\n    async def example_transport(scope: Scope, receive: Receive, send: Send):\r\n        try:\r\n            # Create streams for bidirectional communication\r\n            read_stream_writer, read_stream = anyio.create_memory_object_stream(0)\r\n            write_stream, write_stream_reader = anyio.create_memory_object_stream(0)\r\n\r\n            async def message_handler():\r\n                try:\r\n                    async with read_stream_writer:\r\n                        # Message handling logic\r\n                        pass\r\n                except Exception as exc:\r\n                    logger.error(f\"Failed to handle message: {exc}\")\r\n                    raise exc\r\n\r\n            async with anyio.create_task_group() as tg:\r\n                tg.start_soon(message_handler)\r\n                try:\r\n                    # Yield streams for communication\r\n                    yield read_stream, write_stream\r\n                except Exception as exc:\r\n                    logger.error(f\"Transport error: {exc}\")\r\n                    raise exc\r\n                finally:\r\n                    tg.cancel_scope.cancel()\r\n                    await write_stream.aclose()\r\n                    await read_stream.aclose()\r\n        except Exception as exc:\r\n            logger.error(f\"Failed to initialize transport: {exc}\")\r\n            raise exc\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2328, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8154537-0254-40dd-92d9-5099d6976671": {"__data__": {"id_": "e8154537-0254-40dd-92d9-5099d6976671", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a3c5e81-8b4a-4b00-bb0b-c8f9f90f2ba6", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "3b809e3ff9c04e2eabcca3678cee4111939a27b0eea83e1600e8c3e12338a1ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best Practices\n\r\nWhen implementing or using MCP transport:\r\n\r\n1.  Handle connection lifecycle properly\r\n2.  Implement proper error handling\r\n3.  Clean up resources on connection close\r\n4.  Use appropriate timeouts\r\n5.  Validate messages before sending\r\n6.  Log transport events for debugging\r\n7.  Implement reconnection logic when appropriate\r\n8.  Handle backpressure in message queues\r\n9.  Monitor connection health\r\n10. Implement proper security measures", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 458, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "869cd7a9-5988-4ae2-895d-39caf4e41509": {"__data__": {"id_": "869cd7a9-5988-4ae2-895d-39caf4e41509", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e57da15-12aa-433c-bc85-e4130dec9e37", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "d5ac6885357cd87951e63f1defc476c81b5780d21cc502952ba70f9047418257", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Security Considerations\n\r\nWhen implementing transport:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 56, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3a1ff702-2029-419c-a930-87b4815ba419": {"__data__": {"id_": "3a1ff702-2029-419c-a930-87b4815ba419", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "04128029-8178-486c-bf55-1c4f14774312", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "969a6e888d2c1ff03750e7db65b096279b82339c111c3b89cad2fc3a81a426d5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Authentication and Authorization\n\r\n*   Implement proper authentication mechanisms\r\n*   Validate client credentials\r\n*   Use secure token handling\r\n*   Implement authorization checks", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 183, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a38e4a1f-53d3-4651-8b83-39377444d5e0": {"__data__": {"id_": "a38e4a1f-53d3-4651-8b83-39377444d5e0", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de41b7cf-03be-4df3-a034-98c4cebce8c9", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "cec7987c469bcb157497a623e3f6d48ed6ecc20c87e45527b9e0784d263cf73d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Data Security\n\r\n*   Use TLS for network transport\r\n*   Encrypt sensitive data\r\n*   Validate message integrity\r\n*   Implement message size limits\r\n*   Sanitize input data", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 171, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ac0dbd84-b3ae-4cfc-97ea-1eaf2209ed8a": {"__data__": {"id_": "ac0dbd84-b3ae-4cfc-97ea-1eaf2209ed8a", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5c55470-8e6c-400e-a0d8-29abea0f7bed", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "842128da0b8be3649cec3ad9c34ce293c4b3e40766d31af6857818fe8f5008d7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Network Security\n\r\n*   Implement rate limiting\r\n*   Use appropriate timeouts\r\n*   Handle denial of service scenarios\r\n*   Monitor for unusual patterns\r\n*   Implement proper firewall rules", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 189, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2f7585b-1ee0-467b-8ca7-1700d3d18ba3": {"__data__": {"id_": "c2f7585b-1ee0-467b-8ca7-1700d3d18ba3", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b25bb007-bfde-4bdd-a7dc-6e8165d8d1b6", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "40570f09db81e273f35f9bf095f53d5217728f96a182c5e8446fd72fe08487f5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Debugging Transport\n\r\nTips for debugging transport issues:\r\n\r\n1.  Enable debug logging\r\n2.  Monitor message flow\r\n3.  Check connection states\r\n4.  Validate message formats\r\n5.  Test error scenarios\r\n6.  Use network analysis tools\r\n7.  Implement health checks\r\n8.  Monitor resource usage\r\n9.  Test edge cases\r\n10. Use proper error tracking", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 340, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "de888354-1e7a-4768-8523-cc2280fb3350": {"__data__": {"id_": "de888354-1e7a-4768-8523-cc2280fb3350", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cce1528e-17b4-4e28-b72d-7130f88d3a7a", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "1671fd43f657fead4047c2dcd1b8daa1cbd307abafb764222e2160a5436ff709", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "TypeScript\n\r\nCreate a simple MCP server in TypeScript in 15 minutes\r\n\r\nLet's build your first MCP server in TypeScript! We'll create a weather server that provides current weather data as a resource and lets Claude fetch forecasts using tools.\r\n\r\n\r\n  This guide uses the OpenWeatherMap API. You'll need a free API key from OpenWeatherMap to follow along.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 356, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "86167735-076b-4f8e-bc27-b232d0d75f80": {"__data__": {"id_": "86167735-076b-4f8e-bc27-b232d0d75f80", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "421edbf0-1570-4214-bb65-2875904ba0da", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "7e910494725514213d9e41b4688bd90594aa60ec7166512ca1b37435d5996548", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Prerequisites\n\r\n\r\n  \r\n    You'll need Node.js 18 or higher:\r\n\r\n    ```bash\r\n    node --version  # Should be v18 or higher\r\n    npm --version\r\n    ```\r\n  \r\n\r\n  \r\n    You can use our create-typescript-server tool to bootstrap a new project:\r\n\r\n    ```bash\r\n    npx @modelcontextprotocol/create-server weather-server\r\n    cd weather-server\r\n    ```\r\n  \r\n\r\n  \r\n    ```bash\r\n    npm install --save axios dotenv\r\n    ```\r\n  \r\n\r\n  \r\n    Create `.env`:\r\n\r\n    ```bash\r\n    OPENWEATHER_API_KEY=your-api-key-here\r\n    ```\r\n\r\n    Make sure to add your environment file to `.gitignore`\r\n\r\n    ```bash\r\n    .env\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 609, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "66d6b380-1448-4b87-92bd-14ae0523a7f0": {"__data__": {"id_": "66d6b380-1448-4b87-92bd-14ae0523a7f0", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af643155-90ba-44d4-8b06-b1bf6aae4074", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "4a8f07c55f2decd49f45ca159853ae9ef9a15cb907829dcfd64cb939ab8be739", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f081d2c-4908-4a18-99a6-5917efacd2f0", "node_type": "1", "metadata": {}, "hash": "63d4c170a504eaae9824fc7927a4789c2cdf80463d8d0883b7aa0eb7736add88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Create your server\n\r\n\r\n  \r\n    Create a file `src/types.ts`, and add the following:\r\n\r\n    ```typescript\r\n    export interface OpenWeatherResponse {\r\n      main: {\r\n        temp: number;\r\n        humidity: number;\r\n      };\r\n      weather: Array<{\r\n        description: string;\r\n      }>;\r\n      wind: {\r\n        speed: number;\r\n      };\r\n      dt_txt?: string;\r\n    }\r\n\r\n    export interface WeatherData {\r\n      temperature: number;\r\n      conditions: string;\r\n      humidity: number;\r\n      wind_speed: number;\r\n      timestamp: string;\r\n    }\r\n\r\n    export interface ForecastDay {\r\n      date: string;\r\n      temperature: number;\r\n      conditions: string;\r\n    }\r\n\r\n    export interface GetForecastArgs {\r\n      city: string;\r\n      days?: number;\r\n    }\r\n\r\n    // Type guard for forecast arguments\r\n    export function isValidForecastArgs(args: any): args is GetForecastArgs {\r\n      return (\r\n        typeof args === \"object\" && \r\n        args !== null && \r\n        \"city\" in args &&\r\n        typeof args.city === \"string\" &&\r\n        (args.days === undefined || typeof args.days === \"number\")\r\n      );\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    Replace `src/index.ts` with the following:\r\n\r\n    ```typescript\r\n    #!/usr/bin/env node\r\n    import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\r\n    import { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\r\n    import {\r\n      ListResourcesRequestSchema,\r\n      ReadResourceRequestSchema,\r\n      ListToolsRequestSchema,\r\n      CallToolRequestSchema,\r\n      ErrorCode,\r\n      McpError\r\n    } from \"@modelcontextprotocol/sdk/types.js\";\r\n    import axios from \"axios\";\r\n    import dotenv from \"dotenv\";\r\n    import { \r\n      WeatherData, \r\n      ForecastDay, \r\n      OpenWeatherResponse,\r\n      isValidForecastArgs \r\n    } from \"./types.js\";\r\n\r\n    dotenv.config();\r\n\r\n    const API_KEY = process.env.OPENWEATHER_API_KEY;\r\n    if (!API_KEY) {\r\n      throw new Error(\"OPENWEATHER_API_KEY environment variable is required\");\r\n    }\r\n\r\n    const API_CONFIG = {\r\n      BASE_URL: 'http://api.openweathermap.org/data/2.5',\r\n      DEFAULT_CITY: 'San Francisco',\r\n      ENDPOINTS: {\r\n        CURRENT: 'weather',\r\n        FORECAST: 'forecast'\r\n      }\r\n    } as const;\r\n\r\n    class WeatherServer {\r\n      private server: Server;\r\n      private axiosInstance;\r\n\r\n      constructor() {\r\n        this.server = new Server({\r\n          name: \"example-weather-server\",\r\n          version: \"0.1.0\"\r\n        }, {\r\n          capabilities: {\r\n            resources: {},\r\n            tools: {}\r\n          }\r\n        });\r\n\r\n        // Configure axios with defaults\r\n        this.axiosInstance = axios.create({\r\n          baseURL: API_CONFIG.BASE_URL,\r\n          params: {\r\n            appid: API_KEY,\r\n            units: \"metric\"\r\n          }\r\n        });\r\n\r\n        this.setupHandlers();\r\n        this.setupErrorHandling();\r\n      }\r\n\r\n      private setupErrorHandling(): void {\r\n        this.server.onerror = (error) => {\r\n          console.error(\"[MCP Error]\", error);\r\n        };\r\n\r\n        process.on('SIGINT', async () => {\r\n          await this.server.close();\r\n          process.exit(0);\r\n        });\r\n      }\r\n\r\n      private setupHandlers(): void {\r\n        this.setupResourceHandlers();\r\n        this.setupToolHandlers();\r\n      }\r\n\r\n      private setupResourceHandlers(): void {\r\n        // Implementation continues in next section\r\n      }\r\n\r\n      private setupToolHandlers(): void {\r\n        // Implementation continues in next section\r\n      }\r\n\r\n      async run(): Promise {\r\n        const transport = new StdioServerTransport();\r\n        await this.server.connect(transport);\r\n        \r\n        // Although this is just an informative message, we must log to stderr,\r\n        // to avoid interfering with MCP communication that happens on stdout\r\n        console.error(\"Weather MCP server running on stdio\");\r\n      }\r\n    }\r\n\r\n    const server = new WeatherServer();\r\n    server.run().catch(console.error);\r\n    ```\r\n  \r\n\r\n  \r\n    Add this to the `setupResourceHandlers` method:\r\n\r\n    ```typescript\r\n    private setupResourceHandlers(): void {\r\n      this.server.setRequestHandler(\r\n        ListResourcesRequestSchema,\r\n        async () => ({\r\n          resources: [{\r\n            uri: `weather://${API_CONFIG.DEFAULT_CITY}/current`,\r\n            name: `Current weather in ${API_CONFIG.DEFAULT_CITY}`,\r\n            mimeType: \"application/json\",\r\n            description: \"Real-time weather data including temperature, conditions, humidity,", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 4522, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1f081d2c-4908-4a18-99a6-5917efacd2f0": {"__data__": {"id_": "1f081d2c-4908-4a18-99a6-5917efacd2f0", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af643155-90ba-44d4-8b06-b1bf6aae4074", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "4a8f07c55f2decd49f45ca159853ae9ef9a15cb907829dcfd64cb939ab8be739", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66d6b380-1448-4b87-92bd-14ae0523a7f0", "node_type": "1", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "dd931af1afdd6ecc7a7a4ca0bbf2e05e4621f1fc6aaa0c9accce5bc6da28ffd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb9416dd-7d08-4204-8389-cd565416ef14", "node_type": "1", "metadata": {}, "hash": "24dfc0c33fddae26d0ead335fada6bbcbedb0c6379c4732f5156c904f3fd7280", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "await this.server.connect(transport);\r\n        \r\n        // Although this is just an informative message, we must log to stderr,\r\n        // to avoid interfering with MCP communication that happens on stdout\r\n        console.error(\"Weather MCP server running on stdio\");\r\n      }\r\n    }\r\n\r\n    const server = new WeatherServer();\r\n    server.run().catch(console.error);\r\n    ```\r\n  \r\n\r\n  \r\n    Add this to the `setupResourceHandlers` method:\r\n\r\n    ```typescript\r\n    private setupResourceHandlers(): void {\r\n      this.server.setRequestHandler(\r\n        ListResourcesRequestSchema,\r\n        async () => ({\r\n          resources: [{\r\n            uri: `weather://${API_CONFIG.DEFAULT_CITY}/current`,\r\n            name: `Current weather in ${API_CONFIG.DEFAULT_CITY}`,\r\n            mimeType: \"application/json\",\r\n            description: \"Real-time weather data including temperature, conditions, humidity, and wind speed\"\r\n          }]\r\n        })\r\n      );\r\n\r\n      this.server.setRequestHandler(\r\n        ReadResourceRequestSchema,\r\n        async (request) => {\r\n          const city = API_CONFIG.DEFAULT_CITY;\r\n          if (request.params.uri !== `weather://${city}/current`) {\r\n            throw new McpError(\r\n              ErrorCode.InvalidRequest,\r\n              `Unknown resource: ${request.params.uri}`\r\n            );\r\n          }\r\n\r\n          try {\r\n            const response = await this.axiosInstance.get(\r\n              API_CONFIG.ENDPOINTS.CURRENT,\r\n              {\r\n                params: { q: city }\r\n              }\r\n            );\r\n\r\n            const weatherData: WeatherData = {\r\n              temperature: response.data.main.temp,\r\n              conditions: response.data.weather[0].description,\r\n              humidity: response.data.main.humidity,\r\n              wind_speed: response.data.wind.speed,\r\n              timestamp: new Date().toISOString()\r\n            };\r\n\r\n            return {\r\n              contents: [{\r\n                uri: request.params.uri,\r\n                mimeType: \"application/json\",\r\n                text: JSON.stringify(weatherData, null, 2)\r\n              }]\r\n            };\r\n          } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n              throw new McpError(\r\n                ErrorCode.InternalError,\r\n                `Weather API error: ${error.response?.data.message ?? error.message}`\r\n              );\r\n            }\r\n            throw error;\r\n          }\r\n        }\r\n      );\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    Add these handlers to the `setupToolHandlers` method:\r\n\r\n    ```typescript\r\n    private setupToolHandlers(): void {\r\n      this.server.setRequestHandler(\r\n        ListToolsRequestSchema,\r\n        async () => ({\r\n          tools: [{\r\n            name: \"get_forecast\",\r\n            description: \"Get weather forecast for a city\",\r\n            inputSchema: {\r\n              type: \"object\",\r\n              properties: {\r\n                city: {\r\n                  type: \"string\",\r\n                  description: \"City name\"\r\n                },\r\n                days: {\r\n                  type: \"number\",\r\n                  description: \"Number of days (1-5)\",\r\n                  minimum: 1,\r\n                  maximum: 5\r\n                }\r\n              },\r\n              required: [\"city\"]\r\n            }\r\n          }]\r\n        })\r\n      );\r\n\r\n      this.server.setRequestHandler(\r\n        CallToolRequestSchema,\r\n        async (request) => {\r\n          if (request.params.name !== \"get_forecast\") {\r\n            throw new McpError(\r\n              ErrorCode.MethodNotFound,\r\n              `Unknown tool: ${request.params.name}`\r\n            );\r\n          }\r\n\r\n          if (!isValidForecastArgs(request.params.arguments)) {\r\n            throw new McpError(\r\n              ErrorCode.InvalidParams,\r\n              \"Invalid forecast arguments\"\r\n            );\r\n          }\r\n\r\n          const city = request.params.arguments.city;\r\n          const days = Math.min(request.params.arguments.days || 3, 5);\r\n\r\n          try {\r\n            const response = await this.axiosInstance.get<{\r\n              list: OpenWeatherResponse[]\r\n            }>(API_CONFIG.ENDPOINTS.FORECAST, {\r\n              params: {\r\n                q: city,\r\n                cnt: days * 8 // API returns 3-hour intervals\r\n              }\r\n            });\r\n\r\n            const forecasts: ForecastDay[] = [];\r\n            for (let i = 0; i < response.data.list.length; i += 8) {\r\n              const dayData = response.data.list[i];\r\n              forecasts.push({\r\n                date: dayData.dt_txt?.split(' ')[0] ??", "mimetype": "text/plain", "start_char_idx": 3619, "end_char_idx": 8191, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bb9416dd-7d08-4204-8389-cd565416ef14": {"__data__": {"id_": "bb9416dd-7d08-4204-8389-cd565416ef14", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af643155-90ba-44d4-8b06-b1bf6aae4074", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "4a8f07c55f2decd49f45ca159853ae9ef9a15cb907829dcfd64cb939ab8be739", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f081d2c-4908-4a18-99a6-5917efacd2f0", "node_type": "1", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "d26b9f9b146d3003c175b56ada25d370e0b2e6c09949af4f5e321e1df54ca001", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "? new Date().toISOString().split('T')[0],\r\n                temperature: dayData.main.temp,\r\n                conditions: dayData.weather[0].description\r\n              });\r\n            }\r\n\r\n            return {\r\n              content: [{\r\n                type: \"text\",\r\n                text: JSON.stringify(forecasts, null, 2)\r\n              }]\r\n            };\r\n          } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n              return {\r\n                content: [{\r\n                  type: \"text\",\r\n                  text: `Weather API error: ${error.response?.data.message ?? error.message}`\r\n                }],\r\n                isError: true,\r\n              }\r\n            }\r\n            throw error;\r\n          }\r\n        }\r\n      );\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    ```bash\r\n    npm run build\r\n    ```", "mimetype": "text/plain", "start_char_idx": 8190, "end_char_idx": 9016, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "61db3850-dcca-4919-821d-e180dc786fe8": {"__data__": {"id_": "61db3850-dcca-4919-821d-e180dc786fe8", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb2f0bbd-70a1-4c67-96fb-51b0af3d6350", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "30463867475ed398af3c7056740b13c189fd323acab58d684c0fece8d25e894f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Connect to Claude Desktop\n\r\n\r\n  \r\n    If you didn't already connect to Claude Desktop during project setup, add to `claude_desktop_config.json`:\r\n\r\n    ```json\r\n    {\r\n      \"mcpServers\": {\r\n        \"weather\": {\r\n          \"command\": \"node\",\r\n          \"args\": [\"/path/to/weather-server/build/index.js\"],\r\n          \"env\": {\r\n            \"OPENWEATHER_API_KEY\": \"your-api-key\",\r\n          }\r\n        }\r\n      }\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    1.  Quit Claude completely\r\n    2.  Start Claude again\r\n    3.  Look for your weather server in the \ud83d\udd0c menu", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 549, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "52fb2c29-1f25-49f5-90f3-60d856cfba72": {"__data__": {"id_": "52fb2c29-1f25-49f5-90f3-60d856cfba72", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce29beaa-b6ec-4162-9238-ffb22f25996e", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "bd2415199776f9d6abac0c2bfec53ac57dc4c4aa5f71b2eb63f3a05afced908d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Try it out!\n\r\n\r\n  \r\n    Ask Claude:\r\n\r\n    ```\r\n    What's the current weather in San Francisco? Can you analyze the conditions?\r\n    ```\r\n  \r\n\r\n  \r\n    Ask Claude:\r\n\r\n    ```\r\n    Can you get me a 5-day forecast for Tokyo and tell me if I should pack an umbrella?\r\n    ```\r\n  \r\n\r\n  \r\n    Ask Claude:\r\n\r\n    ```\r\n    Can you analyze the forecast for both Tokyo and San Francisco and tell me which city will be warmer this week?\r\n    ```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 438, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7d60baaa-0588-4efe-9c0b-f88b890c2c0b": {"__data__": {"id_": "7d60baaa-0588-4efe-9c0b-f88b890c2c0b", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85ca1c28-ca0f-4dde-9026-706aed855ed7", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "e3b27189b178fbe804d5a8886abd684b83e7216ff207fdb7a88791374f890c75", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Understanding the code\n\r\n\r\n  \r\n    ```typescript\r\n    interface WeatherData {\r\n      temperature: number;\r\n      conditions: string;\r\n      humidity: number;\r\n      wind_speed: number;\r\n      timestamp: string;\r\n    }\r\n    ```\r\n\r\n    TypeScript adds type safety to our MCP server, making it more reliable and easier to maintain.\r\n  \r\n\r\n  \r\n    ```typescript\r\n    this.server.setRequestHandler(\r\n      ListResourcesRequestSchema,\r\n      async () => ({\r\n        resources: [{\r\n          uri: `weather://${DEFAULT_CITY}/current`,\r\n          name: `Current weather in ${DEFAULT_CITY}`,\r\n          mimeType: \"application/json\"\r\n        }]\r\n      })\r\n    );\r\n    ```\r\n\r\n    Resources provide data that Claude can access as context.\r\n  \r\n\r\n  \r\n    ```typescript\r\n    {\r\n      name: \"get_forecast\",\r\n      description: \"Get weather forecast for a city\",\r\n      inputSchema: {\r\n        type: \"object\",\r\n        properties: {\r\n          city: { type: \"string\" },\r\n          days: { type: \"number\" }\r\n        }\r\n      }\r\n    }\r\n    ```\r\n\r\n    Tools let Claude take actions through your server with type-safe inputs.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1106, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb65fa84-8507-46d1-8d72-5c5e4abe2679": {"__data__": {"id_": "fb65fa84-8507-46d1-8d72-5c5e4abe2679", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cdcbc628-a47c-4c06-8c80-8ac3b57b03bc", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "a1419ad22548e5460e9a41a82b8d528426044e6673d12187d5b78dd03d9f5c90", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Best practices\n\r\n\r\n  \r\n    When a tool encounters an error, return the error message with `isError: true`, so the model can self-correct:\r\n\r\n    ```typescript\r\n    try {\r\n      const response = await axiosInstance.get(...);\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        return {\r\n          content: {\r\n            mimeType: \"text/plain\",\r\n            text: `Weather API error: ${error.response?.data.message ?? error.message}`\r\n          },\r\n          isError: true,\r\n        }\r\n      }\r\n      throw error;\r\n    }\r\n    ```\r\n\r\n    For other handlers, throw an error, so the application can notify the user:\r\n\r\n    ```typescript\r\n    try {\r\n      const response = await this.axiosInstance.get(...);\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw new McpError(\r\n          ErrorCode.InternalError,\r\n          `Weather API error: ${error.response?.data.message}`\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n    ```\r\n  \r\n\r\n  \r\n    ```typescript\r\n    function isValidForecastArgs(args: any): args is GetForecastArgs {\r\n      return (\r\n        typeof args === \"object\" && \r\n        args !== null && \r\n        \"city\" in args &&\r\n        typeof args.city === \"string\"\r\n      );\r\n    }\r\n    ```\r\n\r\n    You can also use libraries like Zod to perform this validation automatically.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1332, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca5814a9-2376-40a9-a6cd-9a81df95a887": {"__data__": {"id_": "ca5814a9-2376-40a9-a6cd-9a81df95a887", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6be697f4-8f37-4943-9805-38c7ed406fa0", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "1b3b393963bc35a3f3699eaa2d6472fca7e90fe94edb4d62be9f788887c3f2ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Available transports\n\r\nWhile this guide uses stdio to run the MCP server as a local process, MCP supports other transports as well.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 133, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "213bb680-4034-4552-b23c-1cdd26318f07": {"__data__": {"id_": "213bb680-4034-4552-b23c-1cdd26318f07", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "debe3122-279b-4d49-8bc9-fe74a488011a", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "46a741c9945ff41a1c76270505dec95860d23e43aa8aec75ae53080817d3c98a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Troubleshooting\n\r\n\r\n  The following troubleshooting tips are for macOS. Guides for other platforms are coming soon.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 117, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "df93a23f-0f96-430c-b36d-795bc0018f5c": {"__data__": {"id_": "df93a23f-0f96-430c-b36d-795bc0018f5c", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae22fc46-67d6-4891-946d-a8e52141ae5b", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "2101b9df6ec9235034d0fef513b20e70b2b44b2f9001154dd582048e9207ae5e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Build errors\n\r\n```bash\r\n# Check TypeScript version\r\nnpx tsc --version\r\n\r\n# Clean and rebuild\r\nrm -rf build/\r\nnpm run build\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 129, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6ca9b9e8-e639-4451-a85c-34d4c07b43fb": {"__data__": {"id_": "6ca9b9e8-e639-4451-a85c-34d4c07b43fb", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c586c734-0136-47f5-817f-24b6eea6a608", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "2150e2bd962ba516f56a5f74d66526c5beb7a4ce5bee5efb5a6c1bb4086fcfcf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Runtime errors\n\r\nLook for detailed error messages in the Claude Desktop logs:\r\n\r\n```bash\r\n# Monitor logs\r\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 157, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "52a74f2d-e2b8-49b2-9f12-a99ee69d148d": {"__data__": {"id_": "52a74f2d-e2b8-49b2-9f12-a99ee69d148d", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74aa2bb2-f776-4673-82ad-ba124bf4006d", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8250115cbaed3eff4304a332523dba2e0321a6e9410d41812d9a9afba4913ca4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Type errors\n\r\n```bash\r\n# Check types without building\r\nnpx tsc --noEmit\r\n```", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 78, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1f1563ae-ffae-485e-bd01-ff53207a0456": {"__data__": {"id_": "1f1563ae-ffae-485e-bd01-ff53207a0456", "embedding": null, "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51293218-7001-43eb-853d-5c327ae69535", "node_type": "4", "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}, "hash": "8a3ecafd3834d8376c6fba25e20059fab55c029965854945c18eab4146f5de08", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Next steps\n\r\n\r\n  \r\n    Learn more about the MCP architecture\r\n  \r\n\r\n  \r\n    Check out the TypeScript SDK on GitHub\r\n  \r\n\r\n\r\n\r\n  Need help? Ask Claude! Since it has access to the MCP SDK documentation, it can help you debug issues and suggest improvements to your server.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 272, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"06977792-ec7f-4178-8537-debbfbe1cb98": {"node_ids": ["b47c42fb-7e14-4bbb-8735-4d454f6d8b8c"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "b79799a6-a7fc-4243-8dda-d29895477ec6": {"node_ids": ["6fa0b6ea-fb4c-4041-8dd1-64993774cc73"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "7a84f05e-b538-4a28-b307-f4d240c08ee0": {"node_ids": ["4e82e5a2-3c4d-4512-9a1b-6009458145b7"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "24be54a7-9e50-4ad3-83ca-5c33b2cb7713": {"node_ids": ["82329d98-6b96-4ad2-b12a-c6e1b48b2b4c"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "91dab0c6-5231-4834-90e5-213d31e69cac": {"node_ids": ["25286998-9d45-4943-902c-d31b3fa1537a"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "0a017e8d-1d95-473f-92c3-de8cc528d1fe": {"node_ids": ["5c8e33a5-f6dd-4973-9503-54dab9563719"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "22bedbeb-3e9f-48ae-ad40-01720f946dbd": {"node_ids": ["fda762bc-3cb2-4742-909d-77d2d0e3ba97"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "18b63b00-3c34-4e5f-81fc-7cd0af69e8b7": {"node_ids": ["f0370dd0-c4fb-40cf-9085-1c22d1e5c3e9"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "8f9d34b7-5879-4e66-a6aa-0e477a509ce3": {"node_ids": ["a52fc594-302f-4bd9-8599-b9c2f186b014"], "metadata": {"file_path": "\\mcp-test\\docs\\clients.md", "file_name": "clients.md", "file_size": 4727, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "f2902a59-40ac-4ed9-b88a-7fb9e4a83207": {"node_ids": ["61135a90-176b-4bc9-92dd-909d81861c07"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "cf1c76a9-04ec-4895-adc8-38d866494da4": {"node_ids": ["f14e52ff-bd4d-4815-9f7a-357885f302ee"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "4babb8dc-7684-4ce9-9f14-c033c7267719": {"node_ids": ["ef729c51-0616-403c-bd72-0fef8109454b"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "3e3fd041-76b5-494f-b4c8-6304d73d9364": {"node_ids": ["c522716d-db35-4a7d-aa5f-a5fa21632cef"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "d274cbf0-58c4-47ab-8df3-a0726bdc21fb": {"node_ids": ["57ffeb4c-051e-4ac2-9c0b-51593d8cd7f0"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "3a83a364-4584-4769-be60-9214d69c4c03": {"node_ids": ["ee486c55-050e-4543-8bd8-06c7e747d2bb"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "da8644f9-8dbc-48c6-b714-1ca1cb9cb7ee": {"node_ids": ["0235f2e0-8c99-41a0-819b-8eb215d0899e"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "83aefef5-173f-4d29-bf00-b2fae3410d49": {"node_ids": ["911916e0-f9f2-438a-a468-edf03e82ab3e"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "e8998fa1-b2ff-4910-9c88-0537910a9476": {"node_ids": ["2f9f1667-345e-439c-a11f-263af1717f25"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c9951e01-4c50-42ed-8e3b-4031c7cb6cae": {"node_ids": ["f570ef9c-d1e4-4fcb-939b-856e98404f1f"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "84e9d413-aa9a-4156-9fc7-75b85e24767b": {"node_ids": ["df65f087-5ec0-4802-91a0-b521a2de1c4e"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "01461507-6aa3-412c-a0bd-00a6f51a7120": {"node_ids": ["efa9f17c-a0d3-4031-81bb-ecbdc2eb7802"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "f0b9caae-2563-489e-aca7-9cb25636a566": {"node_ids": ["b71cc32b-425c-447b-a4ea-ae9a45c5bb53"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "5321ee9c-06e5-4bfd-876e-5be265e49d9a": {"node_ids": ["eac26800-4f84-413f-a12e-2cbf232323dd"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "28c551b5-9595-4406-8b9d-44d378689ee1": {"node_ids": ["48f54409-0f62-40d3-8a3f-1c229c5908a6"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "5dc6b721-a7f0-4f94-97a8-2ac60d63c8cb": {"node_ids": ["d9cd5ba7-6cb7-44dd-9606-11d25bd4f559"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "422a3694-fe52-4c6f-8147-5088eeec4039": {"node_ids": ["92b2d6a1-0a99-471f-b5e1-20abec53a2c5"], "metadata": {"file_path": "\\mcp-test\\docs\\core-architecture.md", "file_name": "core-architecture.md", "file_size": 9559, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "887d1c89-81b2-4be6-8cbf-2d12fd4c6faf": {"node_ids": ["21ffd6dd-a03f-4f75-82fc-e2413895a282"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "fd681403-a52a-401b-a8fb-23c7037367fb": {"node_ids": ["ab1382c7-64bf-43bc-a004-8ca8fb756140"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "fffb161b-7ea8-4080-b8a9-964ff78c4c5c": {"node_ids": ["d032a9d1-497b-43a7-8e7a-4c368da8a724"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "58a45610-1500-4839-93aa-2b4d485a9969": {"node_ids": ["22c7e67e-4601-48be-9fc4-fc2a586cd33f"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "6d27ec27-70a0-474c-bc2d-a8642aaa8825": {"node_ids": ["b2587d4f-2d3b-4383-9896-fc654d00259a"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "b12e0c93-229a-43aa-96cd-51a7625f48cc": {"node_ids": ["d7a42fb6-dbe5-49bb-adc7-63d6d2501dbf"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "26bbd5ae-66a4-4545-bedb-d2184a025e5c": {"node_ids": ["97757397-efbe-4079-9305-8dee972ed749"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "d324b3e8-8a0e-463f-ab65-a933933dd0b8": {"node_ids": ["c1b93c0c-cb09-43c8-8040-5af9143aa912"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "7bc96df3-6a48-4842-9d56-ed8ae877cb9f": {"node_ids": ["0b568a55-d168-426a-a286-acdb2e242efa"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "85afdd1d-3363-44e8-ad23-adfc23649238": {"node_ids": ["69a4bc11-2155-4bb2-903a-0f9ce5a36b9e"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "7152d24d-d099-4f5f-95b5-c1bdee21484d": {"node_ids": ["f219b098-33ee-45a7-8e39-ab5f48cf0fb9"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "419d5db5-f118-43c0-9ef9-58e419936b75": {"node_ids": ["18c39861-c28e-4bf2-aafe-d536d2e9c400"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "2e3ec590-ec9b-4cbd-b8f1-0489bc5c4099": {"node_ids": ["a4faad99-903c-4baa-bf96-51a97c9a244b"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "469afb5d-e4f1-4114-9e8a-552542f70df5": {"node_ids": ["0e785f78-62b7-41d4-af6f-c44cdde1bd22"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "749ac45b-16fa-485d-9234-642d198d9490": {"node_ids": ["728bdf89-80af-45b0-acb6-93750f25f219"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "1c23e7c4-de16-4ec1-ba81-3ca43a95901b": {"node_ids": ["27fb5f81-5afe-4a0c-a181-749b8347a900"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "7c8fef52-d82f-4942-a036-d22ac5aba3e4": {"node_ids": ["b1a52d68-56ac-43b1-adb3-7984f193ec94"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "7b327916-a5eb-4df6-905c-037140f78f0b": {"node_ids": ["f9e7ef6f-260c-4155-aa2b-6349e15ee669"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "1d89d363-7b4b-42b3-b185-bba007cc6439": {"node_ids": ["e275e857-6466-445d-8a8b-5fdaeb2ee632"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "ae2dafad-92e4-4fd9-8f71-ce1925618393": {"node_ids": ["4e46cba6-8647-469b-a707-5c50c669771f"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "0b285c89-30a7-4626-9d8d-7ddb31749b9e": {"node_ids": ["1d66b171-e4b0-4a9a-9672-61d259388332"], "metadata": {"file_path": "\\mcp-test\\docs\\debugging.md", "file_name": "debugging.md", "file_size": 6380, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "bd574a3f-0ee4-4e04-b3de-ce503bd07670": {"node_ids": ["286a2818-4b29-41a7-bd0d-a329da830f1e"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "60d82583-d785-48b9-94a3-ab34b6cc81c4": {"node_ids": ["dfb3a3cc-d36b-4b93-8b76-399821902d14"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "8863ca32-d4a1-4677-93d3-c586428fd17e": {"node_ids": ["f65b9030-f0be-40f7-b2a7-b7aa4028a871"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "7157e970-cd48-47fa-94a9-4f56899ed7c4": {"node_ids": ["eb8e9c76-3d68-4181-94c5-7da68fa55dc1"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "283984ff-35df-455e-adb3-ee5c04bf52b7": {"node_ids": ["dc2fbfd3-5b25-4023-a3cf-f5ee295b2baa"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "7b5dd838-2b6c-431d-a5c3-48a4277207d0": {"node_ids": ["ed33ca78-6e09-4114-9bde-e7e3b4114217"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "f4ad37d9-6d05-48c9-afdf-4e1cb3327a42": {"node_ids": ["ab92706d-56b7-4bf3-b696-ce6fb93a892c"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "e562e9ce-09ad-4064-b75b-05b89d47dd64": {"node_ids": ["9f8dcb08-d3ee-4a10-9c3a-750f440a7981"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "047d8813-a04e-4ee2-bf1b-9ffbb49e6e78": {"node_ids": ["339c2513-036b-48fc-8386-07a08e0313aa"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "5fa4b0f4-beec-4d83-bee5-ab31ff5cd3ba": {"node_ids": ["d0b63bc7-23f1-477b-bde6-43a93ace4834"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "799cbbb3-d4f5-4bfc-912b-f86e373d0e8d": {"node_ids": ["773f5f17-d66e-4401-a4a1-469458b8da32"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "69fdff5b-92ca-4f7b-989e-3679c5ac1cd4": {"node_ids": ["631b4409-4f86-4ee8-8287-2ebfe2480f7d"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "82913062-5c96-4eae-8ae9-4131091e8bd1": {"node_ids": ["2050fee9-1ead-43ed-99c1-c666ea242f3f"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "baca83a1-6f67-4946-8a8a-2e677dec84a3": {"node_ids": ["b27251e8-0db0-4907-8058-00c917776c5d"], "metadata": {"file_path": "\\mcp-test\\docs\\inspector.md", "file_name": "inspector.md", "file_size": 3994, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "e3ec7194-47fc-4c1d-8021-c9ca02afcb69": {"node_ids": ["48845265-fa5b-4e98-9bd1-6f48fb321d72"], "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "47b20144-10ce-425f-b0e4-64d31a641578": {"node_ids": ["e54edf57-570b-4851-ac72-78794af458c7"], "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "d38acb5c-aacd-4555-93cf-4191a8d4084f": {"node_ids": ["aea2e275-efe4-44cc-b045-e20f2b2554e7"], "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "b5dcd142-089f-4430-b5b0-f055740c3e49": {"node_ids": ["ee00b89e-fc3f-4427-9dc5-6cfa23d6a872"], "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "b8201c0c-fbca-4345-a2f0-ca01c25d8712": {"node_ids": ["57e370a8-a3bd-42e2-8bd1-701c1428f21f"], "metadata": {"file_path": "\\mcp-test\\docs\\introduction.md", "file_name": "introduction.md", "file_size": 2641, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "73d0401f-fa58-4b29-a752-912f4f4c0819": {"node_ids": ["28706ee0-edbd-49a1-84e6-828bec0fa98b"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "51309f06-0813-422c-b527-e515eb51de4a": {"node_ids": ["c921c514-851b-44ff-b18a-623bcac206d8"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "4ce7dc28-591b-4b77-a2b1-d7828ea67e17": {"node_ids": ["b9bdde2a-704f-4626-863e-1023354ceea8"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "e4a7d4a5-6c27-47f5-80d7-8a58763a7e53": {"node_ids": ["ed9d7613-2c6e-4c03-aac8-525274f627b9"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c438e8aa-7ffe-40e8-acac-b6924aed965b": {"node_ids": ["074508c2-44f9-476a-929e-436b0423e5e2"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "d5b65b58-2b28-4dc6-a65c-75d00109020b": {"node_ids": ["bbc9e626-e7e8-4315-b75c-6d99167beee7"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "a8d8308c-1e72-48ab-8b80-ba98a775490c": {"node_ids": ["1a104ef5-602a-47a3-95ba-51df1aa3efbe"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "b7501837-1409-48f3-8cc6-26a0f161fbd5": {"node_ids": ["056d77ac-cfb2-42c5-8957-bf73f4ff00d3"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "621780ee-ccbe-49b7-8d80-88f4f5312f13": {"node_ids": ["e77b58fd-169a-48f3-a213-c029eb595892"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "121694bb-5e98-4230-8455-a3d4d13c87e1": {"node_ids": ["ae73518d-e247-409a-b8f8-4fefe14f2ce8"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "ebc6a198-26ca-41fe-a4bf-31677337140d": {"node_ids": ["005b73a0-4e3c-4115-a277-e836f242923e"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "b941ae0c-1ae5-41d6-bd69-922d0d428d4d": {"node_ids": ["5f0bdd9b-32b7-44c3-8734-178f14b570f4"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "eb886181-3ab6-4423-b3f9-8fae57985365": {"node_ids": ["fb5634f7-e3c7-43f9-be99-8361dfdef754"], "metadata": {"file_path": "\\mcp-test\\docs\\prompts.md", "file_name": "prompts.md", "file_size": 11424, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "f4df009f-5f91-4884-a556-46e00eb22f98": {"node_ids": ["a5109113-2235-42dc-a2a4-ffdefcbe0662"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "90971de8-80ef-4744-9dd8-721b7e3e7b0a": {"node_ids": ["bca52b8f-a0a6-43cb-b669-b1c2ce04a208"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "ca0e58a1-7d70-418c-b5c1-53a598e9af36": {"node_ids": ["c579e13d-c757-4b59-a189-2222499ec86f", "3d1ebf39-6548-425a-bde8-89a1e76a0b44"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "5026ae97-70ac-4dbb-bc68-3bdec795b3e0": {"node_ids": ["b8fa73a0-83d0-45bf-9f2a-b47c1d60b6fb"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "31de72e2-e86c-4fd0-be16-f1eaf9015127": {"node_ids": ["405bae98-66a7-4845-b6d0-d962f9a0bb7e"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "54a76e75-fe3a-478e-9c53-c369579167a8": {"node_ids": ["af1cab62-326e-471a-ace5-da9e07e85cb2"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "ae7fb894-b0ac-4228-b550-57edc710e393": {"node_ids": ["3cc54cbf-1067-413b-8a7a-d705683909bb"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "21d9b4cf-2e86-4034-9825-991968e97416": {"node_ids": ["fab4d423-a2a6-464a-a2e8-5dea48b733e1"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "f7f02eb7-8c77-4f41-9ff4-65a7a6f296e9": {"node_ids": ["3dbf6370-8863-4a91-b88c-1349d4370a77"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c14983c3-d499-436f-bc9c-fe3f9b8d436e": {"node_ids": ["b3a64693-f1f0-4fc1-8cff-853e6a7d422a"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "94b4de45-2e13-415c-b988-042201857c79": {"node_ids": ["78966c2b-c82e-4354-a3b6-b28123a5607b"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c5e503a8-478b-4548-b8d8-746efa3bf199": {"node_ids": ["d01f5efb-3102-405a-86bc-d6859bed043c"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "560e6cd7-e001-4530-a256-80bd1bd2bc87": {"node_ids": ["69e0aa0d-5e63-4d9d-84ed-f4614e620b90"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "202194d6-6c38-498b-8d35-fd14ffcc47e0": {"node_ids": ["055c622e-cf8a-4a50-b5fe-62c96eae1c57"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "5a803291-8524-4855-8d1d-6eeb52b1c1e7": {"node_ids": ["d54418da-1242-4fc7-8d3f-c80980d26298"], "metadata": {"file_path": "\\mcp-test\\docs\\python.md", "file_name": "python.md", "file_size": 23525, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "ac67467e-f49e-4a9b-ba45-0ebc78644ec7": {"node_ids": ["7f9a5e0b-5f3a-413e-a20e-a8d097668d4f"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "922dcff3-d45f-46a9-8e18-c102a80c2317": {"node_ids": ["de0b63e0-5a79-4314-8f4f-250c7d468b25"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "87ed4747-1073-4fbc-8c80-91b3f6d54785": {"node_ids": ["aa2f339c-f6f6-42c4-9ae8-9a8c10a9847d"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "7d7d1913-f4b1-4309-93a3-d76a5002942e": {"node_ids": ["b6954c32-8a27-4123-b5eb-bb48bb352c6a"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "57d53c61-df4b-4a59-9904-55cfe4f5a355": {"node_ids": ["4ab0fe13-eb80-420d-9669-223c78a0d111"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "523d0cac-9b53-4c72-81bb-6536d99707a1": {"node_ids": ["4a11928e-7b6e-4f9d-8023-d0e8182a2ba1"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "a64535dd-4a97-4860-b5f0-708358508c1d": {"node_ids": ["faefa5eb-a1de-480c-a0f1-915a015ae2f6"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "f5094cab-bb02-4365-9145-ad1ae902ae4b": {"node_ids": ["b39f3ad7-d703-43f3-a70e-3246f745796a"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "46719a54-a341-4b3f-9b3d-51c93158d62f": {"node_ids": ["73b9900e-3a87-4ec1-b8eb-7cd4bbbd3f68"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "e4c4343f-9f0e-4fc6-8cde-fc09d8d4e4ae": {"node_ids": ["7cebd59e-b0e0-4414-920f-febf4ccf025f"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "a417b631-a8ac-4471-bbba-6611d21409bd": {"node_ids": ["2a4a365c-ed8e-4f7c-b389-d529aa2cd99f"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "676e96c3-9e3e-475b-97bf-ed28b9cf5c3b": {"node_ids": ["6770f799-fba6-40e1-a721-94f441a2d7e9"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "24dfb47b-3694-44cf-8f36-6c25d0b70135": {"node_ids": ["0ed207eb-d1c8-43da-8937-b6338ac1282d"], "metadata": {"file_path": "\\mcp-test\\docs\\quickstart.md", "file_name": "quickstart.md", "file_size": 14455, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "6b76a792-4f4c-406b-bc68-d89d1bfe1222": {"node_ids": ["9a02158d-8d11-46de-a952-f8404936da61"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "1fe207c7-1ea5-4d16-b5af-e647cdaccf68": {"node_ids": ["e7504596-30f7-4fb3-a61b-988df99ef1cd"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "a238ed18-5ddc-45b5-826b-c50fcf6cc9d0": {"node_ids": ["7b701d84-6166-4fda-ace9-5701c32fc881"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "6d1c5909-e638-43b5-b702-618cec4a8970": {"node_ids": ["af3140b4-a51b-4618-9d79-e0b7d1a87638"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "3728fd48-a72e-4028-a8a2-253e3bc30ecc": {"node_ids": ["60d7476b-cf48-473e-bac5-fb1fea7e7df8"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "73d15744-b514-442d-82d0-3b54e9c138e9": {"node_ids": ["462ee74d-d77f-49f7-b2f8-bac1fee4d772"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "a0c86139-b721-4f87-a98e-47b0cf7665c9": {"node_ids": ["146fa74c-c442-4f8b-999b-a8f76572f71b"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c85a4f75-6d24-4182-ae5d-7a920fe6bc89": {"node_ids": ["85979e22-39ac-48da-bdae-bf38a0ca84a4"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "72d06ab8-952b-4494-8c0e-34a0b0e0144f": {"node_ids": ["7a19de45-4b7b-44bb-a85c-f68256c0acc2"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "9d4b0ca0-2d14-4011-8bb1-b5a0a51ae27d": {"node_ids": ["19e58b01-1807-4bb2-ac2c-b958f1168d01"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "d68bc248-2499-42e1-b497-dda25de5dd68": {"node_ids": ["6f7b8222-5087-4e3f-b714-4a234b5fd3fd"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "29e37942-eaec-4407-b57d-5d9403c4ee37": {"node_ids": ["8e765eca-f59b-452f-b5d6-d8c02030db55"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "86098e8f-0111-43de-92f7-3f4a67e24525": {"node_ids": ["34c9b810-0bab-4838-9ab1-6607923aed92"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "a5b39789-ed3e-441b-875d-b88261af2ba5": {"node_ids": ["abf3ccfd-6397-41cd-9725-cafc50215058"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "94c53122-0a62-418b-a234-a09c1083d0b0": {"node_ids": ["f8b78cb2-9c46-42ca-b402-1699a802f609"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "8f7ada60-85e8-4c29-9311-f38624912487": {"node_ids": ["8309e946-9aa8-4e54-99e5-48665be09c35"], "metadata": {"file_path": "\\mcp-test\\docs\\resources.md", "file_name": "resources.md", "file_size": 7460, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "0d1379ec-a3a7-45dc-9fcd-593f556e412d": {"node_ids": ["c37af261-29ad-4ee4-9b97-6ce2fb507e34"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "51d02de8-dc42-44ef-9ffb-d354f030dd46": {"node_ids": ["b235286f-b165-47f7-8f71-74cdc7b6ade3"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "65d88e18-bbfb-4f81-843d-30469e264cf7": {"node_ids": ["9e844280-66b2-4a4a-903f-0439390e372d"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "61999da8-d939-4d3b-9847-0ecb272a1495": {"node_ids": ["8a240d04-5e7c-4339-ba30-988f23419277"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "77e3bdc9-26d6-4577-bc90-796919c7ac00": {"node_ids": ["0474504a-862a-42c1-b115-f276e78e0b6f"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "9e978e5a-a9e7-4bdf-8590-02f74352172e": {"node_ids": ["6166d6fd-973c-43bd-9aff-7834d8686059"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "9a999f13-7735-4fba-8302-728cfb93364c": {"node_ids": ["d94bf21a-8365-4ed4-9b98-18b7c695607b"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "9c6a2a30-1ca3-4ff3-a3ac-d7ef75e47e27": {"node_ids": ["73bb49b5-b406-475e-880f-0036f9acdbe0"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "fc499ba4-9259-4e59-b844-96d8b1eeee69": {"node_ids": ["ca43dbcb-d727-4165-8edb-05c0d1aa2293"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "10221894-99bd-48a8-af53-e01f8ff35f89": {"node_ids": ["574cc3f9-4d9d-456e-9760-27e9e2339053"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "b01b5cec-e13c-4dbe-8330-027585a0a953": {"node_ids": ["5e1b4a63-8d44-4848-8253-685bfd529f9f"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "fb7440ec-0750-400c-a94a-3b0445ede4bc": {"node_ids": ["ab0d0a99-0c00-47eb-aebc-9e43375603a3"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "1956cde6-bf60-44b2-b020-77e3b2133e3d": {"node_ids": ["4b3d7d85-e78c-43f1-b025-06d4079ba738"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c367460d-d277-4a9d-828a-e78fc4212b1e": {"node_ids": ["b2bd74a2-8c59-4bbf-a45a-1ab290836855"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "220b9d46-cadf-4242-8699-a214cd9d0e9c": {"node_ids": ["15d1e7d8-b7e1-4d8f-841e-7f3bceea7dcb"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c167640f-f167-40e9-a724-59758cc1d39b": {"node_ids": ["59231042-98f2-4000-baf8-49adb607a7cf"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "5e464e1d-c62b-4b2a-9d6a-9827b6b8c014": {"node_ids": ["69e22506-9f4c-480c-8742-1c3ec5ba94da"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "1ef2a78e-fc88-493e-ba17-7a48c25345c2": {"node_ids": ["078c98c1-e9b3-4669-97a1-63dea5d8699a"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "5312dc11-6db6-435e-80e0-3eef52a8cf86": {"node_ids": ["d6d3b4c6-f165-4c30-b486-c49b732a49b2"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "05d87d3c-6257-4d80-8131-0bb1fa956cac": {"node_ids": ["07b7eb2d-a6d1-4729-8982-d199fa693b7e"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "54368674-c124-45c1-ae78-513abdc5834d": {"node_ids": ["f7d77b86-36eb-4d2a-adcb-a07e3c36a49c"], "metadata": {"file_path": "\\mcp-test\\docs\\sampling.md", "file_name": "sampling.md", "file_size": 6772, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "cc8e30a0-ccee-4b00-8a7d-0e4039f53431": {"node_ids": ["be67a91c-3143-40ed-83dd-f58c88fb5e6c"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "1784b2ef-f5af-444f-850b-6b0a62808f1b": {"node_ids": ["e4708e79-deca-4fb3-96ae-7c50de789d4e"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "a38cb569-6ff6-42fe-a0d5-55d66c00d58b": {"node_ids": ["dd2b6b95-290b-4a25-8897-0785a80bad6d"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c96c36e4-e9c0-4c54-bc01-12bbafee1fad": {"node_ids": ["a6dd2d4e-33fe-4791-8e27-80c686aa4a4a"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "41f403e3-1b0a-4746-a191-5292a6dfed8f": {"node_ids": ["22ba2c04-98b0-46ce-86ad-e936679a8e59"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "48492b05-7a08-4584-976f-c686bee6528d": {"node_ids": ["bc247849-23a3-40dc-8458-7108a581e435"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "0f4c44ea-d310-4f2b-a5fa-6b6c0208f0d9": {"node_ids": ["baa02a67-d979-4e01-b652-23183b476fb6"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "cd9b266e-87b0-4e18-a5bf-80fc8f05b39d": {"node_ids": ["c6da1bf5-0efc-46d2-ae00-8b143d1651ca"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "da5ddae2-25ad-42d4-a1c2-ef512c8ecd77": {"node_ids": ["48f65610-0156-4761-a2aa-3dc64f3c46d3"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "68673685-3b8a-4484-922d-f303a520f2e9": {"node_ids": ["b9b97c60-459f-40a9-8d26-4c150c7bbaab"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "0db188fd-bc56-4c66-a9ac-00e77a7d68c4": {"node_ids": ["564005b6-103d-4404-ab38-fe9b8f82d87d"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "06e624e6-cfba-4085-89d7-ed3dd0f8a094": {"node_ids": ["9ba1620b-d937-4ebb-92a4-5d8c32584967"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "e4fc6a57-b5d2-49cc-980f-ccbf3a85e416": {"node_ids": ["11fe8893-9339-42a8-af95-74d218a3f3fc"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "6b59cebe-e79a-47ac-aaa6-9ab84cb47ad7": {"node_ids": ["7ab559cd-2ce0-42b6-a234-592003f0d06d"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "0b514e5d-1fb4-4e1d-88a4-79095f5a374a": {"node_ids": ["9ed57344-d45d-4833-a114-7db4662e2d9a"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "63a41810-4eb1-4d5f-87a0-684450732272": {"node_ids": ["42510425-a514-41d6-a2e2-7bd79f85331d"], "metadata": {"file_path": "\\mcp-test\\docs\\tools.md", "file_name": "tools.md", "file_size": 8960, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "e9221596-abb2-4324-b89d-2cd7b2a92ddb": {"node_ids": ["5d216ea9-1fbc-47df-9996-88c7037422a9"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "1334826a-501d-49ae-ad22-5cc91c3b001c": {"node_ids": ["0fc9d80d-d4be-436f-9a7c-56762e1f1ed5"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "6666c3c9-1ffe-44c6-8618-97a0e3ff03cc": {"node_ids": ["4eec010c-f71c-44ee-9b89-e1559085fbc3"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "91483b4b-e367-4cc8-856a-616c084c1c1f": {"node_ids": ["4df803f0-5d8e-472e-a6a6-8238ede8ea85"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "36c19c60-33f7-4c66-a5dc-24b9486cd994": {"node_ids": ["5b92be35-9496-458e-9bd8-0ccde83260a8"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "a05c7b3b-9c25-4a08-a984-0e0e992d3020": {"node_ids": ["8c152b3a-30ef-49ef-940f-47888dccc026"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "41d3822e-23c0-4df7-811c-aba915d974c5": {"node_ids": ["79ec7d93-b6a2-4731-9d6b-8d0d9ee373ef"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "987d13cb-8396-4f4a-9d55-4c05b1c7caaf": {"node_ids": ["d61dd1a0-ea12-4ff5-8a92-cd3b972bda35"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "facd09ed-58a2-4071-abf9-b049b113791e": {"node_ids": ["7cb28a36-aa16-4845-a2f7-acde883347d0"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "016b6376-1f5f-4ab8-8ef4-c2eefa4d1ae0": {"node_ids": ["db42729f-7629-4a10-8d52-15f089535e48"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "1a3c5e81-8b4a-4b00-bb0b-c8f9f90f2ba6": {"node_ids": ["e8154537-0254-40dd-92d9-5099d6976671"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "3e57da15-12aa-433c-bc85-e4130dec9e37": {"node_ids": ["869cd7a9-5988-4ae2-895d-39caf4e41509"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "04128029-8178-486c-bf55-1c4f14774312": {"node_ids": ["3a1ff702-2029-419c-a930-87b4815ba419"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "de41b7cf-03be-4df3-a034-98c4cebce8c9": {"node_ids": ["a38e4a1f-53d3-4651-8b83-39377444d5e0"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "d5c55470-8e6c-400e-a0d8-29abea0f7bed": {"node_ids": ["ac0dbd84-b3ae-4cfc-97ea-1eaf2209ed8a"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "b25bb007-bfde-4bdd-a7dc-6e8165d8d1b6": {"node_ids": ["c2f7585b-1ee0-467b-8ca7-1700d3d18ba3"], "metadata": {"file_path": "\\mcp-test\\docs\\transports.md", "file_name": "transports.md", "file_size": 10720, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "cce1528e-17b4-4e28-b72d-7130f88d3a7a": {"node_ids": ["de888354-1e7a-4768-8523-cc2280fb3350"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "421edbf0-1570-4214-bb65-2875904ba0da": {"node_ids": ["86167735-076b-4f8e-bc27-b232d0d75f80"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "af643155-90ba-44d4-8b06-b1bf6aae4074": {"node_ids": ["66d6b380-1448-4b87-92bd-14ae0523a7f0", "1f081d2c-4908-4a18-99a6-5917efacd2f0", "bb9416dd-7d08-4204-8389-cd565416ef14"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "eb2f0bbd-70a1-4c67-96fb-51b0af3d6350": {"node_ids": ["61db3850-dcca-4919-821d-e180dc786fe8"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "ce29beaa-b6ec-4162-9238-ffb22f25996e": {"node_ids": ["52fb2c29-1f25-49f5-90f3-60d856cfba72"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "85ca1c28-ca0f-4dde-9026-706aed855ed7": {"node_ids": ["7d60baaa-0588-4efe-9c0b-f88b890c2c0b"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "cdcbc628-a47c-4c06-8c80-8ac3b57b03bc": {"node_ids": ["fb65fa84-8507-46d1-8d72-5c5e4abe2679"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "6be697f4-8f37-4943-9805-38c7ed406fa0": {"node_ids": ["ca5814a9-2376-40a9-a6cd-9a81df95a887"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "debe3122-279b-4d49-8bc9-fe74a488011a": {"node_ids": ["213bb680-4034-4552-b23c-1cdd26318f07"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "ae22fc46-67d6-4891-946d-a8e52141ae5b": {"node_ids": ["df93a23f-0f96-430c-b36d-795bc0018f5c"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "c586c734-0136-47f5-817f-24b6eea6a608": {"node_ids": ["6ca9b9e8-e639-4451-a85c-34d4c07b43fb"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "74aa2bb2-f776-4673-82ad-ba124bf4006d": {"node_ids": ["52a74f2d-e2b8-49b2-9f12-a99ee69d148d"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}, "51293218-7001-43eb-853d-5c327ae69535": {"node_ids": ["1f1563ae-ffae-485e-bd01-ff53207a0456"], "metadata": {"file_path": "\\mcp-test\\docs\\typescript.md", "file_name": "typescript.md", "file_size": 15776, "creation_date": "2024-12-02", "last_modified_date": "2024-12-02"}}}}